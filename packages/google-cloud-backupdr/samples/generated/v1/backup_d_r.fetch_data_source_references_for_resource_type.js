// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, resourceType) {
  // [START backupdr_v1_generated_BackupDR_FetchDataSourceReferencesForResourceType_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The parent resource name.
   *  Format: projects/{project}/locations/{location}
   */
  // const parent = 'abc123'
  /**
   *  Required. The type of the GCP resource.
   *  Ex: sql.googleapis.com/Instance
   */
  // const resourceType = 'abc123'
  /**
   *  Optional. The maximum number of DataSourceReferences to return. The service
   *  may return fewer than this value. If unspecified, at most 50
   *  DataSourceReferences will be returned. The maximum value is 100; values
   *  above 100 will be coerced to 100.
   */
  // const pageSize = 1234
  /**
   *  Optional. A page token, received from a previous call of
   *  `FetchDataSourceReferencesForResourceType`.
   *  Provide this to retrieve the subsequent page.
   *  When paginating, all other parameters provided to
   *  `FetchDataSourceReferencesForResourceType` must match
   *  the call that provided the page token.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A filter expression that filters the results fetched in the
   *  response. The expression must specify the field name, a comparison
   *  operator, and the value that you want to use for filtering. Supported
   *  fields:
   *  * data_source
   *  * data_source_gcp_resource_info.gcp_resourcename
   *  * data_source_backup_config_state
   *  * data_source_backup_count
   *  * data_source_backup_config_info.last_backup_state
   *  * data_source_gcp_resource_info.gcp_resourcename
   *  * data_source_gcp_resource_info.type
   *  * data_source_gcp_resource_info.location
   *  * data_source_gcp_resource_info.cloud_sql_instance_properties.instance_create_time
   */
  // const filter = 'abc123'
  /**
   *  Optional. A comma-separated list of fields to order by, sorted in ascending
   *  order. Use "desc" after a field name for descending.
   *  Supported fields:
   *  * name
   */
  // const orderBy = 'abc123'

  // Imports the Backupdr library
  const {BackupDRClient} = require('@google-cloud/backupdr').v1;

  // Instantiates a client
  const backupdrClient = new BackupDRClient();

  async function callFetchDataSourceReferencesForResourceType() {
    // Construct request
    const request = {
      parent,
      resourceType,
    };

    // Run request
    const iterable = backupdrClient.fetchDataSourceReferencesForResourceTypeAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callFetchDataSourceReferencesForResourceType();
  // [END backupdr_v1_generated_BackupDR_FetchDataSourceReferencesForResourceType_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
