// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/insights_config_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './insights_config_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Creates and manages InsightsConfigs.
 *
 *  The InsightsConfig resource is the core configuration object to capture
 *  events from your Software Development Lifecycle. It acts as the central hub
 *  for managing how Developer connect understands your application, its runtime
 *  environments, and the artifacts deployed within them.
 *  A user can create an InsightsConfig, list previously-requested
 *  InsightsConfigs or get InsightsConfigs by their ID to determine the status of
 *  the InsightsConfig.
 * @class
 * @memberof v1
 */
export class InsightsConfigServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('developerconnect');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  insightsConfigServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of InsightsConfigServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new InsightsConfigServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof InsightsConfigServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'developerconnect.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      accountConnectorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/accountConnectors/{account_connector}'
      ),
      connectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}'
      ),
      gitRepositoryLinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{git_repository_link}'
      ),
      insightsConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/insightsConfigs/{insights_config}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/accountConnectors/{account_connector}/users/{user}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInsightsConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'insightsConfigs')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createInsightsConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.InsightsConfig') as gax.protobuf.Type;
    const createInsightsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata') as gax.protobuf.Type;
    const updateInsightsConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.InsightsConfig') as gax.protobuf.Type;
    const updateInsightsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteInsightsConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteInsightsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createInsightsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInsightsConfigResponse.decode.bind(createInsightsConfigResponse),
        createInsightsConfigMetadata.decode.bind(createInsightsConfigMetadata)),
      updateInsightsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateInsightsConfigResponse.decode.bind(updateInsightsConfigResponse),
        updateInsightsConfigMetadata.decode.bind(updateInsightsConfigMetadata)),
      deleteInsightsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInsightsConfigResponse.decode.bind(deleteInsightsConfigResponse),
        deleteInsightsConfigMetadata.decode.bind(deleteInsightsConfigMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.developerconnect.v1.InsightsConfigService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.insightsConfigServiceStub) {
      return this.insightsConfigServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.developerconnect.v1.InsightsConfigService.
    this.insightsConfigServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.developerconnect.v1.InsightsConfigService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.developerconnect.v1.InsightsConfigService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const insightsConfigServiceStubMethods =
        ['listInsightsConfigs', 'createInsightsConfig', 'getInsightsConfig', 'updateInsightsConfig', 'deleteInsightsConfig'];
    for (const methodName of insightsConfigServiceStubMethods) {
      const callPromise = this.insightsConfigServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.insightsConfigServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'developerconnect.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'developerconnect.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Insight.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.InsightsConfig|InsightsConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.get_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_GetInsightsConfig_async
 */
  getInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.developerconnect.v1.IInsightsConfig,
        protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|undefined, {}|undefined
      ]>;
  getInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.developerconnect.v1.IInsightsConfig,
          protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest,
      callback: Callback<
          protos.google.cloud.developerconnect.v1.IInsightsConfig,
          protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.developerconnect.v1.IInsightsConfig,
          protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.developerconnect.v1.IInsightsConfig,
          protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.developerconnect.v1.IInsightsConfig,
        protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getInsightsConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.developerconnect.v1.IInsightsConfig,
        protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getInsightsConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getInsightsConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.developerconnect.v1.IInsightsConfig,
        protos.google.cloud.developerconnect.v1.IGetInsightsConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getInsightsConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Creates a new InsightsConfig in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Value for parent.
 * @param {string} request.insightsConfigId
 *   Required. ID of the requesting InsightsConfig.
 * @param {google.cloud.developerconnect.v1.InsightsConfig} request.insightsConfig
 *   Required. The resource being created.
 * @param {boolean} [request.validateOnly]
 *   Optional. If set, validate the request, but do not actually post it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.create_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_CreateInsightsConfig_async
 */
  createInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.ICreateInsightsConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.ICreateInsightsConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.ICreateInsightsConfigRequest,
      callback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.ICreateInsightsConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createInsightsConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createInsightsConfig request %j', request);
    return this.innerApiCalls.createInsightsConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createInsightsConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createInsightsConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.create_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_CreateInsightsConfig_async
 */
  async checkCreateInsightsConfigProgress(name: string): Promise<LROperation<protos.google.cloud.developerconnect.v1.InsightsConfig, protos.google.cloud.developerconnect.v1.OperationMetadata>>{
    this._log.info('createInsightsConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createInsightsConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.developerconnect.v1.InsightsConfig, protos.google.cloud.developerconnect.v1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single InsightsConfig.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.developerconnect.v1.InsightsConfig} request.insightsConfig
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.allowMissing]
 *   Optional. If set to true, and the insightsConfig is not found a new
 *   insightsConfig will be created. In this situation `update_mask` is ignored.
 *   The creation will succeed only if the input insightsConfig has all the
 *   necessary information (e.g a github_config with both  user_oauth_token and
 *   installation_id properties).
 * @param {boolean} [request.validateOnly]
 *   Optional. If set, validate the request, but do not actually post it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.update_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_UpdateInsightsConfig_async
 */
  updateInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IUpdateInsightsConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IUpdateInsightsConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IUpdateInsightsConfigRequest,
      callback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IUpdateInsightsConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'insights_config.name': request.insightsConfig!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateInsightsConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateInsightsConfig request %j', request);
    return this.innerApiCalls.updateInsightsConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.developerconnect.v1.IInsightsConfig, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateInsightsConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateInsightsConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.update_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_UpdateInsightsConfig_async
 */
  async checkUpdateInsightsConfigProgress(name: string): Promise<LROperation<protos.google.cloud.developerconnect.v1.InsightsConfig, protos.google.cloud.developerconnect.v1.OperationMetadata>>{
    this._log.info('updateInsightsConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateInsightsConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.developerconnect.v1.InsightsConfig, protos.google.cloud.developerconnect.v1.OperationMetadata>;
  }
/**
 * Delete a single Insight.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Value for parent.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes after the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.validateOnly]
 *   Optional. If set, validate the request, but do not actually post it.
 * @param {string} [request.etag]
 *   Optional. This checksum is computed by the server based on the value of
 *   other fields, and may be sent on update and delete requests to ensure the
 *   client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.delete_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_DeleteInsightsConfig_async
 */
  deleteInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IDeleteInsightsConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IDeleteInsightsConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteInsightsConfig(
      request: protos.google.cloud.developerconnect.v1.IDeleteInsightsConfigRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteInsightsConfig(
      request?: protos.google.cloud.developerconnect.v1.IDeleteInsightsConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteInsightsConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteInsightsConfig request %j', request);
    return this.innerApiCalls.deleteInsightsConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.developerconnect.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteInsightsConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteInsightsConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.delete_insights_config.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_DeleteInsightsConfig_async
 */
  async checkDeleteInsightsConfigProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.developerconnect.v1.OperationMetadata>>{
    this._log.info('deleteInsightsConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteInsightsConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.developerconnect.v1.OperationMetadata>;
  }
 /**
 * Lists InsightsConfigs in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInsightsConfigsRequest.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results. See https://google.aip.dev/160 for more
 *   details. Filter string, adhering to the rules in
 *   https://google.aip.dev/160. List only InsightsConfigs matching the filter.
 *   If filter is empty, all InsightsConfigs are listed.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.developerconnect.v1.InsightsConfig|InsightsConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listInsightsConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listInsightsConfigs(
      request?: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.developerconnect.v1.IInsightsConfig[],
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest|null,
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse
      ]>;
  listInsightsConfigs(
      request: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse|null|undefined,
          protos.google.cloud.developerconnect.v1.IInsightsConfig>): void;
  listInsightsConfigs(
      request: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse|null|undefined,
          protos.google.cloud.developerconnect.v1.IInsightsConfig>): void;
  listInsightsConfigs(
      request?: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse|null|undefined,
          protos.google.cloud.developerconnect.v1.IInsightsConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
          protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse|null|undefined,
          protos.google.cloud.developerconnect.v1.IInsightsConfig>):
      Promise<[
        protos.google.cloud.developerconnect.v1.IInsightsConfig[],
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest|null,
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse|null|undefined,
      protos.google.cloud.developerconnect.v1.IInsightsConfig>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listInsightsConfigs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listInsightsConfigs request %j', request);
    return this.innerApiCalls
      .listInsightsConfigs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.developerconnect.v1.IInsightsConfig[],
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest|null,
        protos.google.cloud.developerconnect.v1.IListInsightsConfigsResponse
      ]) => {
        this._log.info('listInsightsConfigs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listInsightsConfigs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInsightsConfigsRequest.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results. See https://google.aip.dev/160 for more
 *   details. Filter string, adhering to the rules in
 *   https://google.aip.dev/160. List only InsightsConfigs matching the filter.
 *   If filter is empty, all InsightsConfigs are listed.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.developerconnect.v1.InsightsConfig|InsightsConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listInsightsConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listInsightsConfigsStream(
      request?: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listInsightsConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listInsightsConfigs stream %j', request);
    return this.descriptors.page.listInsightsConfigs.createStream(
      this.innerApiCalls.listInsightsConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listInsightsConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Parent value for ListInsightsConfigsRequest.
 * @param {number} [request.pageSize]
 *   Optional. Requested page size. Server may return fewer items than
 *   requested. If unspecified, server will pick an appropriate default.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. Filtering results. See https://google.aip.dev/160 for more
 *   details. Filter string, adhering to the rules in
 *   https://google.aip.dev/160. List only InsightsConfigs matching the filter.
 *   If filter is empty, all InsightsConfigs are listed.
 * @param {string} [request.orderBy]
 *   Optional. Hint for how to order the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.developerconnect.v1.InsightsConfig|InsightsConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/insights_config_service.list_insights_configs.js</caption>
 * region_tag:developerconnect_v1_generated_InsightsConfigService_ListInsightsConfigs_async
 */
  listInsightsConfigsAsync(
      request?: protos.google.cloud.developerconnect.v1.IListInsightsConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.developerconnect.v1.IInsightsConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listInsightsConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listInsightsConfigs iterate %j', request);
    return this.descriptors.page.listInsightsConfigs.asyncIterate(
      this.innerApiCalls['listInsightsConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.developerconnect.v1.IInsightsConfig>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified accountConnector resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} account_connector
   * @returns {string} Resource name string.
   */
  accountConnectorPath(project:string,location:string,accountConnector:string) {
    return this.pathTemplates.accountConnectorPathTemplate.render({
      project: project,
      location: location,
      account_connector: accountConnector,
    });
  }

  /**
   * Parse the project from AccountConnector resource.
   *
   * @param {string} accountConnectorName
   *   A fully-qualified path representing AccountConnector resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAccountConnectorName(accountConnectorName: string) {
    return this.pathTemplates.accountConnectorPathTemplate.match(accountConnectorName).project;
  }

  /**
   * Parse the location from AccountConnector resource.
   *
   * @param {string} accountConnectorName
   *   A fully-qualified path representing AccountConnector resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAccountConnectorName(accountConnectorName: string) {
    return this.pathTemplates.accountConnectorPathTemplate.match(accountConnectorName).location;
  }

  /**
   * Parse the account_connector from AccountConnector resource.
   *
   * @param {string} accountConnectorName
   *   A fully-qualified path representing AccountConnector resource.
   * @returns {string} A string representing the account_connector.
   */
  matchAccountConnectorFromAccountConnectorName(accountConnectorName: string) {
    return this.pathTemplates.accountConnectorPathTemplate.match(accountConnectorName).account_connector;
  }

  /**
   * Return a fully-qualified connection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @returns {string} Resource name string.
   */
  connectionPath(project:string,location:string,connection:string) {
    return this.pathTemplates.connectionPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
    });
  }

  /**
   * Parse the project from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName).project;
  }

  /**
   * Parse the location from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName).location;
  }

  /**
   * Parse the connection from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName).connection;
  }

  /**
   * Return a fully-qualified gitRepositoryLink resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @param {string} git_repository_link
   * @returns {string} Resource name string.
   */
  gitRepositoryLinkPath(project:string,location:string,connection:string,gitRepositoryLink:string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
      git_repository_link: gitRepositoryLink,
    });
  }

  /**
   * Parse the project from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(gitRepositoryLinkName).project;
  }

  /**
   * Parse the location from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(gitRepositoryLinkName).location;
  }

  /**
   * Parse the connection from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(gitRepositoryLinkName).connection;
  }

  /**
   * Parse the git_repository_link from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the git_repository_link.
   */
  matchGitRepositoryLinkFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(gitRepositoryLinkName).git_repository_link;
  }

  /**
   * Return a fully-qualified insightsConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} insights_config
   * @returns {string} Resource name string.
   */
  insightsConfigPath(project:string,location:string,insightsConfig:string) {
    return this.pathTemplates.insightsConfigPathTemplate.render({
      project: project,
      location: location,
      insights_config: insightsConfig,
    });
  }

  /**
   * Parse the project from InsightsConfig resource.
   *
   * @param {string} insightsConfigName
   *   A fully-qualified path representing InsightsConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInsightsConfigName(insightsConfigName: string) {
    return this.pathTemplates.insightsConfigPathTemplate.match(insightsConfigName).project;
  }

  /**
   * Parse the location from InsightsConfig resource.
   *
   * @param {string} insightsConfigName
   *   A fully-qualified path representing InsightsConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInsightsConfigName(insightsConfigName: string) {
    return this.pathTemplates.insightsConfigPathTemplate.match(insightsConfigName).location;
  }

  /**
   * Parse the insights_config from InsightsConfig resource.
   *
   * @param {string} insightsConfigName
   *   A fully-qualified path representing InsightsConfig resource.
   * @returns {string} A string representing the insights_config.
   */
  matchInsightsConfigFromInsightsConfigName(insightsConfigName: string) {
    return this.pathTemplates.insightsConfigPathTemplate.match(insightsConfigName).insights_config;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} account_connector
   * @param {string} user
   * @returns {string} Resource name string.
   */
  userPath(project:string,location:string,accountConnector:string,user:string) {
    return this.pathTemplates.userPathTemplate.render({
      project: project,
      location: location,
      account_connector: accountConnector,
      user: user,
    });
  }

  /**
   * Parse the project from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).project;
  }

  /**
   * Parse the location from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).location;
  }

  /**
   * Parse the account_connector from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the account_connector.
   */
  matchAccountConnectorFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).account_connector;
  }

  /**
   * Parse the user from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.insightsConfigServiceStub && !this._terminated) {
      return this.insightsConfigServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}