// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/org_policy_violations_preview_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './org_policy_violations_preview_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Violations Preview API service for OrgPolicy.
 *
 *  An
 *  {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 *  is a preview of the violations that will exist as soon as a proposed
 *  OrgPolicy change is submitted. To create an
 *  {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview},
 *  the API user specifies the changes they wish to make and requests the
 *  generation of a preview via {@link protos.|GenerateViolationsPreview}. the OrgPolicy
 *  Simulator service then scans the API user's currently existing resources to
 *  determine these resources violate the newly set OrgPolicy.
 * @class
 * @memberof v1
 */
export class OrgPolicyViolationsPreviewServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('policysimulator');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  orgPolicyViolationsPreviewServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of OrgPolicyViolationsPreviewServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new OrgPolicyViolationsPreviewServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof OrgPolicyViolationsPreviewServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'policysimulator.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      customConstraintPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/customConstraints/{custom_constraint}'
      ),
      folderConstraintPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/constraints/{constraint}'
      ),
      folderLocationReplayPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/replays/{replay}'
      ),
      folderLocationReplayReplayResultPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/replays/{replay}/results/{replay_result}'
      ),
      folderPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/policies/{policy}'
      ),
      orgPolicyViolationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{org_policy_violations_preview}/orgPolicyViolations/{org_policy_violation}'
      ),
      orgPolicyViolationsPreviewPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{org_policy_violations_preview}'
      ),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      organizationConstraintPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/constraints/{constraint}'
      ),
      organizationLocationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}'
      ),
      organizationLocationReplayPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/replays/{replay}'
      ),
      organizationLocationReplayReplayResultPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/replays/{replay}/results/{replay_result}'
      ),
      organizationPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/policies/{policy}'
      ),
      projectConstraintPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/constraints/{constraint}'
      ),
      projectLocationReplayPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/replays/{replay}'
      ),
      projectLocationReplayReplayResultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/replays/{replay}/results/{replay_result}'
      ),
      projectPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/policies/{policy}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listOrgPolicyViolationsPreviews:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'orgPolicyViolationsPreviews'),
      listOrgPolicyViolations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'orgPolicyViolations')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=operations/**}',additional_bindings: [{get: '/v1/{name=projects/*/locations/*/replays/*/operations/**}',},{get: '/v1/{name=folders/*/locations/*/replays/*/operations/**}',},{get: '/v1/{name=organizations/*/locations/*/replays/*/operations/**}',},{get: '/v1/{name=projects/*/locations/*/orgPolicyViolationsPreviews/*/operations/**}',},{get: '/v1/{name=folders/*/locations/*/orgPolicyViolationsPreviews/*/operations/**}',},{get: '/v1/{name=organizations/*/locations/*/orgPolicyViolationsPreviews/*/operations/**}',},{get: '/v1/{name=projects/*/locations/*/accessPolicySimulations/*/operations/**}',},{get: '/v1/{name=folders/*/locations/*/accessPolicySimulations/*/operations/**}',},{get: '/v1/{name=organizations/*/locations/*/accessPolicySimulations/*/operations/**}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=operations}',additional_bindings: [{get: '/v1/{name=projects/*/locations/*/replays/*/operations}',},{get: '/v1/{name=folders/*/locations/*/replays/*/operations}',},{get: '/v1/{name=organizations/*/locations/*/replays/*/operations}',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createOrgPolicyViolationsPreviewResponse = protoFilesRoot.lookup(
      '.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview') as gax.protobuf.Type;
    const createOrgPolicyViolationsPreviewMetadata = protoFilesRoot.lookup(
      '.google.cloud.policysimulator.v1.CreateOrgPolicyViolationsPreviewOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createOrgPolicyViolationsPreview: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createOrgPolicyViolationsPreviewResponse.decode.bind(createOrgPolicyViolationsPreviewResponse),
        createOrgPolicyViolationsPreviewMetadata.decode.bind(createOrgPolicyViolationsPreviewMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.policysimulator.v1.OrgPolicyViolationsPreviewService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.orgPolicyViolationsPreviewServiceStub) {
      return this.orgPolicyViolationsPreviewServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.policysimulator.v1.OrgPolicyViolationsPreviewService.
    this.orgPolicyViolationsPreviewServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.policysimulator.v1.OrgPolicyViolationsPreviewService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.policysimulator.v1.OrgPolicyViolationsPreviewService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const orgPolicyViolationsPreviewServiceStubMethods =
        ['listOrgPolicyViolationsPreviews', 'getOrgPolicyViolationsPreview', 'createOrgPolicyViolationsPreview', 'listOrgPolicyViolations'];
    for (const methodName of orgPolicyViolationsPreviewServiceStubMethods) {
      const callPromise = this.orgPolicyViolationsPreviewServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.orgPolicyViolationsPreviewServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'policysimulator.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'policysimulator.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * GetOrgPolicyViolationsPreview gets the specified
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}.
 * Each
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 * is available for at least 7 days.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the OrgPolicyViolationsPreview to get.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/org_policy_violations_preview_service.get_org_policy_violations_preview.js</caption>
 * region_tag:policysimulator_v1_generated_OrgPolicyViolationsPreviewService_GetOrgPolicyViolationsPreview_async
 */
  getOrgPolicyViolationsPreview(
      request?: protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
        protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|undefined, {}|undefined
      ]>;
  getOrgPolicyViolationsPreview(
      request: protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
          protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|null|undefined,
          {}|null|undefined>): void;
  getOrgPolicyViolationsPreview(
      request: protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest,
      callback: Callback<
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
          protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|null|undefined,
          {}|null|undefined>): void;
  getOrgPolicyViolationsPreview(
      request?: protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
          protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
          protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
        protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getOrgPolicyViolationsPreview request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
        protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getOrgPolicyViolationsPreview response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getOrgPolicyViolationsPreview(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview,
        protos.google.cloud.policysimulator.v1.IGetOrgPolicyViolationsPreviewRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getOrgPolicyViolationsPreview response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * CreateOrgPolicyViolationsPreview creates an
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 * for the proposed changes in the provided
 * {@link protos.|OrgPolicyViolationsPreview.OrgPolicyOverlay}. The changes to OrgPolicy
 * are specified by this `OrgPolicyOverlay`. The resources to scan are
 * inferred from these specified changes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The organization under which this
 *   {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 *   will be created.
 *
 *   Example: `organizations/my-example-org/locations/global`
 * @param {google.cloud.policysimulator.v1.OrgPolicyViolationsPreview} request.orgPolicyViolationsPreview
 *   Required. The
 *   {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 *   to generate.
 * @param {string} [request.orgPolicyViolationsPreviewId]
 *   Optional. An optional user-specified ID for the
 *   {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}.
 *   If not provided, a random ID will be generated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/org_policy_violations_preview_service.create_org_policy_violations_preview.js</caption>
 * region_tag:policysimulator_v1_generated_OrgPolicyViolationsPreviewService_CreateOrgPolicyViolationsPreview_async
 */
  createOrgPolicyViolationsPreview(
      request?: protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createOrgPolicyViolationsPreview(
      request: protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOrgPolicyViolationsPreview(
      request: protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewRequest,
      callback: Callback<
          LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOrgPolicyViolationsPreview(
      request?: protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createOrgPolicyViolationsPreview response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createOrgPolicyViolationsPreview request %j', request);
    return this.innerApiCalls.createOrgPolicyViolationsPreview(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.ICreateOrgPolicyViolationsPreviewOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createOrgPolicyViolationsPreview response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createOrgPolicyViolationsPreview()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/org_policy_violations_preview_service.create_org_policy_violations_preview.js</caption>
 * region_tag:policysimulator_v1_generated_OrgPolicyViolationsPreviewService_CreateOrgPolicyViolationsPreview_async
 */
  async checkCreateOrgPolicyViolationsPreviewProgress(name: string): Promise<LROperation<protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.CreateOrgPolicyViolationsPreviewOperationMetadata>>{
    this._log.info('createOrgPolicyViolationsPreview long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createOrgPolicyViolationsPreview, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview, protos.google.cloud.policysimulator.v1.CreateOrgPolicyViolationsPreviewOperationMetadata>;
  }
 /**
 * ListOrgPolicyViolationsPreviews lists each
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 * in an organization. Each
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}
 * is available for at least 7 days.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent the violations are scoped to.
 *   Format:
 *   `organizations/{organization}/locations/{location}`
 *
 *   Example: `organizations/my-example-org/locations/global`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 5 items will be returned.
 *   The maximum value is 10; values above 10 will be coerced to 10.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOrgPolicyViolationsPreviewsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOrgPolicyViolationsPreviews(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse
      ]>;
  listOrgPolicyViolationsPreviews(
      request: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>): void;
  listOrgPolicyViolationsPreviews(
      request: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      callback: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>): void;
  listOrgPolicyViolationsPreviews(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>,
      callback?: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse|null|undefined,
      protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listOrgPolicyViolationsPreviews values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listOrgPolicyViolationsPreviews request %j', request);
    return this.innerApiCalls
      .listOrgPolicyViolationsPreviews(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsResponse
      ]) => {
        this._log.info('listOrgPolicyViolationsPreviews values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listOrgPolicyViolationsPreviews`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent the violations are scoped to.
 *   Format:
 *   `organizations/{organization}/locations/{location}`
 *
 *   Example: `organizations/my-example-org/locations/global`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 5 items will be returned.
 *   The maximum value is 10; values above 10 will be coerced to 10.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOrgPolicyViolationsPreviewsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOrgPolicyViolationsPreviewsStream(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOrgPolicyViolationsPreviews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOrgPolicyViolationsPreviews stream %j', request);
    return this.descriptors.page.listOrgPolicyViolationsPreviews.createStream(
      this.innerApiCalls.listOrgPolicyViolationsPreviews as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOrgPolicyViolationsPreviews`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent the violations are scoped to.
 *   Format:
 *   `organizations/{organization}/locations/{location}`
 *
 *   Example: `organizations/my-example-org/locations/global`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 5 items will be returned.
 *   The maximum value is 10; values above 10 will be coerced to 10.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/org_policy_violations_preview_service.list_org_policy_violations_previews.js</caption>
 * region_tag:policysimulator_v1_generated_OrgPolicyViolationsPreviewService_ListOrgPolicyViolationsPreviews_async
 */
  listOrgPolicyViolationsPreviewsAsync(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsPreviewsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOrgPolicyViolationsPreviews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOrgPolicyViolationsPreviews iterate %j', request);
    return this.descriptors.page.listOrgPolicyViolationsPreviews.asyncIterate(
      this.innerApiCalls['listOrgPolicyViolationsPreviews'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.policysimulator.v1.IOrgPolicyViolationsPreview>;
  }
 /**
 * ListOrgPolicyViolations lists the {@link protos.|OrgPolicyViolations} that are present
 * in an
 * {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolationsPreview|OrgPolicyViolationsPreview}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The OrgPolicyViolationsPreview to get OrgPolicyViolations from.
 *   Format:
 *   organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 1000 items will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolation|OrgPolicyViolation}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOrgPolicyViolationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOrgPolicyViolations(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolation[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse
      ]>;
  listOrgPolicyViolations(
      request: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>): void;
  listOrgPolicyViolations(
      request: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>): void;
  listOrgPolicyViolations(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>,
      callback?: PaginationCallback<
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
          protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse|null|undefined,
          protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>):
      Promise<[
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolation[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse|null|undefined,
      protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listOrgPolicyViolations values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listOrgPolicyViolations request %j', request);
    return this.innerApiCalls
      .listOrgPolicyViolations(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.policysimulator.v1.IOrgPolicyViolation[],
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest|null,
        protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsResponse
      ]) => {
        this._log.info('listOrgPolicyViolations values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listOrgPolicyViolations`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The OrgPolicyViolationsPreview to get OrgPolicyViolations from.
 *   Format:
 *   organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 1000 items will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolation|OrgPolicyViolation} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOrgPolicyViolationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOrgPolicyViolationsStream(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOrgPolicyViolations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOrgPolicyViolations stream %j', request);
    return this.descriptors.page.listOrgPolicyViolations.createStream(
      this.innerApiCalls.listOrgPolicyViolations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOrgPolicyViolations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The OrgPolicyViolationsPreview to get OrgPolicyViolations from.
 *   Format:
 *   organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return. The service may return
 *   fewer than this value. If unspecified, at most 1000 items will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *
 *   When paginating, all other parameters must match the call that provided the
 *   page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.policysimulator.v1.OrgPolicyViolation|OrgPolicyViolation}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/org_policy_violations_preview_service.list_org_policy_violations.js</caption>
 * region_tag:policysimulator_v1_generated_OrgPolicyViolationsPreviewService_ListOrgPolicyViolations_async
 */
  listOrgPolicyViolationsAsync(
      request?: protos.google.cloud.policysimulator.v1.IListOrgPolicyViolationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOrgPolicyViolations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOrgPolicyViolations iterate %j', request);
    return this.descriptors.page.listOrgPolicyViolations.asyncIterate(
      this.innerApiCalls['listOrgPolicyViolations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.policysimulator.v1.IOrgPolicyViolation>;
  }
/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified customConstraint resource name string.
   *
   * @param {string} organization
   * @param {string} custom_constraint
   * @returns {string} Resource name string.
   */
  customConstraintPath(organization:string,customConstraint:string) {
    return this.pathTemplates.customConstraintPathTemplate.render({
      organization: organization,
      custom_constraint: customConstraint,
    });
  }

  /**
   * Parse the organization from CustomConstraint resource.
   *
   * @param {string} customConstraintName
   *   A fully-qualified path representing CustomConstraint resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromCustomConstraintName(customConstraintName: string) {
    return this.pathTemplates.customConstraintPathTemplate.match(customConstraintName).organization;
  }

  /**
   * Parse the custom_constraint from CustomConstraint resource.
   *
   * @param {string} customConstraintName
   *   A fully-qualified path representing CustomConstraint resource.
   * @returns {string} A string representing the custom_constraint.
   */
  matchCustomConstraintFromCustomConstraintName(customConstraintName: string) {
    return this.pathTemplates.customConstraintPathTemplate.match(customConstraintName).custom_constraint;
  }

  /**
   * Return a fully-qualified folderConstraint resource name string.
   *
   * @param {string} folder
   * @param {string} constraint
   * @returns {string} Resource name string.
   */
  folderConstraintPath(folder:string,constraint:string) {
    return this.pathTemplates.folderConstraintPathTemplate.render({
      folder: folder,
      constraint: constraint,
    });
  }

  /**
   * Parse the folder from FolderConstraint resource.
   *
   * @param {string} folderConstraintName
   *   A fully-qualified path representing folder_constraint resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderConstraintName(folderConstraintName: string) {
    return this.pathTemplates.folderConstraintPathTemplate.match(folderConstraintName).folder;
  }

  /**
   * Parse the constraint from FolderConstraint resource.
   *
   * @param {string} folderConstraintName
   *   A fully-qualified path representing folder_constraint resource.
   * @returns {string} A string representing the constraint.
   */
  matchConstraintFromFolderConstraintName(folderConstraintName: string) {
    return this.pathTemplates.folderConstraintPathTemplate.match(folderConstraintName).constraint;
  }

  /**
   * Return a fully-qualified folderLocationReplay resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} replay
   * @returns {string} Resource name string.
   */
  folderLocationReplayPath(folder:string,location:string,replay:string) {
    return this.pathTemplates.folderLocationReplayPathTemplate.render({
      folder: folder,
      location: location,
      replay: replay,
    });
  }

  /**
   * Parse the folder from FolderLocationReplay resource.
   *
   * @param {string} folderLocationReplayName
   *   A fully-qualified path representing folder_location_replay resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationReplayName(folderLocationReplayName: string) {
    return this.pathTemplates.folderLocationReplayPathTemplate.match(folderLocationReplayName).folder;
  }

  /**
   * Parse the location from FolderLocationReplay resource.
   *
   * @param {string} folderLocationReplayName
   *   A fully-qualified path representing folder_location_replay resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationReplayName(folderLocationReplayName: string) {
    return this.pathTemplates.folderLocationReplayPathTemplate.match(folderLocationReplayName).location;
  }

  /**
   * Parse the replay from FolderLocationReplay resource.
   *
   * @param {string} folderLocationReplayName
   *   A fully-qualified path representing folder_location_replay resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromFolderLocationReplayName(folderLocationReplayName: string) {
    return this.pathTemplates.folderLocationReplayPathTemplate.match(folderLocationReplayName).replay;
  }

  /**
   * Return a fully-qualified folderLocationReplayReplayResult resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} replay
   * @param {string} replay_result
   * @returns {string} Resource name string.
   */
  folderLocationReplayReplayResultPath(folder:string,location:string,replay:string,replayResult:string) {
    return this.pathTemplates.folderLocationReplayReplayResultPathTemplate.render({
      folder: folder,
      location: location,
      replay: replay,
      replay_result: replayResult,
    });
  }

  /**
   * Parse the folder from FolderLocationReplayReplayResult resource.
   *
   * @param {string} folderLocationReplayReplayResultName
   *   A fully-qualified path representing folder_location_replay_replay_result resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationReplayReplayResultName(folderLocationReplayReplayResultName: string) {
    return this.pathTemplates.folderLocationReplayReplayResultPathTemplate.match(folderLocationReplayReplayResultName).folder;
  }

  /**
   * Parse the location from FolderLocationReplayReplayResult resource.
   *
   * @param {string} folderLocationReplayReplayResultName
   *   A fully-qualified path representing folder_location_replay_replay_result resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationReplayReplayResultName(folderLocationReplayReplayResultName: string) {
    return this.pathTemplates.folderLocationReplayReplayResultPathTemplate.match(folderLocationReplayReplayResultName).location;
  }

  /**
   * Parse the replay from FolderLocationReplayReplayResult resource.
   *
   * @param {string} folderLocationReplayReplayResultName
   *   A fully-qualified path representing folder_location_replay_replay_result resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromFolderLocationReplayReplayResultName(folderLocationReplayReplayResultName: string) {
    return this.pathTemplates.folderLocationReplayReplayResultPathTemplate.match(folderLocationReplayReplayResultName).replay;
  }

  /**
   * Parse the replay_result from FolderLocationReplayReplayResult resource.
   *
   * @param {string} folderLocationReplayReplayResultName
   *   A fully-qualified path representing folder_location_replay_replay_result resource.
   * @returns {string} A string representing the replay_result.
   */
  matchReplayResultFromFolderLocationReplayReplayResultName(folderLocationReplayReplayResultName: string) {
    return this.pathTemplates.folderLocationReplayReplayResultPathTemplate.match(folderLocationReplayReplayResultName).replay_result;
  }

  /**
   * Return a fully-qualified folderPolicy resource name string.
   *
   * @param {string} folder
   * @param {string} policy
   * @returns {string} Resource name string.
   */
  folderPolicyPath(folder:string,policy:string) {
    return this.pathTemplates.folderPolicyPathTemplate.render({
      folder: folder,
      policy: policy,
    });
  }

  /**
   * Parse the folder from FolderPolicy resource.
   *
   * @param {string} folderPolicyName
   *   A fully-qualified path representing folder_policy resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderPolicyName(folderPolicyName: string) {
    return this.pathTemplates.folderPolicyPathTemplate.match(folderPolicyName).folder;
  }

  /**
   * Parse the policy from FolderPolicy resource.
   *
   * @param {string} folderPolicyName
   *   A fully-qualified path representing folder_policy resource.
   * @returns {string} A string representing the policy.
   */
  matchPolicyFromFolderPolicyName(folderPolicyName: string) {
    return this.pathTemplates.folderPolicyPathTemplate.match(folderPolicyName).policy;
  }

  /**
   * Return a fully-qualified orgPolicyViolation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} org_policy_violations_preview
   * @param {string} org_policy_violation
   * @returns {string} Resource name string.
   */
  orgPolicyViolationPath(organization:string,location:string,orgPolicyViolationsPreview:string,orgPolicyViolation:string) {
    return this.pathTemplates.orgPolicyViolationPathTemplate.render({
      organization: organization,
      location: location,
      org_policy_violations_preview: orgPolicyViolationsPreview,
      org_policy_violation: orgPolicyViolation,
    });
  }

  /**
   * Parse the organization from OrgPolicyViolation resource.
   *
   * @param {string} orgPolicyViolationName
   *   A fully-qualified path representing OrgPolicyViolation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrgPolicyViolationName(orgPolicyViolationName: string) {
    return this.pathTemplates.orgPolicyViolationPathTemplate.match(orgPolicyViolationName).organization;
  }

  /**
   * Parse the location from OrgPolicyViolation resource.
   *
   * @param {string} orgPolicyViolationName
   *   A fully-qualified path representing OrgPolicyViolation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrgPolicyViolationName(orgPolicyViolationName: string) {
    return this.pathTemplates.orgPolicyViolationPathTemplate.match(orgPolicyViolationName).location;
  }

  /**
   * Parse the org_policy_violations_preview from OrgPolicyViolation resource.
   *
   * @param {string} orgPolicyViolationName
   *   A fully-qualified path representing OrgPolicyViolation resource.
   * @returns {string} A string representing the org_policy_violations_preview.
   */
  matchOrgPolicyViolationsPreviewFromOrgPolicyViolationName(orgPolicyViolationName: string) {
    return this.pathTemplates.orgPolicyViolationPathTemplate.match(orgPolicyViolationName).org_policy_violations_preview;
  }

  /**
   * Parse the org_policy_violation from OrgPolicyViolation resource.
   *
   * @param {string} orgPolicyViolationName
   *   A fully-qualified path representing OrgPolicyViolation resource.
   * @returns {string} A string representing the org_policy_violation.
   */
  matchOrgPolicyViolationFromOrgPolicyViolationName(orgPolicyViolationName: string) {
    return this.pathTemplates.orgPolicyViolationPathTemplate.match(orgPolicyViolationName).org_policy_violation;
  }

  /**
   * Return a fully-qualified orgPolicyViolationsPreview resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} org_policy_violations_preview
   * @returns {string} Resource name string.
   */
  orgPolicyViolationsPreviewPath(organization:string,location:string,orgPolicyViolationsPreview:string) {
    return this.pathTemplates.orgPolicyViolationsPreviewPathTemplate.render({
      organization: organization,
      location: location,
      org_policy_violations_preview: orgPolicyViolationsPreview,
    });
  }

  /**
   * Parse the organization from OrgPolicyViolationsPreview resource.
   *
   * @param {string} orgPolicyViolationsPreviewName
   *   A fully-qualified path representing OrgPolicyViolationsPreview resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrgPolicyViolationsPreviewName(orgPolicyViolationsPreviewName: string) {
    return this.pathTemplates.orgPolicyViolationsPreviewPathTemplate.match(orgPolicyViolationsPreviewName).organization;
  }

  /**
   * Parse the location from OrgPolicyViolationsPreview resource.
   *
   * @param {string} orgPolicyViolationsPreviewName
   *   A fully-qualified path representing OrgPolicyViolationsPreview resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrgPolicyViolationsPreviewName(orgPolicyViolationsPreviewName: string) {
    return this.pathTemplates.orgPolicyViolationsPreviewPathTemplate.match(orgPolicyViolationsPreviewName).location;
  }

  /**
   * Parse the org_policy_violations_preview from OrgPolicyViolationsPreview resource.
   *
   * @param {string} orgPolicyViolationsPreviewName
   *   A fully-qualified path representing OrgPolicyViolationsPreview resource.
   * @returns {string} A string representing the org_policy_violations_preview.
   */
  matchOrgPolicyViolationsPreviewFromOrgPolicyViolationsPreviewName(orgPolicyViolationsPreviewName: string) {
    return this.pathTemplates.orgPolicyViolationsPreviewPathTemplate.match(orgPolicyViolationsPreviewName).org_policy_violations_preview;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization:string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName).organization;
  }

  /**
   * Return a fully-qualified organizationConstraint resource name string.
   *
   * @param {string} organization
   * @param {string} constraint
   * @returns {string} Resource name string.
   */
  organizationConstraintPath(organization:string,constraint:string) {
    return this.pathTemplates.organizationConstraintPathTemplate.render({
      organization: organization,
      constraint: constraint,
    });
  }

  /**
   * Parse the organization from OrganizationConstraint resource.
   *
   * @param {string} organizationConstraintName
   *   A fully-qualified path representing organization_constraint resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationConstraintName(organizationConstraintName: string) {
    return this.pathTemplates.organizationConstraintPathTemplate.match(organizationConstraintName).organization;
  }

  /**
   * Parse the constraint from OrganizationConstraint resource.
   *
   * @param {string} organizationConstraintName
   *   A fully-qualified path representing organization_constraint resource.
   * @returns {string} A string representing the constraint.
   */
  matchConstraintFromOrganizationConstraintName(organizationConstraintName: string) {
    return this.pathTemplates.organizationConstraintPathTemplate.match(organizationConstraintName).constraint;
  }

  /**
   * Return a fully-qualified organizationLocation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @returns {string} Resource name string.
   */
  organizationLocationPath(organization:string,location:string) {
    return this.pathTemplates.organizationLocationPathTemplate.render({
      organization: organization,
      location: location,
    });
  }

  /**
   * Parse the organization from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).organization;
  }

  /**
   * Parse the location from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).location;
  }

  /**
   * Return a fully-qualified organizationLocationReplay resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} replay
   * @returns {string} Resource name string.
   */
  organizationLocationReplayPath(organization:string,location:string,replay:string) {
    return this.pathTemplates.organizationLocationReplayPathTemplate.render({
      organization: organization,
      location: location,
      replay: replay,
    });
  }

  /**
   * Parse the organization from OrganizationLocationReplay resource.
   *
   * @param {string} organizationLocationReplayName
   *   A fully-qualified path representing organization_location_replay resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationReplayName(organizationLocationReplayName: string) {
    return this.pathTemplates.organizationLocationReplayPathTemplate.match(organizationLocationReplayName).organization;
  }

  /**
   * Parse the location from OrganizationLocationReplay resource.
   *
   * @param {string} organizationLocationReplayName
   *   A fully-qualified path representing organization_location_replay resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationReplayName(organizationLocationReplayName: string) {
    return this.pathTemplates.organizationLocationReplayPathTemplate.match(organizationLocationReplayName).location;
  }

  /**
   * Parse the replay from OrganizationLocationReplay resource.
   *
   * @param {string} organizationLocationReplayName
   *   A fully-qualified path representing organization_location_replay resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromOrganizationLocationReplayName(organizationLocationReplayName: string) {
    return this.pathTemplates.organizationLocationReplayPathTemplate.match(organizationLocationReplayName).replay;
  }

  /**
   * Return a fully-qualified organizationLocationReplayReplayResult resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} replay
   * @param {string} replay_result
   * @returns {string} Resource name string.
   */
  organizationLocationReplayReplayResultPath(organization:string,location:string,replay:string,replayResult:string) {
    return this.pathTemplates.organizationLocationReplayReplayResultPathTemplate.render({
      organization: organization,
      location: location,
      replay: replay,
      replay_result: replayResult,
    });
  }

  /**
   * Parse the organization from OrganizationLocationReplayReplayResult resource.
   *
   * @param {string} organizationLocationReplayReplayResultName
   *   A fully-qualified path representing organization_location_replay_replay_result resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationReplayReplayResultName(organizationLocationReplayReplayResultName: string) {
    return this.pathTemplates.organizationLocationReplayReplayResultPathTemplate.match(organizationLocationReplayReplayResultName).organization;
  }

  /**
   * Parse the location from OrganizationLocationReplayReplayResult resource.
   *
   * @param {string} organizationLocationReplayReplayResultName
   *   A fully-qualified path representing organization_location_replay_replay_result resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationReplayReplayResultName(organizationLocationReplayReplayResultName: string) {
    return this.pathTemplates.organizationLocationReplayReplayResultPathTemplate.match(organizationLocationReplayReplayResultName).location;
  }

  /**
   * Parse the replay from OrganizationLocationReplayReplayResult resource.
   *
   * @param {string} organizationLocationReplayReplayResultName
   *   A fully-qualified path representing organization_location_replay_replay_result resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromOrganizationLocationReplayReplayResultName(organizationLocationReplayReplayResultName: string) {
    return this.pathTemplates.organizationLocationReplayReplayResultPathTemplate.match(organizationLocationReplayReplayResultName).replay;
  }

  /**
   * Parse the replay_result from OrganizationLocationReplayReplayResult resource.
   *
   * @param {string} organizationLocationReplayReplayResultName
   *   A fully-qualified path representing organization_location_replay_replay_result resource.
   * @returns {string} A string representing the replay_result.
   */
  matchReplayResultFromOrganizationLocationReplayReplayResultName(organizationLocationReplayReplayResultName: string) {
    return this.pathTemplates.organizationLocationReplayReplayResultPathTemplate.match(organizationLocationReplayReplayResultName).replay_result;
  }

  /**
   * Return a fully-qualified organizationPolicy resource name string.
   *
   * @param {string} organization
   * @param {string} policy
   * @returns {string} Resource name string.
   */
  organizationPolicyPath(organization:string,policy:string) {
    return this.pathTemplates.organizationPolicyPathTemplate.render({
      organization: organization,
      policy: policy,
    });
  }

  /**
   * Parse the organization from OrganizationPolicy resource.
   *
   * @param {string} organizationPolicyName
   *   A fully-qualified path representing organization_policy resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationPolicyName(organizationPolicyName: string) {
    return this.pathTemplates.organizationPolicyPathTemplate.match(organizationPolicyName).organization;
  }

  /**
   * Parse the policy from OrganizationPolicy resource.
   *
   * @param {string} organizationPolicyName
   *   A fully-qualified path representing organization_policy resource.
   * @returns {string} A string representing the policy.
   */
  matchPolicyFromOrganizationPolicyName(organizationPolicyName: string) {
    return this.pathTemplates.organizationPolicyPathTemplate.match(organizationPolicyName).policy;
  }

  /**
   * Return a fully-qualified projectConstraint resource name string.
   *
   * @param {string} project
   * @param {string} constraint
   * @returns {string} Resource name string.
   */
  projectConstraintPath(project:string,constraint:string) {
    return this.pathTemplates.projectConstraintPathTemplate.render({
      project: project,
      constraint: constraint,
    });
  }

  /**
   * Parse the project from ProjectConstraint resource.
   *
   * @param {string} projectConstraintName
   *   A fully-qualified path representing project_constraint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectConstraintName(projectConstraintName: string) {
    return this.pathTemplates.projectConstraintPathTemplate.match(projectConstraintName).project;
  }

  /**
   * Parse the constraint from ProjectConstraint resource.
   *
   * @param {string} projectConstraintName
   *   A fully-qualified path representing project_constraint resource.
   * @returns {string} A string representing the constraint.
   */
  matchConstraintFromProjectConstraintName(projectConstraintName: string) {
    return this.pathTemplates.projectConstraintPathTemplate.match(projectConstraintName).constraint;
  }

  /**
   * Return a fully-qualified projectLocationReplay resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} replay
   * @returns {string} Resource name string.
   */
  projectLocationReplayPath(project:string,location:string,replay:string) {
    return this.pathTemplates.projectLocationReplayPathTemplate.render({
      project: project,
      location: location,
      replay: replay,
    });
  }

  /**
   * Parse the project from ProjectLocationReplay resource.
   *
   * @param {string} projectLocationReplayName
   *   A fully-qualified path representing project_location_replay resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationReplayName(projectLocationReplayName: string) {
    return this.pathTemplates.projectLocationReplayPathTemplate.match(projectLocationReplayName).project;
  }

  /**
   * Parse the location from ProjectLocationReplay resource.
   *
   * @param {string} projectLocationReplayName
   *   A fully-qualified path representing project_location_replay resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationReplayName(projectLocationReplayName: string) {
    return this.pathTemplates.projectLocationReplayPathTemplate.match(projectLocationReplayName).location;
  }

  /**
   * Parse the replay from ProjectLocationReplay resource.
   *
   * @param {string} projectLocationReplayName
   *   A fully-qualified path representing project_location_replay resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromProjectLocationReplayName(projectLocationReplayName: string) {
    return this.pathTemplates.projectLocationReplayPathTemplate.match(projectLocationReplayName).replay;
  }

  /**
   * Return a fully-qualified projectLocationReplayReplayResult resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} replay
   * @param {string} replay_result
   * @returns {string} Resource name string.
   */
  projectLocationReplayReplayResultPath(project:string,location:string,replay:string,replayResult:string) {
    return this.pathTemplates.projectLocationReplayReplayResultPathTemplate.render({
      project: project,
      location: location,
      replay: replay,
      replay_result: replayResult,
    });
  }

  /**
   * Parse the project from ProjectLocationReplayReplayResult resource.
   *
   * @param {string} projectLocationReplayReplayResultName
   *   A fully-qualified path representing project_location_replay_replay_result resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationReplayReplayResultName(projectLocationReplayReplayResultName: string) {
    return this.pathTemplates.projectLocationReplayReplayResultPathTemplate.match(projectLocationReplayReplayResultName).project;
  }

  /**
   * Parse the location from ProjectLocationReplayReplayResult resource.
   *
   * @param {string} projectLocationReplayReplayResultName
   *   A fully-qualified path representing project_location_replay_replay_result resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationReplayReplayResultName(projectLocationReplayReplayResultName: string) {
    return this.pathTemplates.projectLocationReplayReplayResultPathTemplate.match(projectLocationReplayReplayResultName).location;
  }

  /**
   * Parse the replay from ProjectLocationReplayReplayResult resource.
   *
   * @param {string} projectLocationReplayReplayResultName
   *   A fully-qualified path representing project_location_replay_replay_result resource.
   * @returns {string} A string representing the replay.
   */
  matchReplayFromProjectLocationReplayReplayResultName(projectLocationReplayReplayResultName: string) {
    return this.pathTemplates.projectLocationReplayReplayResultPathTemplate.match(projectLocationReplayReplayResultName).replay;
  }

  /**
   * Parse the replay_result from ProjectLocationReplayReplayResult resource.
   *
   * @param {string} projectLocationReplayReplayResultName
   *   A fully-qualified path representing project_location_replay_replay_result resource.
   * @returns {string} A string representing the replay_result.
   */
  matchReplayResultFromProjectLocationReplayReplayResultName(projectLocationReplayReplayResultName: string) {
    return this.pathTemplates.projectLocationReplayReplayResultPathTemplate.match(projectLocationReplayReplayResultName).replay_result;
  }

  /**
   * Return a fully-qualified projectPolicy resource name string.
   *
   * @param {string} project
   * @param {string} policy
   * @returns {string} Resource name string.
   */
  projectPolicyPath(project:string,policy:string) {
    return this.pathTemplates.projectPolicyPathTemplate.render({
      project: project,
      policy: policy,
    });
  }

  /**
   * Parse the project from ProjectPolicy resource.
   *
   * @param {string} projectPolicyName
   *   A fully-qualified path representing project_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectPolicyName(projectPolicyName: string) {
    return this.pathTemplates.projectPolicyPathTemplate.match(projectPolicyName).project;
  }

  /**
   * Parse the policy from ProjectPolicy resource.
   *
   * @param {string} projectPolicyName
   *   A fully-qualified path representing project_policy resource.
   * @returns {string} A string representing the policy.
   */
  matchPolicyFromProjectPolicyName(projectPolicyName: string) {
    return this.pathTemplates.projectPolicyPathTemplate.match(projectPolicyName).policy;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.orgPolicyViolationsPreviewServiceStub && !this._terminated) {
      return this.orgPolicyViolationsPreviewServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}