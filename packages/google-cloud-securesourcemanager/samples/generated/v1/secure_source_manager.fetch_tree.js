// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(repository) {
  // [START securesourcemanager_v1_generated_SecureSourceManager_FetchTree_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The format is
   *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
   *  Specifies the repository to fetch the tree from.
   */
  // const repository = 'abc123'
  /**
   *  Optional. `ref` can be a SHA-1 hash, a branch name, or a tag. Specifies
   *  which tree to fetch. If not specified, the default branch will be used.
   */
  // const ref = 'abc123'
  /**
   *  Optional. If true, include all subfolders and their files in the response.
   *  If false, only the immediate children are returned.
   */
  // const recursive = true
  /**
   *  Optional. Requested page size.  Server may return fewer items than
   *  requested. If unspecified, at most 10,000 items will be returned.
   */
  // const pageSize = 1234
  /**
   *  Optional. A token identifying a page of results the server should return.
   */
  // const pageToken = 'abc123'

  // Imports the Securesourcemanager library
  const {SecureSourceManagerClient} = require('@google-cloud/securesourcemanager').v1;

  // Instantiates a client
  const securesourcemanagerClient = new SecureSourceManagerClient();

  async function callFetchTree() {
    // Construct request
    const request = {
      repository,
    };

    // Run request
    const iterable = securesourcemanagerClient.fetchTreeAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callFetchTree();
  // [END securesourcemanager_v1_generated_SecureSourceManager_FetchTree_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
