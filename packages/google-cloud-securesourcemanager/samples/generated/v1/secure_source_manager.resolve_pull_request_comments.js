// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, names) {
  // [START securesourcemanager_v1_generated_SecureSourceManager_ResolvePullRequestComments_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The pull request in which to resolve the pull request comments.
   *  Format:
   *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
   */
  // const parent = 'abc123'
  /**
   *  Required. The names of the pull request comments to resolve. Format:
   *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments/{comment_id}`
   *  Only comments from the same threads are allowed in the same request.
   */
  // const names = ['abc','def']
  /**
   *  Optional. If set, at least one comment in a thread is required, rest of the
   *  comments in the same thread will be automatically updated to resolved. If
   *  unset, all comments in the same thread need be present.
   */
  // const autoFill = true

  // Imports the Securesourcemanager library
  const {SecureSourceManagerClient} = require('@google-cloud/securesourcemanager').v1;

  // Instantiates a client
  const securesourcemanagerClient = new SecureSourceManagerClient();

  async function callResolvePullRequestComments() {
    // Construct request
    const request = {
      parent,
      names,
    };

    // Run request
    const [operation] = await securesourcemanagerClient.resolvePullRequestComments(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callResolvePullRequestComments();
  // [END securesourcemanager_v1_generated_SecureSourceManager_ResolvePullRequestComments_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
