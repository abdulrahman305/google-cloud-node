// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/aggregate_product_statuses_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './aggregate_product_statuses_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service to manage aggregate product statuses.
 * @class
 * @memberof v1beta
 */
export class AggregateProductStatusesServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('issueresolution');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  aggregateProductStatusesServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AggregateProductStatusesServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AggregateProductStatusesServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AggregateProductStatusesServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'merchantapi.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      accountPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}'
      ),
      aggregateProductStatusPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/aggregateProductStatuses/{aggregate_product_status}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAggregateProductStatuses:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'aggregateProductStatuses')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.shopping.merchant.issueresolution.v1beta.AggregateProductStatusesService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.aggregateProductStatusesServiceStub) {
      return this.aggregateProductStatusesServiceStub;
    }

    // Put together the "service stub" for
    // google.shopping.merchant.issueresolution.v1beta.AggregateProductStatusesService.
    this.aggregateProductStatusesServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.shopping.merchant.issueresolution.v1beta.AggregateProductStatusesService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.shopping.merchant.issueresolution.v1beta.AggregateProductStatusesService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const aggregateProductStatusesServiceStubMethods =
        ['listAggregateProductStatuses'];
    for (const methodName of aggregateProductStatusesServiceStubMethods) {
      const callPromise = this.aggregateProductStatusesServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.aggregateProductStatusesServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'merchantapi.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'merchantapi.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/content'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------

 /**
 * Lists the `AggregateProductStatuses` resources for your merchant account.
 * The response might contain fewer items than specified by `pageSize`.
 * If `pageToken` was returned in previous request, it can be used to obtain
 * additional results.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account to list aggregate product statuses for.
 *   Format: `accounts/{account}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of aggregate product statuses to return. The
 *   service may return fewer than this value. If unspecified, at most 25
 *   aggregate product statuses are returned. The maximum value is 250; values
 *   above 250 are coerced to 250.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListAggregateProductStatuses` call. Provide this to retrieve the
 *   subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListAggregateProductStatuses` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. A filter expression that filters the aggregate product statuses.
 *   Filtering is only supported by the `reporting_context` and `country` field.
 *   For example: `reporting_context = "SHOPPING_ADS" AND country = "US"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.shopping.merchant.issueresolution.v1beta.AggregateProductStatus|AggregateProductStatus}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAggregateProductStatusesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAggregateProductStatuses(
      request?: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus[],
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest|null,
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse
      ]>;
  listAggregateProductStatuses(
      request: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse|null|undefined,
          protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>): void;
  listAggregateProductStatuses(
      request: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      callback: PaginationCallback<
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse|null|undefined,
          protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>): void;
  listAggregateProductStatuses(
      request?: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse|null|undefined,
          protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>,
      callback?: PaginationCallback<
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
          protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse|null|undefined,
          protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>):
      Promise<[
        protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus[],
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest|null,
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse|null|undefined,
      protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAggregateProductStatuses values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAggregateProductStatuses request %j', request);
    return this.innerApiCalls
      .listAggregateProductStatuses(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus[],
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest|null,
        protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesResponse
      ]) => {
        this._log.info('listAggregateProductStatuses values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAggregateProductStatuses`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account to list aggregate product statuses for.
 *   Format: `accounts/{account}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of aggregate product statuses to return. The
 *   service may return fewer than this value. If unspecified, at most 25
 *   aggregate product statuses are returned. The maximum value is 250; values
 *   above 250 are coerced to 250.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListAggregateProductStatuses` call. Provide this to retrieve the
 *   subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListAggregateProductStatuses` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. A filter expression that filters the aggregate product statuses.
 *   Filtering is only supported by the `reporting_context` and `country` field.
 *   For example: `reporting_context = "SHOPPING_ADS" AND country = "US"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.shopping.merchant.issueresolution.v1beta.AggregateProductStatus|AggregateProductStatus} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAggregateProductStatusesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAggregateProductStatusesStream(
      request?: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAggregateProductStatuses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAggregateProductStatuses stream %j', request);
    return this.descriptors.page.listAggregateProductStatuses.createStream(
      this.innerApiCalls.listAggregateProductStatuses as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAggregateProductStatuses`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account to list aggregate product statuses for.
 *   Format: `accounts/{account}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of aggregate product statuses to return. The
 *   service may return fewer than this value. If unspecified, at most 25
 *   aggregate product statuses are returned. The maximum value is 250; values
 *   above 250 are coerced to 250.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListAggregateProductStatuses` call. Provide this to retrieve the
 *   subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListAggregateProductStatuses` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. A filter expression that filters the aggregate product statuses.
 *   Filtering is only supported by the `reporting_context` and `country` field.
 *   For example: `reporting_context = "SHOPPING_ADS" AND country = "US"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.shopping.merchant.issueresolution.v1beta.AggregateProductStatus|AggregateProductStatus}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/aggregate_product_statuses_service.list_aggregate_product_statuses.js</caption>
 * region_tag:merchantapi_v1beta_generated_AggregateProductStatusesService_ListAggregateProductStatuses_async
 */
  listAggregateProductStatusesAsync(
      request?: protos.google.shopping.merchant.issueresolution.v1beta.IListAggregateProductStatusesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAggregateProductStatuses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAggregateProductStatuses iterate %j', request);
    return this.descriptors.page.listAggregateProductStatuses.asyncIterate(
      this.innerApiCalls['listAggregateProductStatuses'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.shopping.merchant.issueresolution.v1beta.IAggregateProductStatus>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified account resource name string.
   *
   * @param {string} account
   * @returns {string} Resource name string.
   */
  accountPath(account:string) {
    return this.pathTemplates.accountPathTemplate.render({
      account: account,
    });
  }

  /**
   * Parse the account from Account resource.
   *
   * @param {string} accountName
   *   A fully-qualified path representing Account resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromAccountName(accountName: string) {
    return this.pathTemplates.accountPathTemplate.match(accountName).account;
  }

  /**
   * Return a fully-qualified aggregateProductStatus resource name string.
   *
   * @param {string} account
   * @param {string} aggregate_product_status
   * @returns {string} Resource name string.
   */
  aggregateProductStatusPath(account:string,aggregateProductStatus:string) {
    return this.pathTemplates.aggregateProductStatusPathTemplate.render({
      account: account,
      aggregate_product_status: aggregateProductStatus,
    });
  }

  /**
   * Parse the account from AggregateProductStatus resource.
   *
   * @param {string} aggregateProductStatusName
   *   A fully-qualified path representing AggregateProductStatus resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromAggregateProductStatusName(aggregateProductStatusName: string) {
    return this.pathTemplates.aggregateProductStatusPathTemplate.match(aggregateProductStatusName).account;
  }

  /**
   * Parse the aggregate_product_status from AggregateProductStatus resource.
   *
   * @param {string} aggregateProductStatusName
   *   A fully-qualified path representing AggregateProductStatus resource.
   * @returns {string} A string representing the aggregate_product_status.
   */
  matchAggregateProductStatusFromAggregateProductStatusName(aggregateProductStatusName: string) {
    return this.pathTemplates.aggregateProductStatusPathTemplate.match(aggregateProductStatusName).aggregate_product_status;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.aggregateProductStatusesServiceStub && !this._terminated) {
      return this.aggregateProductStatusesServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}