// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START aiplatform_v1beta1_generated_MemoryBankService_GenerateMemories_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Defines a Vertex Session as the source content from which to generate
   *  memories.
   */
  // const vertexSessionSource = {}
  /**
   *  Defines a direct source of content as the source content from which to
   *  generate memories.
   */
  // const directContentsSource = {}
  /**
   *  Defines a direct source of memories that should be uploaded to Memory
   *  Bank. This is similar to `CreateMemory`, but it allows for consolidation
   *  between these new memories and existing memories for the same scope.
   */
  // const directMemoriesSource = {}
  /**
   *  Required. The resource name of the ReasoningEngine to generate memories
   *  for. Format:
   *  `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}`
   */
  // const parent = 'abc123'
  /**
   *  Optional. If true, generated memories will not be consolidated with
   *  existing memories; all generated memories will be added as new memories
   *  regardless of whether they are duplicates of or contradictory to existing
   *  memories. By default, memory consolidation is enabled.
   */
  // const disableConsolidation = true
  /**
   *  Optional. The scope of the memories that should be generated. Memories will
   *  be consolidated across memories with the same scope. Must be provided
   *  unless the scope is defined in the source content. If `scope` is provided,
   *  it will override the scope defined in the source content. Scope values
   *  cannot contain the wildcard character '*'.
   */
  // const scope = [1,2,3,4]

  // Imports the Aiplatform library
  const {MemoryBankServiceClient} = require('@google-cloud/aiplatform').v1beta1;

  // Instantiates a client
  const aiplatformClient = new MemoryBankServiceClient();

  async function callGenerateMemories() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const [operation] = await aiplatformClient.generateMemories(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callGenerateMemories();
  // [END aiplatform_v1beta1_generated_MemoryBankService_GenerateMemories_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
