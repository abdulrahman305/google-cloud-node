// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/job_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './job_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  A service for creating and managing Vertex AI's jobs.
 * @class
 * @memberof v1
 */
export class JobServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('aiplatform');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  jobServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of JobServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new JobServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof JobServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      cachedContentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cachedContents/{cached_content}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
      ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookExecutionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookExecutionJobs/{notebook_execution_job}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
      ),
      projectLocationFeaturestoreEntityTypeFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
      ),
      projectLocationPublisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
      ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      ragCorpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}'
      ),
      ragEngineConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragEngineConfig'
      ),
      ragFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}'
      ),
      reasoningEnginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
      tuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tuningJobs/{tuning_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCustomJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customJobs'),
      listDataLabelingJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dataLabelingJobs'),
      listHyperparameterTuningJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'hyperparameterTuningJobs'),
      listNasJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'nasJobs'),
      listNasTrialDetails:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'nasTrialDetails'),
      listBatchPredictionJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'batchPredictionJobs'),
      searchModelDeploymentMonitoringStatsAnomalies:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'monitoringStats'),
      listModelDeploymentMonitoringJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'modelDeploymentMonitoringJobs')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/ui/{name=projects/*/locations/*}',additional_bindings: [{get: '/v1/{name=projects/*/locations/*}',}],
      },{selector: 'google.cloud.location.Locations.ListLocations',get: '/ui/{name=projects/*}/locations',additional_bindings: [{get: '/v1/{name=projects/*}/locations',}],
      },{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',post: '/v1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/v1/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/v1/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/v1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:testIamPermissions',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',}],
      },{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{delete: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/tuningJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/v1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/ui/{name=projects/*/locations/*}/operations',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*}/operations',},{get: '/ui/{name=projects/*/locations/*/apps/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations',},{get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*}/operations',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/ui/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{get: '/v1/{name=projects/*/locations/*}/operations',},{get: '/v1/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/v1/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/v1/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/v1/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/tuningJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/v1/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/v1/{name=projects/*/locations/*/models/*}/operations',},{get: '/v1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/v1/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/v1/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/v1/{name=projects/*/locations/*/reasoningEngines/*}/operations',},{get: '/v1/{name=projects/*/locations/*/studies/*}/operations',},{get: '/v1/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/v1/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/v1/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/v1/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/v1/{name=projects/*/locations/*/ragCorpora/*}/operations',},{get: '/v1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*}/operations',},{get: '/v1/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/v1/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{get: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{get: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',}],
      },{selector: 'google.longrunning.Operations.WaitOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:wait',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const deleteCustomJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteCustomJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;
    const deleteDataLabelingJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteDataLabelingJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;
    const deleteHyperparameterTuningJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteHyperparameterTuningJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;
    const deleteNasJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteNasJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;
    const deleteBatchPredictionJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteBatchPredictionJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;
    const updateModelDeploymentMonitoringJobResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob') as gax.protobuf.Type;
    const updateModelDeploymentMonitoringJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.UpdateModelDeploymentMonitoringJobOperationMetadata') as gax.protobuf.Type;
    const deleteModelDeploymentMonitoringJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteModelDeploymentMonitoringJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      deleteCustomJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCustomJobResponse.decode.bind(deleteCustomJobResponse),
        deleteCustomJobMetadata.decode.bind(deleteCustomJobMetadata)),
      deleteDataLabelingJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDataLabelingJobResponse.decode.bind(deleteDataLabelingJobResponse),
        deleteDataLabelingJobMetadata.decode.bind(deleteDataLabelingJobMetadata)),
      deleteHyperparameterTuningJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteHyperparameterTuningJobResponse.decode.bind(deleteHyperparameterTuningJobResponse),
        deleteHyperparameterTuningJobMetadata.decode.bind(deleteHyperparameterTuningJobMetadata)),
      deleteNasJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteNasJobResponse.decode.bind(deleteNasJobResponse),
        deleteNasJobMetadata.decode.bind(deleteNasJobMetadata)),
      deleteBatchPredictionJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBatchPredictionJobResponse.decode.bind(deleteBatchPredictionJobResponse),
        deleteBatchPredictionJobMetadata.decode.bind(deleteBatchPredictionJobMetadata)),
      updateModelDeploymentMonitoringJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateModelDeploymentMonitoringJobResponse.decode.bind(updateModelDeploymentMonitoringJobResponse),
        updateModelDeploymentMonitoringJobMetadata.decode.bind(updateModelDeploymentMonitoringJobMetadata)),
      deleteModelDeploymentMonitoringJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteModelDeploymentMonitoringJobResponse.decode.bind(deleteModelDeploymentMonitoringJobResponse),
        deleteModelDeploymentMonitoringJobMetadata.decode.bind(deleteModelDeploymentMonitoringJobMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.aiplatform.v1.JobService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.jobServiceStub) {
      return this.jobServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1.JobService.
    this.jobServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.aiplatform.v1.JobService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1.JobService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const jobServiceStubMethods =
        ['createCustomJob', 'getCustomJob', 'listCustomJobs', 'deleteCustomJob', 'cancelCustomJob', 'createDataLabelingJob', 'getDataLabelingJob', 'listDataLabelingJobs', 'deleteDataLabelingJob', 'cancelDataLabelingJob', 'createHyperparameterTuningJob', 'getHyperparameterTuningJob', 'listHyperparameterTuningJobs', 'deleteHyperparameterTuningJob', 'cancelHyperparameterTuningJob', 'createNasJob', 'getNasJob', 'listNasJobs', 'deleteNasJob', 'cancelNasJob', 'getNasTrialDetail', 'listNasTrialDetails', 'createBatchPredictionJob', 'getBatchPredictionJob', 'listBatchPredictionJobs', 'deleteBatchPredictionJob', 'cancelBatchPredictionJob', 'createModelDeploymentMonitoringJob', 'searchModelDeploymentMonitoringStatsAnomalies', 'getModelDeploymentMonitoringJob', 'listModelDeploymentMonitoringJobs', 'updateModelDeploymentMonitoringJob', 'deleteModelDeploymentMonitoringJob', 'pauseModelDeploymentMonitoringJob', 'resumeModelDeploymentMonitoringJob'];
    for (const methodName of jobServiceStubMethods) {
      const callPromise = this.jobServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.jobServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a CustomJob. A created CustomJob right away
 * will be attempted to be run.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to create the CustomJob in.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.CustomJob} request.customJob
 *   Required. The CustomJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.CustomJob|CustomJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_custom_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateCustomJob_async
 */
  createCustomJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|undefined, {}|undefined
      ]>;
  createCustomJob(
      request: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  createCustomJob(
      request: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  createCustomJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createCustomJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createCustomJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createCustomJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createCustomJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a CustomJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/customJobs/{custom_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.CustomJob|CustomJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_custom_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetCustomJob_async
 */
  getCustomJob(
      request?: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|undefined, {}|undefined
      ]>;
  getCustomJob(
      request: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  getCustomJob(
      request: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  getCustomJob(
      request?: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.ICustomJob,
          protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCustomJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCustomJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCustomJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.IGetCustomJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCustomJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a CustomJob.
 * Starts asynchronous cancellation on the CustomJob. The server
 * makes a best effort to cancel the job, but success is not
 * guaranteed. Clients can use
 * {@link protos.google.cloud.aiplatform.v1.JobService.GetCustomJob|JobService.GetCustomJob}
 * or other methods to check whether the cancellation succeeded or whether the
 * job completed despite cancellation. On successful cancellation,
 * the CustomJob is not deleted; instead it becomes a job with
 * a {@link protos.google.cloud.aiplatform.v1.CustomJob.error|CustomJob.error} value with
 * a {@link protos.google.rpc.Status.code|google.rpc.Status.code} of 1, corresponding to
 * `Code.CANCELLED`, and
 * {@link protos.google.cloud.aiplatform.v1.CustomJob.state|CustomJob.state} is set to
 * `CANCELLED`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomJob to cancel.
 *   Format:
 *   `projects/{project}/locations/{location}/customJobs/{custom_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.cancel_custom_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CancelCustomJob_async
 */
  cancelCustomJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|undefined, {}|undefined
      ]>;
  cancelCustomJob(
      request: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelCustomJob(
      request: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelCustomJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelCustomJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelCustomJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelCustomJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelCustomJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a DataLabelingJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the DataLabelingJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.DataLabelingJob} request.dataLabelingJob
 *   Required. The DataLabelingJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.DataLabelingJob|DataLabelingJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_data_labeling_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateDataLabelingJob_async
 */
  createDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|undefined, {}|undefined
      ]>;
  createDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  createDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  createDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createDataLabelingJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createDataLabelingJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createDataLabelingJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createDataLabelingJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a DataLabelingJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the DataLabelingJob.
 *   Format:
 *   `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.DataLabelingJob|DataLabelingJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_data_labeling_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetDataLabelingJob_async
 */
  getDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|undefined, {}|undefined
      ]>;
  getDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  getDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  getDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IDataLabelingJob,
          protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getDataLabelingJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getDataLabelingJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getDataLabelingJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getDataLabelingJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a DataLabelingJob. Success of cancellation is not guaranteed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the DataLabelingJob.
 *   Format:
 *   `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.cancel_data_labeling_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CancelDataLabelingJob_async
 */
  cancelDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|undefined, {}|undefined
      ]>;
  cancelDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelDataLabelingJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelDataLabelingJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelDataLabelingJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelDataLabelingJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a HyperparameterTuningJob
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to create the
 *   HyperparameterTuningJob in. Format:
 *   `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.HyperparameterTuningJob} request.hyperparameterTuningJob
 *   Required. The HyperparameterTuningJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob|HyperparameterTuningJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_hyperparameter_tuning_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateHyperparameterTuningJob_async
 */
  createHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>;
  createHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  createHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  createHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createHyperparameterTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createHyperparameterTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createHyperparameterTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createHyperparameterTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a HyperparameterTuningJob
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the HyperparameterTuningJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob|HyperparameterTuningJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_hyperparameter_tuning_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetHyperparameterTuningJob_async
 */
  getHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>;
  getHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  getHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  getHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
          protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getHyperparameterTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getHyperparameterTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getHyperparameterTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getHyperparameterTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a HyperparameterTuningJob.
 * Starts asynchronous cancellation on the HyperparameterTuningJob. The server
 * makes a best effort to cancel the job, but success is not
 * guaranteed. Clients can use
 * {@link protos.google.cloud.aiplatform.v1.JobService.GetHyperparameterTuningJob|JobService.GetHyperparameterTuningJob}
 * or other methods to check whether the cancellation succeeded or whether the
 * job completed despite cancellation. On successful cancellation,
 * the HyperparameterTuningJob is not deleted; instead it becomes a job with
 * a
 * {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob.error|HyperparameterTuningJob.error}
 * value with a {@link protos.google.rpc.Status.code|google.rpc.Status.code} of 1,
 * corresponding to `Code.CANCELLED`, and
 * {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob.state|HyperparameterTuningJob.state}
 * is set to `CANCELLED`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the HyperparameterTuningJob to cancel.
 *   Format:
 *   `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.cancel_hyperparameter_tuning_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CancelHyperparameterTuningJob_async
 */
  cancelHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>;
  cancelHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelHyperparameterTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelHyperparameterTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelHyperparameterTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelHyperparameterTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a NasJob
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to create the NasJob in.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.NasJob} request.nasJob
 *   Required. The NasJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.NasJob|NasJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_nas_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateNasJob_async
 */
  createNasJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateNasJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|undefined, {}|undefined
      ]>;
  createNasJob(
      request: protos.google.cloud.aiplatform.v1.ICreateNasJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  createNasJob(
      request: protos.google.cloud.aiplatform.v1.ICreateNasJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  createNasJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateNasJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createNasJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createNasJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createNasJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.ICreateNasJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createNasJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a NasJob
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the NasJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.NasJob|NasJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_nas_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetNasJob_async
 */
  getNasJob(
      request?: protos.google.cloud.aiplatform.v1.IGetNasJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.IGetNasJobRequest|undefined, {}|undefined
      ]>;
  getNasJob(
      request: protos.google.cloud.aiplatform.v1.IGetNasJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.IGetNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  getNasJob(
      request: protos.google.cloud.aiplatform.v1.IGetNasJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.IGetNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  getNasJob(
      request?: protos.google.cloud.aiplatform.v1.IGetNasJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.IGetNasJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.INasJob,
          protos.google.cloud.aiplatform.v1.IGetNasJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.IGetNasJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getNasJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.IGetNasJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getNasJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getNasJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.INasJob,
        protos.google.cloud.aiplatform.v1.IGetNasJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getNasJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a NasJob.
 * Starts asynchronous cancellation on the NasJob. The server
 * makes a best effort to cancel the job, but success is not
 * guaranteed. Clients can use
 * {@link protos.google.cloud.aiplatform.v1.JobService.GetNasJob|JobService.GetNasJob} or
 * other methods to check whether the cancellation succeeded or whether the
 * job completed despite cancellation. On successful cancellation,
 * the NasJob is not deleted; instead it becomes a job with
 * a {@link protos.google.cloud.aiplatform.v1.NasJob.error|NasJob.error} value with a
 * {@link protos.google.rpc.Status.code|google.rpc.Status.code} of 1, corresponding to
 * `Code.CANCELLED`, and
 * {@link protos.google.cloud.aiplatform.v1.NasJob.state|NasJob.state} is set to
 * `CANCELLED`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the NasJob to cancel.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.cancel_nas_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CancelNasJob_async
 */
  cancelNasJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelNasJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|undefined, {}|undefined
      ]>;
  cancelNasJob(
      request: protos.google.cloud.aiplatform.v1.ICancelNasJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelNasJob(
      request: protos.google.cloud.aiplatform.v1.ICancelNasJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelNasJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelNasJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelNasJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelNasJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelNasJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelNasJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelNasJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a NasTrialDetail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the NasTrialDetail resource.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.NasTrialDetail|NasTrialDetail}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_nas_trial_detail.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetNasTrialDetail_async
 */
  getNasTrialDetail(
      request?: protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasTrialDetail,
        protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|undefined, {}|undefined
      ]>;
  getNasTrialDetail(
      request: protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasTrialDetail,
          protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|null|undefined,
          {}|null|undefined>): void;
  getNasTrialDetail(
      request: protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.INasTrialDetail,
          protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|null|undefined,
          {}|null|undefined>): void;
  getNasTrialDetail(
      request?: protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.INasTrialDetail,
          protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.INasTrialDetail,
          protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasTrialDetail,
        protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getNasTrialDetail request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.INasTrialDetail,
        protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getNasTrialDetail response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getNasTrialDetail(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.INasTrialDetail,
        protos.google.cloud.aiplatform.v1.IGetNasTrialDetailRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getNasTrialDetail response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a BatchPredictionJob. A BatchPredictionJob once created will
 * right away be attempted to start.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to create the
 *   BatchPredictionJob in. Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.BatchPredictionJob} request.batchPredictionJob
 *   Required. The BatchPredictionJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob|BatchPredictionJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_batch_prediction_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateBatchPredictionJob_async
 */
  createBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|undefined, {}|undefined
      ]>;
  createBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  createBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  createBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createBatchPredictionJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createBatchPredictionJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createBatchPredictionJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createBatchPredictionJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a BatchPredictionJob
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the BatchPredictionJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob|BatchPredictionJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_batch_prediction_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetBatchPredictionJob_async
 */
  getBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|undefined, {}|undefined
      ]>;
  getBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  getBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  getBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
          protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getBatchPredictionJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getBatchPredictionJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getBatchPredictionJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getBatchPredictionJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a BatchPredictionJob.
 *
 * Starts asynchronous cancellation on the BatchPredictionJob. The server
 * makes the best effort to cancel the job, but success is not
 * guaranteed. Clients can use
 * {@link protos.google.cloud.aiplatform.v1.JobService.GetBatchPredictionJob|JobService.GetBatchPredictionJob}
 * or other methods to check whether the cancellation succeeded or whether the
 * job completed despite cancellation. On a successful cancellation,
 * the BatchPredictionJob is not deleted;instead its
 * {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob.state|BatchPredictionJob.state}
 * is set to `CANCELLED`. Any files already outputted by the job are not
 * deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the BatchPredictionJob to cancel.
 *   Format:
 *   `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.cancel_batch_prediction_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CancelBatchPredictionJob_async
 */
  cancelBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|undefined, {}|undefined
      ]>;
  cancelBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelBatchPredictionJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelBatchPredictionJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelBatchPredictionJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelBatchPredictionJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a ModelDeploymentMonitoringJob. It will run periodically on a
 * configured interval.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the ModelDeploymentMonitoringJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob} request.modelDeploymentMonitoringJob
 *   Required. The ModelDeploymentMonitoringJob to create
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob|ModelDeploymentMonitoringJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.create_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_CreateModelDeploymentMonitoringJob_async
 */
  createModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>;
  createModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  createModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  createModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createModelDeploymentMonitoringJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createModelDeploymentMonitoringJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createModelDeploymentMonitoringJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.ICreateModelDeploymentMonitoringJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createModelDeploymentMonitoringJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a ModelDeploymentMonitoringJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the ModelDeploymentMonitoringJob.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob|ModelDeploymentMonitoringJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.get_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_GetModelDeploymentMonitoringJob_async
 */
  getModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>;
  getModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  getModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  getModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
          protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getModelDeploymentMonitoringJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getModelDeploymentMonitoringJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getModelDeploymentMonitoringJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob,
        protos.google.cloud.aiplatform.v1.IGetModelDeploymentMonitoringJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getModelDeploymentMonitoringJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Pauses a ModelDeploymentMonitoringJob. If the job is running, the server
 * makes a best effort to cancel the job. Will mark
 * {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob.state|ModelDeploymentMonitoringJob.state}
 * to 'PAUSED'.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the ModelDeploymentMonitoringJob to pause.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.pause_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_PauseModelDeploymentMonitoringJob_async
 */
  pauseModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>;
  pauseModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  pauseModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  pauseModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('pauseModelDeploymentMonitoringJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('pauseModelDeploymentMonitoringJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.pauseModelDeploymentMonitoringJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IPauseModelDeploymentMonitoringJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('pauseModelDeploymentMonitoringJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Resumes a paused ModelDeploymentMonitoringJob. It will start to run from
 * next scheduled time. A deleted ModelDeploymentMonitoringJob can't be
 * resumed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the ModelDeploymentMonitoringJob to resume.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.resume_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ResumeModelDeploymentMonitoringJob_async
 */
  resumeModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>;
  resumeModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  resumeModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>): void;
  resumeModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('resumeModelDeploymentMonitoringJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('resumeModelDeploymentMonitoringJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.resumeModelDeploymentMonitoringJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IResumeModelDeploymentMonitoringJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('resumeModelDeploymentMonitoringJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Deletes a CustomJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomJob resource to be deleted.
 *   Format:
 *   `projects/{project}/locations/{location}/customJobs/{custom_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_custom_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteCustomJob_async
 */
  deleteCustomJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCustomJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCustomJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCustomJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteCustomJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteCustomJob request %j', request);
    return this.innerApiCalls.deleteCustomJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteCustomJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteCustomJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_custom_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteCustomJob_async
 */
  async checkDeleteCustomJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteCustomJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCustomJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
/**
 * Deletes a DataLabelingJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the DataLabelingJob to be deleted.
 *   Format:
 *   `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_data_labeling_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteDataLabelingJob_async
 */
  deleteDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDataLabelingJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDataLabelingJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteDataLabelingJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteDataLabelingJob request %j', request);
    return this.innerApiCalls.deleteDataLabelingJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteDataLabelingJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteDataLabelingJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_data_labeling_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteDataLabelingJob_async
 */
  async checkDeleteDataLabelingJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteDataLabelingJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDataLabelingJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
/**
 * Deletes a HyperparameterTuningJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the HyperparameterTuningJob resource to be deleted.
 *   Format:
 *   `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_hyperparameter_tuning_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteHyperparameterTuningJob_async
 */
  deleteHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteHyperparameterTuningJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteHyperparameterTuningJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteHyperparameterTuningJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteHyperparameterTuningJob request %j', request);
    return this.innerApiCalls.deleteHyperparameterTuningJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteHyperparameterTuningJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteHyperparameterTuningJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_hyperparameter_tuning_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteHyperparameterTuningJob_async
 */
  async checkDeleteHyperparameterTuningJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteHyperparameterTuningJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteHyperparameterTuningJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
/**
 * Deletes a NasJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the NasJob resource to be deleted.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_nas_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteNasJob_async
 */
  deleteNasJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteNasJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteNasJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteNasJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteNasJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteNasJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteNasJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteNasJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteNasJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteNasJob request %j', request);
    return this.innerApiCalls.deleteNasJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteNasJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteNasJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_nas_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteNasJob_async
 */
  async checkDeleteNasJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteNasJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteNasJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
/**
 * Deletes a BatchPredictionJob. Can only be called on jobs that already
 * finished.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the BatchPredictionJob resource to be deleted.
 *   Format:
 *   `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_batch_prediction_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteBatchPredictionJob_async
 */
  deleteBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBatchPredictionJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteBatchPredictionJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteBatchPredictionJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteBatchPredictionJob request %j', request);
    return this.innerApiCalls.deleteBatchPredictionJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteBatchPredictionJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteBatchPredictionJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_batch_prediction_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteBatchPredictionJob_async
 */
  async checkDeleteBatchPredictionJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteBatchPredictionJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteBatchPredictionJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
/**
 * Updates a ModelDeploymentMonitoringJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob} request.modelDeploymentMonitoringJob
 *   Required. The model monitoring configuration which replaces the resource on
 *   the server.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The update mask is used to specify the fields to be overwritten
 *   in the ModelDeploymentMonitoringJob resource by the update. The fields
 *   specified in the update_mask are relative to the resource, not the full
 *   request. A field will be overwritten if it is in the mask. If the user does
 *   not provide a mask then only the non-empty fields present in the request
 *   will be overwritten. Set the update_mask to `*` to override all fields. For
 *   the objective config, the user can either provide the update mask for
 *   model_deployment_monitoring_objective_configs or any combination of its
 *   nested fields, such as:
 *   model_deployment_monitoring_objective_configs.objective_config.training_dataset.
 *
 *   Updatable fields:
 *
 *     * `display_name`
 *     * `model_deployment_monitoring_schedule_config`
 *     * `model_monitoring_alert_config`
 *     * `logging_sampling_strategy`
 *     * `labels`
 *     * `log_ttl`
 *     * `enable_monitoring_pipeline_logs`
 *   .  and
 *     * `model_deployment_monitoring_objective_configs`
 *   .  or
 *     * `model_deployment_monitoring_objective_configs.objective_config.training_dataset`
 *     * `model_deployment_monitoring_objective_configs.objective_config.training_prediction_skew_detection_config`
 *     * `model_deployment_monitoring_objective_configs.objective_config.prediction_drift_detection_config`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.update_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_UpdateModelDeploymentMonitoringJob_async
 */
  updateModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobRequest,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'model_deployment_monitoring_job.name': request.modelDeploymentMonitoringJob!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateModelDeploymentMonitoringJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateModelDeploymentMonitoringJob request %j', request);
    return this.innerApiCalls.updateModelDeploymentMonitoringJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.IUpdateModelDeploymentMonitoringJobOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateModelDeploymentMonitoringJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateModelDeploymentMonitoringJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.update_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_UpdateModelDeploymentMonitoringJob_async
 */
  async checkUpdateModelDeploymentMonitoringJobProgress(name: string): Promise<LROperation<protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.UpdateModelDeploymentMonitoringJobOperationMetadata>>{
    this._log.info('updateModelDeploymentMonitoringJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateModelDeploymentMonitoringJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob, protos.google.cloud.aiplatform.v1.UpdateModelDeploymentMonitoringJobOperationMetadata>;
  }
/**
 * Deletes a ModelDeploymentMonitoringJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the model monitoring job to delete.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteModelDeploymentMonitoringJob_async
 */
  deleteModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteModelDeploymentMonitoringJobRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteModelDeploymentMonitoringJobRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteModelDeploymentMonitoringJob(
      request: protos.google.cloud.aiplatform.v1.IDeleteModelDeploymentMonitoringJobRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteModelDeploymentMonitoringJob(
      request?: protos.google.cloud.aiplatform.v1.IDeleteModelDeploymentMonitoringJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteModelDeploymentMonitoringJob response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteModelDeploymentMonitoringJob request %j', request);
    return this.innerApiCalls.deleteModelDeploymentMonitoringJob(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteModelDeploymentMonitoringJob response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteModelDeploymentMonitoringJob()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.delete_model_deployment_monitoring_job.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_DeleteModelDeploymentMonitoringJob_async
 */
  async checkDeleteModelDeploymentMonitoringJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>{
    this._log.info('deleteModelDeploymentMonitoringJob long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteModelDeploymentMonitoringJob, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>;
  }
 /**
 * Lists CustomJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the CustomJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListCustomJobsResponse.next_page_token|ListCustomJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListCustomJobs|JobService.ListCustomJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.CustomJob|CustomJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCustomJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCustomJobs(
      request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob[],
        protos.google.cloud.aiplatform.v1.IListCustomJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListCustomJobsResponse
      ]>;
  listCustomJobs(
      request: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
          protos.google.cloud.aiplatform.v1.IListCustomJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.ICustomJob>): void;
  listCustomJobs(
      request: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
          protos.google.cloud.aiplatform.v1.IListCustomJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.ICustomJob>): void;
  listCustomJobs(
      request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
          protos.google.cloud.aiplatform.v1.IListCustomJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.ICustomJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
          protos.google.cloud.aiplatform.v1.IListCustomJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.ICustomJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob[],
        protos.google.cloud.aiplatform.v1.IListCustomJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListCustomJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      protos.google.cloud.aiplatform.v1.IListCustomJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.ICustomJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listCustomJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listCustomJobs request %j', request);
    return this.innerApiCalls
      .listCustomJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.ICustomJob[],
        protos.google.cloud.aiplatform.v1.IListCustomJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListCustomJobsResponse
      ]) => {
        this._log.info('listCustomJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listCustomJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the CustomJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListCustomJobsResponse.next_page_token|ListCustomJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListCustomJobs|JobService.ListCustomJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.CustomJob|CustomJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCustomJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCustomJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCustomJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCustomJobs stream %j', request);
    return this.descriptors.page.listCustomJobs.createStream(
      this.innerApiCalls.listCustomJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCustomJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the CustomJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListCustomJobsResponse.next_page_token|ListCustomJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListCustomJobs|JobService.ListCustomJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.CustomJob|CustomJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_custom_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListCustomJobs_async
 */
  listCustomJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.ICustomJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCustomJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCustomJobs iterate %j', request);
    return this.descriptors.page.listCustomJobs.asyncIterate(
      this.innerApiCalls['listCustomJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.ICustomJob>;
  }
 /**
 * Lists DataLabelingJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the DataLabelingJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read. FieldMask represents a set of
 *   symbolic field paths. For example, the mask can be `paths: "name"`. The
 *   "name" here is a field in DataLabelingJob.
 *   If this field is not set, all fields of the DataLabelingJob are returned.
 * @param {string} request.orderBy
 *   A comma-separated list of fields to order by, sorted in ascending order by
 *   default.
 *   Use `desc` after a field name for descending.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.DataLabelingJob|DataLabelingJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDataLabelingJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDataLabelingJobs(
      request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob[],
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse
      ]>;
  listDataLabelingJobs(
      request: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IDataLabelingJob>): void;
  listDataLabelingJobs(
      request: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IDataLabelingJob>): void;
  listDataLabelingJobs(
      request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IDataLabelingJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
          protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IDataLabelingJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob[],
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.IDataLabelingJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDataLabelingJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDataLabelingJobs request %j', request);
    return this.innerApiCalls
      .listDataLabelingJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.IDataLabelingJob[],
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse
      ]) => {
        this._log.info('listDataLabelingJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDataLabelingJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the DataLabelingJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read. FieldMask represents a set of
 *   symbolic field paths. For example, the mask can be `paths: "name"`. The
 *   "name" here is a field in DataLabelingJob.
 *   If this field is not set, all fields of the DataLabelingJob are returned.
 * @param {string} request.orderBy
 *   A comma-separated list of fields to order by, sorted in ascending order by
 *   default.
 *   Use `desc` after a field name for descending.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.DataLabelingJob|DataLabelingJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDataLabelingJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDataLabelingJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataLabelingJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDataLabelingJobs stream %j', request);
    return this.descriptors.page.listDataLabelingJobs.createStream(
      this.innerApiCalls.listDataLabelingJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDataLabelingJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the DataLabelingJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read. FieldMask represents a set of
 *   symbolic field paths. For example, the mask can be `paths: "name"`. The
 *   "name" here is a field in DataLabelingJob.
 *   If this field is not set, all fields of the DataLabelingJob are returned.
 * @param {string} request.orderBy
 *   A comma-separated list of fields to order by, sorted in ascending order by
 *   default.
 *   Use `desc` after a field name for descending.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.DataLabelingJob|DataLabelingJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_data_labeling_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListDataLabelingJobs_async
 */
  listDataLabelingJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.IDataLabelingJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDataLabelingJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDataLabelingJobs iterate %j', request);
    return this.descriptors.page.listDataLabelingJobs.asyncIterate(
      this.innerApiCalls['listDataLabelingJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.IDataLabelingJob>;
  }
 /**
 * Lists HyperparameterTuningJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the
 *   HyperparameterTuningJobs from. Format:
 *   `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListHyperparameterTuningJobsResponse.next_page_token|ListHyperparameterTuningJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListHyperparameterTuningJobs|JobService.ListHyperparameterTuningJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob|HyperparameterTuningJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listHyperparameterTuningJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listHyperparameterTuningJobs(
      request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob[],
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse
      ]>;
  listHyperparameterTuningJobs(
      request: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>): void;
  listHyperparameterTuningJobs(
      request: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>): void;
  listHyperparameterTuningJobs(
      request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
          protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob[],
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listHyperparameterTuningJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listHyperparameterTuningJobs request %j', request);
    return this.innerApiCalls
      .listHyperparameterTuningJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob[],
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse
      ]) => {
        this._log.info('listHyperparameterTuningJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listHyperparameterTuningJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the
 *   HyperparameterTuningJobs from. Format:
 *   `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListHyperparameterTuningJobsResponse.next_page_token|ListHyperparameterTuningJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListHyperparameterTuningJobs|JobService.ListHyperparameterTuningJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob|HyperparameterTuningJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listHyperparameterTuningJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listHyperparameterTuningJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listHyperparameterTuningJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listHyperparameterTuningJobs stream %j', request);
    return this.descriptors.page.listHyperparameterTuningJobs.createStream(
      this.innerApiCalls.listHyperparameterTuningJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listHyperparameterTuningJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the
 *   HyperparameterTuningJobs from. Format:
 *   `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListHyperparameterTuningJobsResponse.next_page_token|ListHyperparameterTuningJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListHyperparameterTuningJobs|JobService.ListHyperparameterTuningJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.HyperparameterTuningJob|HyperparameterTuningJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_hyperparameter_tuning_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListHyperparameterTuningJobs_async
 */
  listHyperparameterTuningJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listHyperparameterTuningJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listHyperparameterTuningJobs iterate %j', request);
    return this.descriptors.page.listHyperparameterTuningJobs.asyncIterate(
      this.innerApiCalls['listHyperparameterTuningJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>;
  }
 /**
 * Lists NasJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the NasJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasJobsResponse.next_page_token|ListNasJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasJobs|JobService.ListNasJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.NasJob|NasJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listNasJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNasJobs(
      request?: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob[],
        protos.google.cloud.aiplatform.v1.IListNasJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasJobsResponse
      ]>;
  listNasJobs(
      request: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
          protos.google.cloud.aiplatform.v1.IListNasJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasJob>): void;
  listNasJobs(
      request: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
          protos.google.cloud.aiplatform.v1.IListNasJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasJob>): void;
  listNasJobs(
      request?: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
          protos.google.cloud.aiplatform.v1.IListNasJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
          protos.google.cloud.aiplatform.v1.IListNasJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasJob[],
        protos.google.cloud.aiplatform.v1.IListNasJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      protos.google.cloud.aiplatform.v1.IListNasJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.INasJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listNasJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listNasJobs request %j', request);
    return this.innerApiCalls
      .listNasJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.INasJob[],
        protos.google.cloud.aiplatform.v1.IListNasJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasJobsResponse
      ]) => {
        this._log.info('listNasJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listNasJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the NasJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasJobsResponse.next_page_token|ListNasJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasJobs|JobService.ListNasJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.NasJob|NasJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listNasJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNasJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNasJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNasJobs stream %j', request);
    return this.descriptors.page.listNasJobs.createStream(
      this.innerApiCalls.listNasJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listNasJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the NasJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasJobsResponse.next_page_token|ListNasJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasJobs|JobService.ListNasJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.NasJob|NasJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_nas_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListNasJobs_async
 */
  listNasJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListNasJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.INasJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNasJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNasJobs iterate %j', request);
    return this.descriptors.page.listNasJobs.asyncIterate(
      this.innerApiCalls['listNasJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.INasJob>;
  }
 /**
 * List top NasTrialDetails of a NasJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the NasJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasTrialDetailsResponse.next_page_token|ListNasTrialDetailsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasTrialDetails|JobService.ListNasTrialDetails}
 *   call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.NasTrialDetail|NasTrialDetail}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listNasTrialDetailsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNasTrialDetails(
      request?: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasTrialDetail[],
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse
      ]>;
  listNasTrialDetails(
      request: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasTrialDetail>): void;
  listNasTrialDetails(
      request: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasTrialDetail>): void;
  listNasTrialDetails(
      request?: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasTrialDetail>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
          protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.INasTrialDetail>):
      Promise<[
        protos.google.cloud.aiplatform.v1.INasTrialDetail[],
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.INasTrialDetail>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listNasTrialDetails values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listNasTrialDetails request %j', request);
    return this.innerApiCalls
      .listNasTrialDetails(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.INasTrialDetail[],
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest|null,
        protos.google.cloud.aiplatform.v1.IListNasTrialDetailsResponse
      ]) => {
        this._log.info('listNasTrialDetails values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listNasTrialDetails`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the NasJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasTrialDetailsResponse.next_page_token|ListNasTrialDetailsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasTrialDetails|JobService.ListNasTrialDetails}
 *   call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.NasTrialDetail|NasTrialDetail} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listNasTrialDetailsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNasTrialDetailsStream(
      request?: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNasTrialDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNasTrialDetails stream %j', request);
    return this.descriptors.page.listNasTrialDetails.createStream(
      this.innerApiCalls.listNasTrialDetails as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listNasTrialDetails`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the NasJob resource.
 *   Format:
 *   `projects/{project}/locations/{location}/nasJobs/{nas_job}`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListNasTrialDetailsResponse.next_page_token|ListNasTrialDetailsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListNasTrialDetails|JobService.ListNasTrialDetails}
 *   call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.NasTrialDetail|NasTrialDetail}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_nas_trial_details.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListNasTrialDetails_async
 */
  listNasTrialDetailsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListNasTrialDetailsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.INasTrialDetail>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNasTrialDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNasTrialDetails iterate %j', request);
    return this.descriptors.page.listNasTrialDetails.asyncIterate(
      this.innerApiCalls['listNasTrialDetails'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.INasTrialDetail>;
  }
 /**
 * Lists BatchPredictionJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the BatchPredictionJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `model_display_name` supports `=`, `!=` comparisons.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListBatchPredictionJobsResponse.next_page_token|ListBatchPredictionJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListBatchPredictionJobs|JobService.ListBatchPredictionJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob|BatchPredictionJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBatchPredictionJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBatchPredictionJobs(
      request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob[],
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse
      ]>;
  listBatchPredictionJobs(
      request: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob>): void;
  listBatchPredictionJobs(
      request: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob>): void;
  listBatchPredictionJobs(
      request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
          protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IBatchPredictionJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob[],
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.IBatchPredictionJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listBatchPredictionJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listBatchPredictionJobs request %j', request);
    return this.innerApiCalls
      .listBatchPredictionJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob[],
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse
      ]) => {
        this._log.info('listBatchPredictionJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listBatchPredictionJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the BatchPredictionJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `model_display_name` supports `=`, `!=` comparisons.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListBatchPredictionJobsResponse.next_page_token|ListBatchPredictionJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListBatchPredictionJobs|JobService.ListBatchPredictionJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob|BatchPredictionJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBatchPredictionJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBatchPredictionJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBatchPredictionJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listBatchPredictionJobs stream %j', request);
    return this.descriptors.page.listBatchPredictionJobs.createStream(
      this.innerApiCalls.listBatchPredictionJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBatchPredictionJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the BatchPredictionJobs
 *   from. Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `model_display_name` supports `=`, `!=` comparisons.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1.ListBatchPredictionJobsResponse.next_page_token|ListBatchPredictionJobsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.ListBatchPredictionJobs|JobService.ListBatchPredictionJobs}
 *   call.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.BatchPredictionJob|BatchPredictionJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_batch_prediction_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListBatchPredictionJobs_async
 */
  listBatchPredictionJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.IBatchPredictionJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBatchPredictionJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listBatchPredictionJobs iterate %j', request);
    return this.descriptors.page.listBatchPredictionJobs.asyncIterate(
      this.innerApiCalls['listBatchPredictionJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.IBatchPredictionJob>;
  }
 /**
 * Searches Model Monitoring Statistics generated within a given time window.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.modelDeploymentMonitoringJob
 *   Required. ModelDeploymentMonitoring Job resource name.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {string} request.deployedModelId
 *   Required. The DeployedModel ID of the
 *   [ModelDeploymentMonitoringObjectiveConfig.deployed_model_id].
 * @param {string} request.featureDisplayName
 *   The feature display name. If specified, only return the stats belonging to
 *   this feature. Format:
 *   {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name|ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name},
 *   example: "user_destination".
 * @param {number[]} request.objectives
 *   Required. Objectives of the stats to retrieve.
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   A page token received from a previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.SearchModelDeploymentMonitoringStatsAnomalies|JobService.SearchModelDeploymentMonitoringStatsAnomalies}
 *   call.
 * @param {google.protobuf.Timestamp} request.startTime
 *   The earliest timestamp of stats being generated.
 *   If not set, indicates fetching stats till the earliest possible one.
 * @param {google.protobuf.Timestamp} request.endTime
 *   The latest timestamp of stats being generated.
 *   If not set, indicates feching stats till the latest possible one.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies|ModelMonitoringStatsAnomalies}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `searchModelDeploymentMonitoringStatsAnomaliesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  searchModelDeploymentMonitoringStatsAnomalies(
      request?: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies[],
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest|null,
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse
      ]>;
  searchModelDeploymentMonitoringStatsAnomalies(
      request: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>): void;
  searchModelDeploymentMonitoringStatsAnomalies(
      request: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>): void;
  searchModelDeploymentMonitoringStatsAnomalies(
      request?: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
          protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies[],
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest|null,
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'model_deployment_monitoring_job': request.modelDeploymentMonitoringJob ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('searchModelDeploymentMonitoringStatsAnomalies values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('searchModelDeploymentMonitoringStatsAnomalies request %j', request);
    return this.innerApiCalls
      .searchModelDeploymentMonitoringStatsAnomalies(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies[],
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest|null,
        protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesResponse
      ]) => {
        this._log.info('searchModelDeploymentMonitoringStatsAnomalies values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `searchModelDeploymentMonitoringStatsAnomalies`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.modelDeploymentMonitoringJob
 *   Required. ModelDeploymentMonitoring Job resource name.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {string} request.deployedModelId
 *   Required. The DeployedModel ID of the
 *   [ModelDeploymentMonitoringObjectiveConfig.deployed_model_id].
 * @param {string} request.featureDisplayName
 *   The feature display name. If specified, only return the stats belonging to
 *   this feature. Format:
 *   {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name|ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name},
 *   example: "user_destination".
 * @param {number[]} request.objectives
 *   Required. Objectives of the stats to retrieve.
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   A page token received from a previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.SearchModelDeploymentMonitoringStatsAnomalies|JobService.SearchModelDeploymentMonitoringStatsAnomalies}
 *   call.
 * @param {google.protobuf.Timestamp} request.startTime
 *   The earliest timestamp of stats being generated.
 *   If not set, indicates fetching stats till the earliest possible one.
 * @param {google.protobuf.Timestamp} request.endTime
 *   The latest timestamp of stats being generated.
 *   If not set, indicates feching stats till the latest possible one.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies|ModelMonitoringStatsAnomalies} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `searchModelDeploymentMonitoringStatsAnomaliesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  searchModelDeploymentMonitoringStatsAnomaliesStream(
      request?: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'model_deployment_monitoring_job': request.modelDeploymentMonitoringJob ?? '',
    });
    const defaultCallSettings = this._defaults['searchModelDeploymentMonitoringStatsAnomalies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('searchModelDeploymentMonitoringStatsAnomalies stream %j', request);
    return this.descriptors.page.searchModelDeploymentMonitoringStatsAnomalies.createStream(
      this.innerApiCalls.searchModelDeploymentMonitoringStatsAnomalies as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `searchModelDeploymentMonitoringStatsAnomalies`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.modelDeploymentMonitoringJob
 *   Required. ModelDeploymentMonitoring Job resource name.
 *   Format:
 *   `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
 * @param {string} request.deployedModelId
 *   Required. The DeployedModel ID of the
 *   [ModelDeploymentMonitoringObjectiveConfig.deployed_model_id].
 * @param {string} request.featureDisplayName
 *   The feature display name. If specified, only return the stats belonging to
 *   this feature. Format:
 *   {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name|ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name},
 *   example: "user_destination".
 * @param {number[]} request.objectives
 *   Required. Objectives of the stats to retrieve.
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   A page token received from a previous
 *   {@link protos.google.cloud.aiplatform.v1.JobService.SearchModelDeploymentMonitoringStatsAnomalies|JobService.SearchModelDeploymentMonitoringStatsAnomalies}
 *   call.
 * @param {google.protobuf.Timestamp} request.startTime
 *   The earliest timestamp of stats being generated.
 *   If not set, indicates fetching stats till the earliest possible one.
 * @param {google.protobuf.Timestamp} request.endTime
 *   The latest timestamp of stats being generated.
 *   If not set, indicates feching stats till the latest possible one.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.ModelMonitoringStatsAnomalies|ModelMonitoringStatsAnomalies}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.search_model_deployment_monitoring_stats_anomalies.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_SearchModelDeploymentMonitoringStatsAnomalies_async
 */
  searchModelDeploymentMonitoringStatsAnomaliesAsync(
      request?: protos.google.cloud.aiplatform.v1.ISearchModelDeploymentMonitoringStatsAnomaliesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'model_deployment_monitoring_job': request.modelDeploymentMonitoringJob ?? '',
    });
    const defaultCallSettings = this._defaults['searchModelDeploymentMonitoringStatsAnomalies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('searchModelDeploymentMonitoringStatsAnomalies iterate %j', request);
    return this.descriptors.page.searchModelDeploymentMonitoringStatsAnomalies.asyncIterate(
      this.innerApiCalls['searchModelDeploymentMonitoringStatsAnomalies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.IModelMonitoringStatsAnomalies>;
  }
 /**
 * Lists ModelDeploymentMonitoringJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the ModelDeploymentMonitoringJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob|ModelDeploymentMonitoringJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listModelDeploymentMonitoringJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listModelDeploymentMonitoringJobs(
      request?: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob[],
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse
      ]>;
  listModelDeploymentMonitoringJobs(
      request: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>): void;
  listModelDeploymentMonitoringJobs(
      request: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>): void;
  listModelDeploymentMonitoringJobs(
      request?: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
          protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob[],
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listModelDeploymentMonitoringJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listModelDeploymentMonitoringJobs request %j', request);
    return this.innerApiCalls
      .listModelDeploymentMonitoringJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob[],
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest|null,
        protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsResponse
      ]) => {
        this._log.info('listModelDeploymentMonitoringJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listModelDeploymentMonitoringJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the ModelDeploymentMonitoringJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob|ModelDeploymentMonitoringJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listModelDeploymentMonitoringJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listModelDeploymentMonitoringJobsStream(
      request?: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModelDeploymentMonitoringJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listModelDeploymentMonitoringJobs stream %j', request);
    return this.descriptors.page.listModelDeploymentMonitoringJobs.createStream(
      this.innerApiCalls.listModelDeploymentMonitoringJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listModelDeploymentMonitoringJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the ModelDeploymentMonitoringJob.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.filter
 *   The standard list filter.
 *
 *   Supported fields:
 *
 *     * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
 *     * `state` supports `=`, `!=` comparisons.
 *     * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
 *       `create_time` must be in RFC 3339 format.
 *     * `labels` supports general map functions that is:
 *       `labels.key=value` - key:value equality
 *       `labels.key:* - key existence
 *
 *   Some examples of using the filter are:
 *
 *     * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
 *     * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
 *     * `NOT display_name="my_job"`
 *     * `create_time>"2021-05-18T00:00:00Z"`
 *     * `labels.keyA=valueA`
 *     * `labels.keyB:*`
 * @param {number} request.pageSize
 *   The standard list page size.
 * @param {string} request.pageToken
 *   The standard list page token.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob|ModelDeploymentMonitoringJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/job_service.list_model_deployment_monitoring_jobs.js</caption>
 * region_tag:aiplatform_v1_generated_JobService_ListModelDeploymentMonitoringJobs_async
 */
  listModelDeploymentMonitoringJobsAsync(
      request?: protos.google.cloud.aiplatform.v1.IListModelDeploymentMonitoringJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModelDeploymentMonitoringJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listModelDeploymentMonitoringJobs iterate %j', request);
    return this.descriptors.page.listModelDeploymentMonitoringJobs.asyncIterate(
      this.innerApiCalls['listModelDeploymentMonitoringJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.IModelDeploymentMonitoringJob>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(project:string,location:string,dataset:string,dataItem:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
      annotation: annotation,
    });
  }

  /**
   * Parse the project from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the dataset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).dataset;
  }

  /**
   * Parse the data_item from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).data_item;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(project:string,location:string,dataset:string,annotationSpec:string) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      proje