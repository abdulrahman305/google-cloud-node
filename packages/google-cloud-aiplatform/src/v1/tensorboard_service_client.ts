// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform, PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/tensorboard_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './tensorboard_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  TensorboardService
 * @class
 * @memberof v1
 */
export class TensorboardServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  tensorboardServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TensorboardServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TensorboardServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TensorboardServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
        ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
        ),
      projectLocationFeaturestoreEntityTypeFeaturePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
        ),
      projectLocationPublisherModelPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
        ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
      tuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tuningJobs/{tuning_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTensorboards: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboards'
      ),
      listTensorboardExperiments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardExperiments'
      ),
      listTensorboardRuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardRuns'
      ),
      listTensorboardTimeSeries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tensorboardTimeSeries'
      ),
      exportTensorboardTimeSeriesData: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'timeSeriesDataPoints'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      readTensorboardBlobData: new this._gaxModule.StreamDescriptor(
        this._gaxModule.StreamType.SERVER_STREAMING,
        !!opts.fallback,
        !!opts.gaxServerStreamingRetries
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/ui/{name=projects/*/locations/*}',
          additional_bindings: [{get: '/v1/{name=projects/*/locations/*}'}],
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/ui/{name=projects/*}/locations',
          additional_bindings: [{get: '/v1/{name=projects/*}/locations'}],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/models/*}:getIamPolicy',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/models/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/models/*}:testIamPermissions',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/models/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',
            },
            {
              post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
            {post: '/v1/{name=projects/*/locations/*/operations/*}:cancel'},
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/models/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {delete: '/ui/{name=projects/*/locations/*/agents/*/operations/*}'},
            {delete: '/ui/{name=projects/*/locations/*/apps/*/operations/*}'},
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/extensions/*}/operations',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              delete:
                '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {
              delete:
                '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {delete: '/v1/{name=projects/*/locations/*/operations/*}'},
            {
              delete:
                '/v1/{name=projects/*/locations/*/datasets/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/indexes/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {delete: '/v1/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              delete:
                '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/studies/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/schedules/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {
              delete:
                '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/ui/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/agents/*/operations/*}'},
            {get: '/ui/{name=projects/*/locations/*/apps/*/operations/*}'},
            {get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {get: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}'},
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/operations/*}'},
            {get: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tuningJobs/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/models/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/studies/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',
            },
            {get: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}'},
            {
              get: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/ui/{name=projects/*/locations/*}/operations',
          additional_bindings: [
            {get: '/ui/{name=projects/*/locations/*/agents/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/apps/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/datasets/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/extensions/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/tuningJobs/*}/operations'},
            {get: '/ui/{name=projects/*/locations/*/indexes/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/modelMonitors/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/studies/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/persistentResources/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {get: '/ui/{name=projects/*/locations/*/schedules/*}/operations'},
            {
              get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
            {get: '/v1/{name=projects/*/locations/*}/operations'},
            {get: '/v1/{name=projects/*/locations/*/datasets/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/endpoints/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/customJobs/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/tuningJobs/*}/operations'},
            {get: '/v1/{name=projects/*/locations/*/indexes/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/indexEndpoints/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/migratableResources/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/models/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/studies/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/studies/*/trials/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/trainingPipelines/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/persistentResources/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/pipelineJobs/*}/operations',
            },
            {get: '/v1/{name=projects/*/locations/*/schedules/*}/operations'},
            {
              get: '/v1/{name=projects/*/locations/*/specialistPools/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              get: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.WaitOperation',
          post: '/ui/{name=projects/*/locations/*/operations/*}:wait',
          additional_bindings: [
            {
              post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              post: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
            {post: '/v1/{name=projects/*/locations/*/operations/*}:wait'},
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/models/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/studies/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',
            },
            {
              post: '/v1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',
            },
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createTensorboardResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.Tensorboard'
    ) as gax.protobuf.Type;
    const createTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.CreateTensorboardOperationMetadata'
    ) as gax.protobuf.Type;
    const updateTensorboardResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.Tensorboard'
    ) as gax.protobuf.Type;
    const updateTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.UpdateTensorboardOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardExperimentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardExperimentMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardRunResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardRunMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTensorboardTimeSeriesResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTensorboardTimeSeriesMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1.DeleteOperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTensorboardResponse.decode.bind(createTensorboardResponse),
        createTensorboardMetadata.decode.bind(createTensorboardMetadata)
      ),
      updateTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTensorboardResponse.decode.bind(updateTensorboardResponse),
        updateTensorboardMetadata.decode.bind(updateTensorboardMetadata)
      ),
      deleteTensorboard: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardResponse.decode.bind(deleteTensorboardResponse),
        deleteTensorboardMetadata.decode.bind(deleteTensorboardMetadata)
      ),
      deleteTensorboardExperiment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardExperimentResponse.decode.bind(
          deleteTensorboardExperimentResponse
        ),
        deleteTensorboardExperimentMetadata.decode.bind(
          deleteTensorboardExperimentMetadata
        )
      ),
      deleteTensorboardRun: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardRunResponse.decode.bind(deleteTensorboardRunResponse),
        deleteTensorboardRunMetadata.decode.bind(deleteTensorboardRunMetadata)
      ),
      deleteTensorboardTimeSeries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTensorboardTimeSeriesResponse.decode.bind(
          deleteTensorboardTimeSeriesResponse
        ),
        deleteTensorboardTimeSeriesMetadata.decode.bind(
          deleteTensorboardTimeSeriesMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.aiplatform.v1.TensorboardService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.tensorboardServiceStub) {
      return this.tensorboardServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1.TensorboardService.
    this.tensorboardServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.aiplatform.v1.TensorboardService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1.TensorboardService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const tensorboardServiceStubMethods = [
      'createTensorboard',
      'getTensorboard',
      'updateTensorboard',
      'listTensorboards',
      'deleteTensorboard',
      'readTensorboardUsage',
      'readTensorboardSize',
      'createTensorboardExperiment',
      'getTensorboardExperiment',
      'updateTensorboardExperiment',
      'listTensorboardExperiments',
      'deleteTensorboardExperiment',
      'createTensorboardRun',
      'batchCreateTensorboardRuns',
      'getTensorboardRun',
      'updateTensorboardRun',
      'listTensorboardRuns',
      'deleteTensorboardRun',
      'batchCreateTensorboardTimeSeries',
      'createTensorboardTimeSeries',
      'getTensorboardTimeSeries',
      'updateTensorboardTimeSeries',
      'listTensorboardTimeSeries',
      'deleteTensorboardTimeSeries',
      'batchReadTensorboardTimeSeriesData',
      'readTensorboardTimeSeriesData',
      'readTensorboardBlobData',
      'writeTensorboardExperimentData',
      'writeTensorboardRunData',
      'exportTensorboardTimeSeriesData',
    ];
    for (const methodName of tensorboardServiceStubMethods) {
      const callPromise = this.tensorboardServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new this._gaxModule.GoogleError(
                      'The client has already been closed.'
                    )
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.tensorboardServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Tensorboard resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.Tensorboard|Tensorboard}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.get_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_GetTensorboard_async
   */
  getTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboard,
      protos.google.cloud.aiplatform.v1.IGetTensorboardRequest | undefined,
      {} | undefined,
    ]
  >;
  getTensorboard(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboard,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboard(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboard,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboard,
          | protos.google.cloud.aiplatform.v1.IGetTensorboardRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboard,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboard,
      protos.google.cloud.aiplatform.v1.IGetTensorboardRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboard(request, options, callback);
  }
  /**
   * Returns a list of monthly active users for a given TensorBoard instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboard
   *   Required. The name of the Tensorboard resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.ReadTensorboardUsageResponse|ReadTensorboardUsageResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.read_tensorboard_usage.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ReadTensorboardUsage_async
   */
  readTensorboardUsage(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
      (
        | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  readTensorboardUsage(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardUsage(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardUsage(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
          | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardUsageResponse,
      (
        | protos.google.cloud.aiplatform.v1.IReadTensorboardUsageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard: request.tensorboard ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardUsage(request, options, callback);
  }
  /**
   * Returns the storage size for a given TensorBoard instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboard
   *   Required. The name of the Tensorboard resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.ReadTensorboardSizeResponse|ReadTensorboardSizeResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.read_tensorboard_size.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ReadTensorboardSize_async
   */
  readTensorboardSize(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest | undefined,
      {} | undefined,
    ]
  >;
  readTensorboardSize(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardSize(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardSize(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
          | protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeResponse,
      protos.google.cloud.aiplatform.v1.IReadTensorboardSizeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard: request.tensorboard ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardSize(request, options, callback);
  }
  /**
   * Creates a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to create the
   *   TensorboardExperiment in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {google.cloud.aiplatform.v1.TensorboardExperiment} request.tensorboardExperiment
   *   The TensorboardExperiment to create.
   * @param {string} request.tensorboardExperimentId
   *   Required. The ID to use for the Tensorboard experiment, which becomes the
   *   final component of the Tensorboard experiment's resource name.
   *
   *   This value should be 1-128 characters, and valid characters
   *   are `/{@link protos.0-9|a-z}-/`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.create_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_CreateTensorboardExperiment_async
   */
  createTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardExperiment resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.get_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_GetTensorboardExperiment_async
   */
  getTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.IGetTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Updates a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardExperiment resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1.TensorboardExperiment} request.tensorboardExperiment
   *   Required. The TensorboardExperiment's `name` field is used to identify the
   *   TensorboardExperiment to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.update_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_UpdateTensorboardExperiment_async
   */
  updateTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
          | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardExperimentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_experiment.name':
          request.tensorboardExperiment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardRun in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {google.cloud.aiplatform.v1.TensorboardRun} request.tensorboardRun
   *   Required. The TensorboardRun to create.
   * @param {string} request.tensorboardRunId
   *   Required. The ID to use for the Tensorboard run, which becomes the final
   *   component of the Tensorboard run's resource name.
   *
   *   This value should be 1-128 characters, and valid characters
   *   are `/{@link protos.0-9|a-z}-/`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardRun|TensorboardRun}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.create_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_CreateTensorboardRun_async
   */
  createTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardRunRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardRun(request, options, callback);
  }
  /**
   * Batch create TensorboardRuns.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardRuns in. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   *   The parent field in the CreateTensorboardRunRequest messages must match
   *   this field.
   * @param {number[]} request.requests
   *   Required. The request message specifying the TensorboardRuns to create.
   *   A maximum of 1000 TensorboardRuns can be created in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.BatchCreateTensorboardRunsResponse|BatchCreateTensorboardRunsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.batch_create_tensorboard_runs.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_BatchCreateTensorboardRuns_async
   */
  batchCreateTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchCreateTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardRuns(
    request: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardRuns(
    request?: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
          | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardRunsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateTensorboardRuns(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardRun resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardRun|TensorboardRun}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.get_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_GetTensorboardRun_async
   */
  getTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest | undefined,
      {} | undefined,
    ]
  >;
  getTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      protos.google.cloud.aiplatform.v1.IGetTensorboardRunRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardRun(request, options, callback);
  }
  /**
   * Updates a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardRun resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1.TensorboardRun} request.tensorboardRun
   *   Required. The TensorboardRun's `name` field is used to identify the
   *   TensorboardRun to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardRun|TensorboardRun}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.update_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_UpdateTensorboardRun_async
   */
  updateTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardRun,
          | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardRun,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardRunRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_run.name': request.tensorboardRun!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardRun(request, options, callback);
  }
  /**
   * Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to create the
   *   TensorboardTimeSeries in.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   *   The TensorboardRuns referenced by the parent fields in the
   *   CreateTensorboardTimeSeriesRequest messages must be sub resources of this
   *   TensorboardExperiment.
   * @param {number[]} request.requests
   *   Required. The request message specifying the TensorboardTimeSeries to
   *   create. A maximum of 1000 TensorboardTimeSeries can be created in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.BatchCreateTensorboardTimeSeriesResponse|BatchCreateTensorboardTimeSeriesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.batch_create_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_BatchCreateTensorboardTimeSeries_async
   */
  batchCreateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchCreateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
          | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
      | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchCreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardRun to create the
   *   TensorboardTimeSeries in.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {string} [request.tensorboardTimeSeriesId]
   *   Optional. The user specified unique ID to use for the
   *   TensorboardTimeSeries, which becomes the final component of the
   *   TensorboardTimeSeries's resource name. This value should match
   *   "{@link protos.a-z0-9-|a-z0-9}{0, 127}"
   * @param {google.cloud.aiplatform.v1.TensorboardTimeSeries} request.tensorboardTimeSeries
   *   Required. The TensorboardTimeSeries to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardTimeSeries|TensorboardTimeSeries}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.create_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_CreateTensorboardTimeSeries_async
   */
  createTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.ICreateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardTimeSeries resource.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardTimeSeries|TensorboardTimeSeries}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.get_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_GetTensorboardTimeSeries_async
   */
  getTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.IGetTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Updates a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   TensorboardTimeSeries resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1.TensorboardTimeSeries} request.tensorboardTimeSeries
   *   Required. The TensorboardTimeSeries' `name` field is used to identify the
   *   TensorboardTimeSeries to be updated.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardTimeSeries|TensorboardTimeSeries}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.update_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_UpdateTensorboardTimeSeries_async
   */
  updateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
          | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardTimeSeries,
      (
        | protos.google.cloud.aiplatform.v1.IUpdateTensorboardTimeSeriesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard_time_series.name':
          request.tensorboardTimeSeries!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Reads multiple TensorboardTimeSeries' data. The data point number limit is
   * 1000 for scalars, 100 for tensors and blob references. If the number of
   * data points stored is less than the limit, all data is returned.
   * Otherwise, the number limit of data points is randomly selected from
   * this time series and returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboard
   *   Required. The resource name of the Tensorboard containing
   *   TensorboardTimeSeries to read data from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`.
   *   The TensorboardTimeSeries referenced by
   *   {@link protos.google.cloud.aiplatform.v1.BatchReadTensorboardTimeSeriesDataRequest.time_series|time_series}
   *   must be sub resources of this Tensorboard.
   * @param {string[]} request.timeSeries
   *   Required. The resource names of the TensorboardTimeSeries to read data
   *   from. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.BatchReadTensorboardTimeSeriesDataResponse|BatchReadTensorboardTimeSeriesDataResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.batch_read_tensorboard_time_series_data.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_BatchReadTensorboardTimeSeriesData_async
   */
  batchReadTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchReadTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchReadTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchReadTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
          | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IBatchReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard: request.tensorboard ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchReadTensorboardTimeSeriesData(
      request,
      options,
      callback
    );
  }
  /**
   * Reads a TensorboardTimeSeries' data. By default, if the number of data
   * points stored is less than 1000, all data is returned. Otherwise, 1000
   * data points is randomly selected from this time series and returned.
   * This value can be changed by changing max_data_points, which can't be
   * greater than 10k.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardTimeSeries
   *   Required. The resource name of the TensorboardTimeSeries to read data from.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {number} request.maxDataPoints
   *   The maximum number of TensorboardTimeSeries' data to return.
   *
   *   This value should be a positive integer.
   *   This value can be set to -1 to return all data.
   * @param {string} request.filter
   *   Reads the TensorboardTimeSeries' data that match the filter expression.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.ReadTensorboardTimeSeriesDataResponse|ReadTensorboardTimeSeriesDataResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.read_tensorboard_time_series_data.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ReadTensorboardTimeSeriesData_async
   */
  readTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  readTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardTimeSeriesData(
    request: protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  readTensorboardTimeSeriesData(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
          | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
      | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IReadTensorboardTimeSeriesDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_time_series: request.tensorboardTimeSeries ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardTimeSeriesData(
      request,
      options,
      callback
    );
  }
  /**
   * Write time series data points of multiple TensorboardTimeSeries in multiple
   * TensorboardRun's. If any data fail to be ingested, an error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardExperiment
   *   Required. The resource name of the TensorboardExperiment to write data to.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {number[]} request.writeRunDataRequests
   *   Required. Requests containing per-run TensorboardTimeSeries data to write.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.WriteTensorboardExperimentDataResponse|WriteTensorboardExperimentDataResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.write_tensorboard_experiment_data.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_WriteTensorboardExperimentData_async
   */
  writeTensorboardExperimentData(
    request?: protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  writeTensorboardExperimentData(
    request: protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardExperimentData(
    request: protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardExperimentData(
    request?: protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
          | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IWriteTensorboardExperimentDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_experiment: request.tensorboardExperiment ?? '',
      });
    this.initialize();
    return this.innerApiCalls.writeTensorboardExperimentData(
      request,
      options,
      callback
    );
  }
  /**
   * Write time series data points into multiple TensorboardTimeSeries under
   * a TensorboardRun. If any data fail to be ingested, an error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.tensorboardRun
   *   Required. The resource name of the TensorboardRun to write data to.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {number[]} request.timeSeriesData
   *   Required. The TensorboardTimeSeries data to write.
   *   Values with in a time series are indexed by their step value.
   *   Repeated writes to the same step will overwrite the existing value for that
   *   step.
   *   The upper limit of data points per write request is 5000.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1.WriteTensorboardRunDataResponse|WriteTensorboardRunDataResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.write_tensorboard_run_data.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_WriteTensorboardRunData_async
   */
  writeTensorboardRunData(
    request?: protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  writeTensorboardRunData(
    request: protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardRunData(
    request: protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest,
    callback: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  writeTensorboardRunData(
    request?: protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
          | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
      | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataResponse,
      (
        | protos.google.cloud.aiplatform.v1.IWriteTensorboardRunDataRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        tensorboard_run: request.tensorboardRun ?? '',
      });
    this.initialize();
    return this.innerApiCalls.writeTensorboardRunData(
      request,
      options,
      callback
    );
  }

  /**
   * Gets bytes of TensorboardBlobs.
   * This is to allow reading blob data stored in consumer project's Cloud
   * Storage bucket without users having to obtain Cloud Storage access
   * permission.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.timeSeries
   *   Required. The resource name of the TensorboardTimeSeries to list Blobs.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {string[]} request.blobIds
   *   IDs of the blobs to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits {@link protos.google.cloud.aiplatform.v1.ReadTensorboardBlobDataResponse|ReadTensorboardBlobDataResponse} on 'data' event.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.read_tensorboard_blob_data.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ReadTensorboardBlobData_async
   */
  readTensorboardBlobData(
    request?: protos.google.cloud.aiplatform.v1.IReadTensorboardBlobDataRequest,
    options?: CallOptions
  ): gax.CancellableStream {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        time_series: request.timeSeries ?? '',
      });
    this.initialize();
    return this.innerApiCalls.readTensorboardBlobData(request, options);
  }

  /**
   * Creates a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to create the Tensorboard in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {google.cloud.aiplatform.v1.Tensorboard} request.tensorboard
   *   Required. The Tensorboard to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.create_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_CreateTensorboard_async
   */
  createTensorboard(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createTensorboard(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboard(
    request: protos.google.cloud.aiplatform.v1.ICreateTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTensorboard(
    request?: protos.google.cloud.aiplatform.v1.ICreateTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1.ITensorboard,
            protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.ICreateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.create_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_CreateTensorboard_async
   */
  async checkCreateTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1.Tensorboard,
      protos.google.cloud.aiplatform.v1.CreateTensorboardOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1.Tensorboard,
      protos.google.cloud.aiplatform.v1.CreateTensorboardOperationMetadata
    >;
  }
  /**
   * Updates a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Tensorboard resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it's in the mask. If the
   *   user does not provide a mask then all fields are overwritten if new
   *   values are specified.
   * @param {google.cloud.aiplatform.v1.Tensorboard} request.tensorboard
   *   Required. The Tensorboard's `name` field is used to identify the
   *   Tensorboard to be updated. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.update_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_UpdateTensorboard_async
   */
  updateTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateTensorboard(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboard(
    request: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IUpdateTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.aiplatform.v1.ITensorboard,
            protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.aiplatform.v1.ITensorboard,
        protos.google.cloud.aiplatform.v1.IUpdateTensorboardOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tensorboard.name': request.tensorboard!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.update_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_UpdateTensorboard_async
   */
  async checkUpdateTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.aiplatform.v1.Tensorboard,
      protos.google.cloud.aiplatform.v1.UpdateTensorboardOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.aiplatform.v1.Tensorboard,
      protos.google.cloud.aiplatform.v1.UpdateTensorboardOperationMetadata
    >;
  }
  /**
   * Deletes a Tensorboard.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Tensorboard to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboard_async
   */
  deleteTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTensorboard(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboard(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboard(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboard(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboard()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboard_async
   */
  async checkDeleteTensorboardProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboard,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardExperiment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardExperiment to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardExperiment_async
   */
  deleteTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardExperimentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardExperimentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardExperiment(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardExperimentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardExperiment(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardExperimentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardExperiment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardExperiment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_experiment.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardExperiment_async
   */
  async checkDeleteTensorboardExperimentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardExperiment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardRun.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardRun to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardRun_async
   */
  deleteTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRunRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRunRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardRun(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRunRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardRun(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardRun(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardRun()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_run.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardRun_async
   */
  async checkDeleteTensorboardRunProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardRun,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >;
  }
  /**
   * Deletes a TensorboardTimeSeries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the TensorboardTimeSeries to be deleted.
   *   Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardTimeSeries_async
   */
  deleteTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardTimeSeriesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardTimeSeriesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardTimeSeries(
    request: protos.google.cloud.aiplatform.v1.IDeleteTensorboardTimeSeriesRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTensorboardTimeSeries(
    request?: protos.google.cloud.aiplatform.v1.IDeleteTensorboardTimeSeriesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTensorboardTimeSeries(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteTensorboardTimeSeries()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.delete_tensorboard_time_series.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_DeleteTensorboardTimeSeries_async
   */
  async checkDeleteTensorboardTimeSeriesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTensorboardTimeSeries,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.aiplatform.v1.DeleteOperationMetadata
    >;
  }
  /**
   * Lists Tensorboards in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.Tensorboard|Tensorboard}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTensorboards(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboard[],
      protos.google.cloud.aiplatform.v1.IListTensorboardsRequest | null,
      protos.google.cloud.aiplatform.v1.IListTensorboardsResponse,
    ]
  >;
  listTensorboards(
    request: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboard
    >
  ): void;
  listTensorboards(
    request: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboard
    >
  ): void;
  listTensorboards(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
          | protos.google.cloud.aiplatform.v1.IListTensorboardsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1.ITensorboard
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboard
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboard[],
      protos.google.cloud.aiplatform.v1.IListTensorboardsRequest | null,
      protos.google.cloud.aiplatform.v1.IListTensorboardsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboards(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.Tensorboard|Tensorboard} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTensorboardsStream(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboards'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboards.createStream(
      this.innerApiCalls.listTensorboards as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboards`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Location to list Tensorboards.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {string} request.filter
   *   Lists the Tensorboards that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of Tensorboards to return. The service may return
   *   fewer than this value. If unspecified, at most 100 Tensorboards are
   *   returned. The maximum value is 100; values above 100 are coerced to
   *   100.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboards|TensorboardService.ListTensorboards}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1.Tensorboard|Tensorboard}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.list_tensorboards.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ListTensorboards_async
   */
  listTensorboardsAsync(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1.ITensorboard> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboards'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboards.asyncIterate(
      this.innerApiCalls['listTensorboards'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.ITensorboard>;
  }
  /**
   * Lists TensorboardExperiments in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTensorboardExperimentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTensorboardExperiments(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment[],
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest | null,
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse,
    ]
  >;
  listTensorboardExperiments(
    request: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment
    >
  ): void;
  listTensorboardExperiments(
    request: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment
    >
  ): void;
  listTensorboardExperiments(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
          | protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse
          | null
          | undefined,
          protos.google.cloud.aiplatform.v1.ITensorboardExperiment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
      | protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse
      | null
      | undefined,
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment
    >
  ): Promise<
    [
      protos.google.cloud.aiplatform.v1.ITensorboardExperiment[],
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest | null,
      protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTensorboardExperiments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTensorboardExperimentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTensorboardExperimentsStream(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardExperiments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardExperiments.createStream(
      this.innerApiCalls.listTensorboardExperiments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTensorboardExperiments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Tensorboard to list
   *   TensorboardExperiments. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   * @param {string} request.filter
   *   Lists the TensorboardExperiments that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardExperiments to return. The service may
   *   return fewer than this value. If unspecified, at most 50
   *   TensorboardExperiments are returned. The maximum value is 1000; values
   *   above 1000 are coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardExperiments|TensorboardService.ListTensorboardExperiments}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   *   Mask specifying which fields to read.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardExperiment|TensorboardExperiment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/tensorboard_service.list_tensorboard_experiments.js</caption>
   * region_tag:aiplatform_v1_generated_TensorboardService_ListTensorboardExperiments_async
   */
  listTensorboardExperimentsAsync(
    request?: protos.google.cloud.aiplatform.v1.IListTensorboardExperimentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.aiplatform.v1.ITensorboardExperiment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTensorboardExperiments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTensorboardExperiments.asyncIterate(
      this.innerApiCalls['listTensorboardExperiments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1.ITensorboardExperiment>;
  }
  /**
   * Lists TensorboardRuns in a Location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the TensorboardExperiment to list
   *   TensorboardRuns. Format:
   *   `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * @param {string} request.filter
   *   Lists the TensorboardRuns that match the filter expression.
   * @param {number} request.pageSize
   *   The maximum number of TensorboardRuns to return. The service may return
   *   fewer than this value. If unspecified, at most 50 TensorboardRuns are
   *   returned. The maximum value is 1000; values above 1000 are coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link protos.google.cloud.aiplatform.v1.TensorboardService.ListTensorboardRuns|TensorboardService.ListTensorboardRuns}
   *   must match the call that provided the page token.
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {google.protobuf.FieldMask} request.readMask
   * 