// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/gen_ai_tuning_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './gen_ai_tuning_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  A service for creating and managing GenAI Tuning Jobs.
 * @class
 * @memberof v1beta1
 */
export class GenAiTuningServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('aiplatform');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  genAiTuningServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GenAiTuningServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new GenAiTuningServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof GenAiTuningServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      cachedContentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cachedContents/{cached_content}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      exampleStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/exampleStores/{example_store}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      extensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/extensions/{extension}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/featureMonitors/{feature_monitor}'
      ),
      featureMonitorJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/featureMonitors/{feature_monitor}/featureMonitorJobs/{feature_monitor_job}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      memoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/memories/{memory}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
      ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      modelMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}'
      ),
      modelMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookExecutionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookExecutionJobs/{notebook_execution_job}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
      ),
      projectLocationFeaturestoreEntityTypeFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
      ),
      projectLocationPublisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
      ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      ragCorpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}'
      ),
      ragEngineConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragEngineConfig'
      ),
      ragFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}'
      ),
      reasoningEnginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/sessions/{session}'
      ),
      sessionEventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/sessions/{session}/events/{event}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
      tuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tuningJobs/{tuning_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTuningJobs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tuningJobs')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/ui/{name=projects/*/locations/*}',additional_bindings: [{get: '/v1beta1/{name=projects/*/locations/*}',}],
      },{selector: 'google.cloud.location.Locations.ListLocations',get: '/ui/{name=projects/*}/locations',additional_bindings: [{get: '/v1beta1/{name=projects/*}/locations',}],
      },{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:testIamPermissions',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',}],
      },{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{delete: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/ui/{name=projects/*/locations/*}/operations',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*}/operations',},{get: '/ui/{name=projects/*/locations/*/apps/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations',},{get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*}/operations',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/ui/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{get: '/v1beta1/{name=projects/*/locations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/agents/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/apps/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/extensions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/models/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/solvers/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*}/operations',}],
      },{selector: 'google.longrunning.Operations.WaitOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:wait',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const rebaseTunedModelResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.TuningJob') as gax.protobuf.Type;
    const rebaseTunedModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.RebaseTunedModelOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      rebaseTunedModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        rebaseTunedModelResponse.decode.bind(rebaseTunedModelResponse),
        rebaseTunedModelMetadata.decode.bind(rebaseTunedModelMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.aiplatform.v1beta1.GenAiTuningService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.genAiTuningServiceStub) {
      return this.genAiTuningServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1beta1.GenAiTuningService.
    this.genAiTuningServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.aiplatform.v1beta1.GenAiTuningService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1beta1.GenAiTuningService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const genAiTuningServiceStubMethods =
        ['createTuningJob', 'getTuningJob', 'listTuningJobs', 'cancelTuningJob', 'rebaseTunedModel'];
    for (const methodName of genAiTuningServiceStubMethods) {
      const callPromise = this.genAiTuningServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.genAiTuningServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a TuningJob. A created TuningJob right away will be attempted to
 * be run.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to create the TuningJob in.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1beta1.TuningJob} request.tuningJob
 *   Required. The TuningJob to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.TuningJob|TuningJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.create_tuning_job.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_CreateTuningJob_async
 */
  createTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|undefined, {}|undefined
      ]>;
  createTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  createTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  createTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.ICreateTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a TuningJob.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the TuningJob resource. Format:
 *   `projects/{project}/locations/{location}/tuningJobs/{tuning_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.TuningJob|TuningJob}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.get_tuning_job.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_GetTuningJob_async
 */
  getTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|undefined, {}|undefined
      ]>;
  getTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  getTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  getTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1beta1.ITuningJob,
          protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1beta1.ITuningJob,
        protos.google.cloud.aiplatform.v1beta1.IGetTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Cancels a TuningJob.
 * Starts asynchronous cancellation on the TuningJob. The server makes a best
 * effort to cancel the job, but success is not guaranteed. Clients can use
 * {@link protos.google.cloud.aiplatform.v1beta1.GenAiTuningService.GetTuningJob|GenAiTuningService.GetTuningJob}
 * or other methods to check whether the cancellation succeeded or whether the
 * job completed despite cancellation. On successful cancellation, the
 * TuningJob is not deleted; instead it becomes a job with a
 * {@link protos.google.cloud.aiplatform.v1beta1.TuningJob.error|TuningJob.error} value
 * with a {@link protos.google.rpc.Status.code|google.rpc.Status.code} of 1, corresponding
 * to `Code.CANCELLED`, and
 * {@link protos.google.cloud.aiplatform.v1beta1.TuningJob.state|TuningJob.state} is set
 * to `CANCELLED`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the TuningJob to cancel. Format:
 *   `projects/{project}/locations/{location}/tuningJobs/{tuning_job}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.cancel_tuning_job.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_CancelTuningJob_async
 */
  cancelTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|undefined, {}|undefined
      ]>;
  cancelTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelTuningJob(
      request: protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|null|undefined,
          {}|null|undefined>): void;
  cancelTuningJob(
      request?: protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('cancelTuningJob request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('cancelTuningJob response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.cancelTuningJob(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.ICancelTuningJobRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('cancelTuningJob response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Rebase a TunedModel.
 * Creates a LongRunningOperation that takes a legacy Tuned GenAI model
 * Reference and creates a TuningJob based on newly available model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location into which to rebase the Model.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1beta1.TunedModelRef} request.tunedModelRef
 *   Required. TunedModel reference to retrieve the legacy model information.
 * @param {google.cloud.aiplatform.v1beta1.TuningJob} [request.tuningJob]
 *   Optional. The TuningJob to be updated. Users can use this TuningJob field
 *   to overwrite tuning configs.
 * @param {google.cloud.aiplatform.v1beta1.GcsDestination} [request.artifactDestination]
 *   Optional. The Google Cloud Storage location to write the artifacts.
 * @param {boolean} [request.deployToSameEndpoint]
 *   Optional. By default, bison to gemini migration will always create new
 *   model/endpoint, but for gemini-1.0 to gemini-1.5 migration, we default
 *   deploy to the same endpoint. See details in this Section.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.rebase_tuned_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_RebaseTunedModel_async
 */
  rebaseTunedModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  rebaseTunedModel(
      request: protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  rebaseTunedModel(
      request: protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelRequest,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  rebaseTunedModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('rebaseTunedModel response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('rebaseTunedModel request %j', request);
    return this.innerApiCalls.rebaseTunedModel(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.aiplatform.v1beta1.ITuningJob, protos.google.cloud.aiplatform.v1beta1.IRebaseTunedModelOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('rebaseTunedModel response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `rebaseTunedModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.rebase_tuned_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_RebaseTunedModel_async
 */
  async checkRebaseTunedModelProgress(name: string): Promise<LROperation<protos.google.cloud.aiplatform.v1beta1.TuningJob, protos.google.cloud.aiplatform.v1beta1.RebaseTunedModelOperationMetadata>>{
    this._log.info('rebaseTunedModel long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.rebaseTunedModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.aiplatform.v1beta1.TuningJob, protos.google.cloud.aiplatform.v1beta1.RebaseTunedModelOperationMetadata>;
  }
 /**
 * Lists TuningJobs in a Location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the TuningJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via {@link protos.|ListTuningJob.next_page_token} of the
 *   previous GenAiTuningService.ListTuningJob][] call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.TuningJob|TuningJob}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTuningJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTuningJobs(
      request?: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob[],
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse
      ]>;
  listTuningJobs(
      request: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.ITuningJob>): void;
  listTuningJobs(
      request: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.ITuningJob>): void;
  listTuningJobs(
      request?: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.ITuningJob>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.ITuningJob>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.ITuningJob[],
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1beta1.ITuningJob>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listTuningJobs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listTuningJobs request %j', request);
    return this.innerApiCalls
      .listTuningJobs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1beta1.ITuningJob[],
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListTuningJobsResponse
      ]) => {
        this._log.info('listTuningJobs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listTuningJobs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the TuningJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via {@link protos.|ListTuningJob.next_page_token} of the
 *   previous GenAiTuningService.ListTuningJob][] call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.TuningJob|TuningJob} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTuningJobsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTuningJobsStream(
      request?: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTuningJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listTuningJobs stream %j', request);
    return this.descriptors.page.listTuningJobs.createStream(
      this.innerApiCalls.listTuningJobs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTuningJobs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the Location to list the TuningJobs from.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via {@link protos.|ListTuningJob.next_page_token} of the
 *   previous GenAiTuningService.ListTuningJob][] call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1beta1.TuningJob|TuningJob}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/gen_ai_tuning_service.list_tuning_jobs.js</caption>
 * region_tag:aiplatform_v1beta1_generated_GenAiTuningService_ListTuningJobs_async
 */
  listTuningJobsAsync(
      request?: protos.google.cloud.aiplatform.v1beta1.IListTuningJobsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITuningJob>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTuningJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listTuningJobs iterate %j', request);
    return this.descriptors.page.listTuningJobs.asyncIterate(
      this.innerApiCalls['listTuningJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.ITuningJob>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @param {string} annotation
   * @returns {string} Resource name string.
   */
  annotationPath(project:string,location:string,dataset:string,dataItem:string,annotation:string) {
    return this.pathTemplates.annotationPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
      annotation: annotation,
    });
  }

  /**
   * Parse the project from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).project;
  }

  /**
   * Parse the location from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).location;
  }

  /**
   * Parse the dataset from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).dataset;
  }

  /**
   * Parse the data_item from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).data_item;
  }

  /**
   * Parse the annotation from Annotation resource.
   *
   * @param {string} annotationName
   *   A fully-qualified path representing Annotation resource.
   * @returns {string} A string representing the annotation.
   */
  matchAnnotationFromAnnotationName(annotationName: string) {
    return this.pathTemplates.annotationPathTemplate.match(annotationName).annotation;
  }

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(project:string,location:string,dataset:string,annotationSpec:string) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      annotation_spec: annotationSpec,
    });
  }

  /**
   * Parse the project from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).project;
  }

  /**
   * Parse the location from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).location;
  }

  /**
   * Parse the dataset from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).dataset;
  }

  /**
   * Parse the annotation_spec from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the annotation_spec.
   */
  matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).annotation_spec;
  }

  /**
   * Return a fully-qualified artifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  artifactPath(project:string,location:string,metadataStore:string,artifact:string) {
    return this.pathTemplates.artifactPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      artifact: artifact,
    });
  }

  /**
   * Parse the project from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
  }

  /**
   * Parse the location from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
  }

  /**
   * Parse the metadata_store from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).metadata_store;
  }

  /**
   * Parse the artifact from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromArtifactName(artifactName: string) {
    return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
  }

  /**
   * Return a fully-qualified batchPredictionJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} batch_prediction_job
   * @returns {string} Resource name string.
   */
  batchPredictionJobPath(project:string,location:string,batchPredictionJob:string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.render({
      project: project,
      location: location,
      batch_prediction_job: batchPredictionJob,
    });
  }

  /**
   * Parse the project from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).project;
  }

  /**
   * Parse the location from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).location;
  }

  /**
   * Parse the batch_prediction_job from BatchPredictionJob resource.
   *
   * @param {string} batchPredictionJobName
   *   A fully-qualified path representing BatchPredictionJob resource.
   * @returns {string} A string representing the batch_prediction_job.
   */
  matchBatchPredictionJobFromBatchPredictionJobName(batchPredictionJobName: string) {
    return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).batch_prediction_job;
  }

  /**
   * Return a fully-qualified cachedContent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cached_content
   * @returns {string} Resource name string.
   */
  cachedContentPath(project:string,location:string,cachedContent:string) {
    return this.pathTemplates.cachedContentPathTemplate.render({
      project: project,
      location: location,
      cached_content: cachedContent,
    });
  }

  /**
   * Parse the project from CachedContent resource.
   *
   * @param {string} cachedContentName
   *   A fully-qualified path representing CachedContent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCachedContentName(cachedContentName: string) {
    return this.pathTemplates.cachedContentPathTemplate.match(cachedContentName).project;
  }

  /**
   * Parse the location from CachedContent resource.
   *
   * @param {string} cachedContentName
   *   A fully-qualified path representing CachedContent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCachedContentName(cachedContentName: string) {
    return this.pathTemplates.cachedContentPathTemplate.match(cachedContentName).location;
  }

  /**
   * Parse the cached_content from CachedContent resource.
   *
   * @param {string} cachedContentName
   *   A fully-qualified path representing CachedContent resource.
   * @returns {string} A string representing the cached_content.
   */
  matchCachedContentFromCachedContentName(cachedContentName: string) {
    return this.pathTemplates.cachedContentPathTemplate.match(cachedContentName).cached_content;
  }

  /**
   * Return a fully-qualified context resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} context
   * @returns {string} Resource name string.
   */
  contextPath(project:string,location:string,metadataStore:string,context:string) {
    return this.pathTemplates.contextPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      context: context,
    });
  }

  /**
   * Parse the project from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).project;
  }

  /**
   * Parse the location from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).location;
  }

  /**
   * Parse the metadata_store from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).metadata_store;
  }

  /**
   * Parse the context from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the context.
   */
  matchContextFromContextName(contextName: string) {
    return this.pathTemplates.contextPathTemplate.match(contextName).context;
  }

  /**
   * Return a fully-qualified customJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} custom_job
   * @returns {string} Resource name string.
   */
  customJobPath(project:string,location:string,customJob:string) {
    return this.pathTemplates.customJobPathTemplate.render({
      project: project,
      location: location,
      custom_job: customJob,
    });
  }

  /**
   * Parse the project from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName).project;
  }

  /**
   * Parse the location from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName).location;
  }

  /**
   * Parse the custom_job from CustomJob resource.
   *
   * @param {string} customJobName
   *   A fully-qualified path representing CustomJob resource.
   * @returns {string} A string representing the custom_job.
   */
  matchCustomJobFromCustomJobName(customJobName: string) {
    return this.pathTemplates.customJobPathTemplate.match(customJobName).custom_job;
  }

  /**
   * Return a fully-qualified dataItem resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} data_item
   * @returns {string} Resource name string.
   */
  dataItemPath(project:string,location:string,dataset:string,dataItem:string) {
    return this.pathTemplates.dataItemPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      data_item: dataItem,
    });
  }

  /**
   * Parse the project from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
  }

  /**
   * Parse the location from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
  }

  /**
   * Parse the dataset from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
  }

  /**
   * Parse the data_item from DataItem resource.
   *
   * @param {string} dataItemName
   *   A fully-qualified path representing DataItem resource.
   * @returns {string} A string representing the data_item.
   */
  matchDataItemFromDataItemName(dataItemName: string) {
    return this.pathTemplates.dataItemPathTemplate.match(dataItemName).data_item;
  }

  /**
   * Return a fully-qualified dataLabelingJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_labeling_job
   * @returns {string} Resource name string.
   */
  dataLabelingJobPath(project:string,location:string,dataLabelingJob:string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.render({
      project: project,
      location: location,
      data_labeling_job: dataLabelingJob,
    });
  }

  /**
   * Parse the project from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).project;
  }

  /**
   * Parse the location from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).location;
  }

  /**
   * Parse the data_labeling_job from DataLabelingJob resource.
   *
   * @param {string} dataLabelingJobName
   *   A fully-qualified path representing DataLabelingJob resource.
   * @returns {string} A string representing the data_labeling_job.
   */
  matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName: string) {
    return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).data_labeling_job;
  }

  /**
   * Return a fully-qualified dataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  datasetPath(project:string,location:string,dataset:string) {
    return this.pathTemplates.datasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
  }

  /**
   * Parse the location from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
  }

  /**
   * Parse the dataset from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
  }

  /**
   * Return a fully-qualified datasetVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} dataset_version
   * @returns {string} Resource name string.
   */
  datasetVersionPath(project:string,location:string,dataset:string,datasetVersion:string) {
    return this.pathTemplates.datasetVersionPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      dataset_version: datasetVersion,
    });
  }

  /**
   * Parse the project from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(datasetVersionName).project;
  }

  /**
   * Parse the location from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(datasetVersionName).location;
  }

  /**
   * Parse the dataset from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(datasetVersionName).dataset;
  }

  /**
   * Parse the dataset_version from DatasetVersion resource.
   *
   * @param {string} datasetVersionName
   *   A fully-qualified path representing DatasetVersion resource.
   * @returns {string} A string representing the dataset_version.
   */
  matchDatasetVersionFromDatasetVersionName(datasetVersionName: string) {
    return this.pathTemplates.datasetVersionPathTemplate.match(datasetVersionName).dataset_version;
  }

  /**
   * Return a fully-qualified deploymentResourcePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment_resource_pool
   * @returns {string} Resource name string.
   */
  deploymentResourcePoolPath(project:string,location:string,deploymentResourcePool:string) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.render({
      project: project,
      location: location,
      deployment_resource_pool: deploymentResourcePool,
    });
  }

  /**
   * Parse the project from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentResourcePoolName(deploymentResourcePoolName: string) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(deploymentResourcePoolName).project;
  }

  /**
   * Parse the location from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentResourcePoolName(deploymentResourcePoolName: string) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(deploymentResourcePoolName).location;
  }

  /**
   * Parse the deployment_resource_pool from DeploymentResourcePool resource.
   *
   * @param {string} deploymentResourcePoolName
   *   A fully-qualified path representing DeploymentResourcePool resource.
   * @returns {string} A string representing the deployment_resource_pool.
   */
  matchDeploymentResourcePoolFromDeploymentResourcePoolName(deploymentResourcePoolName: string) {
    return this.pathTemplates.deploymentResourcePoolPathTemplate.match(deploymentResourcePoolName).deployment_resource_pool;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(project:string,location:string,featurestore:string,entityType:string) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName).project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName).location;
  }

  /**
   * Parse the featurestore from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the featurestore.
   */
  matchFeaturestoreFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName).featurestore;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName).entity_type;
  }

  /**
   * Return a fully-qualified exampleStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} example_store
   * @returns {string} Resource name string.
   */
  exampleStorePath(project:string,location:string,exampleStore:string) {
    return this.pathTemplates.exampleStorePathTemplate.render({
      project: project,
      location: location,
      example_store: exampleStore,
    });
  }

  /**
   * Parse the project from ExampleStore resource.
   *
   * @param {string} exampleStoreName
   *   A fully-qualified path representing ExampleStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExampleStoreName(exampleStoreName: string) {
    return this.pathTemplates.exampleStorePathTemplate.match(exampleStoreName).project;
  }

  /**
   * Parse the location from ExampleStore resource.
   *
   * @param {string} exampleStoreName
   *   A fully-qualified path representing ExampleStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExampleStoreName(exampleStoreName: string) {
    return this.pathTemplates.exampleStorePathTemplate.match(exampleStoreName).location;
  }

  /**
   * Parse the example_store from ExampleStore resource.
   *
   * @param {string} exampleStoreName
   *   A fully-qualified path representing ExampleStore resource.
   * @returns {string} A string representing the example_store.
   */
  matchExampleStoreFromExampleStoreName(exampleStoreName: string) {
    return this.pathTemplates.exampleStorePathTemplate.match(exampleStoreName).example_store;
  }

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadata_store
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(project:string,location:string,metadataStore:string,execution:string) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      metadata_store: metadataStore,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).location;
  }

  /**
   * Parse the metadata_store from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the metadata_store.
   */
  matchMetadataStoreFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).metadata_store;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).execution;
  }

  /**
   * Return a fully-qualified extension resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} extension
   * @returns {string} Resource name string.
   */
  extensionPath(project:string,location:string,extension:string) {
    return this.pathTemplates.extensionPathTemplate.render({
      project: project,
      location: location,
      extension: extension,
    });
  }

  /**
   * Parse the project from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName).project;
  }

  /**
   * Parse the location from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName).location;
  }

  /**
   * Parse the extension from Extension resource.
   *
   * @param {string} extensionName
   *   A fully-qualified path representing Extension resource.
   * @returns {string} A string representing the extension.
   */
  matchExtensionFromExtensionName(extensionName: string) {
    return this.pathTemplates.extensionPathTemplate.match(extensionName).extension;
  }

  /**
   * Return a fully-qualified featureGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @returns {string} Resource name string.
   */
  featureGroupPath(project:string,location:string,featureGroup:string) {
    return this.pathTemplates.featureGroupPathTemplate.render({
      project: project,
      location: location,
      feature_group: featureGroup,
    });
  }

  /**
   * Parse the project from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName).project;
  }

  /**
   * Parse the location from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName).location;
  }

  /**
   * Parse the feature_group from FeatureGroup resource.
   *
   * @param {string} featureGroupName
   *   A fully-qualified path representing FeatureGroup resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromFeatureGroupName(featureGroupName: string) {
    return this.pathTemplates.featureGroupPathTemplate.match(featureGroupName).feature_group;
  }

  /**
   * Return a fully-qualified featureMonitor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @param {string} feature_monitor
   * @returns {string} Resource name string.
   */
  featureMonitorPath(project:string,location:string,featureGroup:string,featureMonitor:string) {
    return this.pathTemplates.featureMonitorPathTemplate.render({
      project: project,
      location: location,
      feature_group: featureGroup,
      feature_monitor: featureMonitor,
    });
  }

  /**
   * Parse the project from FeatureMonitor resource.
   *
   * @param {string} featureMonitorName
   *   A fully-qualified path representing FeatureMonitor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureMonitorName(featureMonitorName: string) {
    return this.pathTemplates.featureMonitorPathTemplate.match(featureMonitorName).project;
  }

  /**
   * Parse the location from FeatureMonitor resource.
   *
   * @param {string} featureMonitorName
   *   A fully-qualified path representing FeatureMonitor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureMonitorName(featureMonitorName: string) {
    return this.pathTemplates.featureMonitorPathTemplate.match(featureMonitorName).location;
  }

  /**
   * Parse the feature_group from FeatureMonitor resource.
   *
   * @param {string} featureMonitorName
   *   A fully-qualified path representing FeatureMonitor resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromFeatureMonitorName(featureMonitorName: string) {
    return this.pathTemplates.featureMonitorPathTemplate.match(featureMonitorName).feature_group;
  }

  /**
   * Parse the feature_monitor from FeatureMonitor resource.
   *
   * @param {string} featureMonitorName
   *   A fully-qualified path representing FeatureMonitor resource.
   * @returns {string} A string representing the feature_monitor.
   */
  matchFeatureMonitorFromFeatureMonitorName(featureMonitorName: string) {
    return this.pathTemplates.featureMonitorPathTemplate.match(featureMonitorName).feature_monitor;
  }

  /**
   * Return a fully-qualified featureMonitorJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_group
   * @param {string} feature_monitor
   * @param {string} feature_monitor_job
   * @returns {string} Resource name string.
   */
  featureMonitorJobPath(project:string,location:string,featureGroup:string,featureMonitor:string,featureMonitorJob:string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.render({
      project: project,
      location: location,
      feature_group: featureGroup,
      feature_monitor: featureMonitor,
      feature_monitor_job: featureMonitorJob,
    });
  }

  /**
   * Parse the project from FeatureMonitorJob resource.
   *
   * @param {string} featureMonitorJobName
   *   A fully-qualified path representing FeatureMonitorJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureMonitorJobName(featureMonitorJobName: string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.match(featureMonitorJobName).project;
  }

  /**
   * Parse the location from FeatureMonitorJob resource.
   *
   * @param {string} featureMonitorJobName
   *   A fully-qualified path representing FeatureMonitorJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureMonitorJobName(featureMonitorJobName: string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.match(featureMonitorJobName).location;
  }

  /**
   * Parse the feature_group from FeatureMonitorJob resource.
   *
   * @param {string} featureMonitorJobName
   *   A fully-qualified path representing FeatureMonitorJob resource.
   * @returns {string} A string representing the feature_group.
   */
  matchFeatureGroupFromFeatureMonitorJobName(featureMonitorJobName: string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.match(featureMonitorJobName).feature_group;
  }

  /**
   * Parse the feature_monitor from FeatureMonitorJob resource.
   *
   * @param {string} featureMonitorJobName
   *   A fully-qualified path representing FeatureMonitorJob resource.
   * @returns {string} A string representing the feature_monitor.
   */
  matchFeatureMonitorFromFeatureMonitorJobName(featureMonitorJobName: string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.match(featureMonitorJobName).feature_monitor;
  }

  /**
   * Parse the feature_monitor_job from FeatureMonitorJob resource.
   *
   * @param {string} featureMonitorJobName
   *   A fully-qualified path representing FeatureMonitorJob resource.
   * @returns {string} A string representing the feature_monitor_job.
   */
  matchFeatureMonitorJobFromFeatureMonitorJobName(featureMonitorJobName: string) {
    return this.pathTemplates.featureMonitorJobPathTemplate.match(featureMonitorJobName).feature_monitor_job;
  }

  /**
   * Return a fully-qualified featureOnlineStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @returns {string} Resource name string.
   */
  featureOnlineStorePath(project:string,location:string,featureOnlineStore:string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
    });
  }

  /**
   * Parse the project from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(featureOnlineStoreName).project;
  }

  /**
   * Parse the location from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(featureOnlineStoreName).location;
  }

  /**
   * Parse the feature_online_store from FeatureOnlineStore resource.
   *
   * @param {string} featureOnlineStoreName
   *   A fully-qualified path representing FeatureOnlineStore resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureOnlineStoreName(featureOnlineStoreName: string) {
    return this.pathTemplates.featureOnlineStorePathTemplate.match(featureOnlineStoreName).feature_online_store;
  }

  /**
   * Return a fully-qualified featureView resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewPath(project:string,location:string,featureOnlineStore:string,featureView:string) {
    return this.pathTemplates.featureViewPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName).project;
  }

  /**
   * Parse the location from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName).location;
  }

  /**
   * Parse the feature_online_store from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName).feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureView resource.
   *
   * @param {string} featureViewName
   *   A fully-qualified path representing FeatureView resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewName(featureViewName: string) {
    return this.pathTemplates.featureViewPathTemplate.match(featureViewName).feature_view;
  }

  /**
   * Return a fully-qualified featureViewSync resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} feature_online_store
   * @param {string} feature_view
   * @returns {string} Resource name string.
   */
  featureViewSyncPath(project:string,location:string,featureOnlineStore:string,featureView:string) {
    return this.pathTemplates.featureViewSyncPathTemplate.render({
      project: project,
      location: location,
      feature_online_store: featureOnlineStore,
      feature_view: featureView,
    });
  }

  /**
   * Parse the project from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(featureViewSyncName).project;
  }

  /**
   * Parse the location from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(featureViewSyncName).location;
  }

  /**
   * Parse the feature_online_store from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_online_store.
   */
  matchFeatureOnlineStoreFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(featureViewSyncName).feature_online_store;
  }

  /**
   * Parse the feature_view from FeatureViewSync resource.
   *
   * @param {string} featureViewSyncName
   *   A fully-qualified path representing FeatureViewSync resource.
   * @returns {string} A string representing the feature_view.
   */
  matchFeatureViewFromFeatureViewSyncName(featureViewSyncName: string) {
    return this.pathTemplates.featureViewSyncPathTemplate.match(featureViewSyncName).feature_view;
  }

  /**
   * Return a fully-qualified featurestore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} featurestore
   * @returns {string} Resource name string.
   */
  featurestorePath(project:string,location:string,featurestore:string) {
    return this.pathTemplates.featurestorePathTemplate.render({
      project: project,
      location: location,
      featurestore: featurestore,
    });
  }

  /**
   * Parse the project from Featurest