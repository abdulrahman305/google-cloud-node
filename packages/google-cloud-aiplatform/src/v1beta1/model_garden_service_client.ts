// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/model_garden_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './model_garden_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The interface of Model Garden Service.
 * @class
 * @memberof v1beta1
 */
export class ModelGardenServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('aiplatform');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  modelGardenServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ModelGardenServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ModelGardenServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ModelGardenServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'aiplatform.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'
      ),
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      artifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'
      ),
      batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'
      ),
      cachedContentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cachedContents/{cached_content}'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'
      ),
      customJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customJobs/{custom_job}'
      ),
      dataItemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'
      ),
      dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      datasetVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}'
      ),
      deploymentResourcePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'
      ),
      exampleStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/exampleStores/{example_store}'
      ),
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'
      ),
      extensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/extensions/{extension}'
      ),
      featureGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}'
      ),
      featureMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/featureMonitors/{feature_monitor}'
      ),
      featureMonitorJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/featureMonitors/{feature_monitor}/featureMonitorJobs/{feature_monitor_job}'
      ),
      featureOnlineStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}'
      ),
      featureViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}'
      ),
      featureViewSyncPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync'
      ),
      featurestorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}'
      ),
      hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'
      ),
      indexPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexes/{index}'
      ),
      indexEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      memoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/memories/{memory}'
      ),
      metadataSchemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'
      ),
      metadataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataStores/{metadata_store}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelDeploymentMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'
      ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'
      ),
      modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'
      ),
      modelMonitorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}'
      ),
      modelMonitoringJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}'
      ),
      nasJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}'
      ),
      nasTrialDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}'
      ),
      notebookExecutionJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookExecutionJobs/{notebook_execution_job}'
      ),
      notebookRuntimePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimes/{notebook_runtime}'
      ),
      notebookRuntimeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}'
      ),
      persistentResourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/persistentResources/{persistent_resource}'
      ),
      pipelineJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationEndpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpoints/{endpoint}'
      ),
      projectLocationFeatureGroupFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}'
      ),
      projectLocationFeaturestoreEntityTypeFeaturesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'
      ),
      projectLocationPublisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/publishers/{publisher}/models/{model}'
      ),
      publisherModelPathTemplate: new this._gaxModule.PathTemplate(
        'publishers/{publisher}/models/{model}'
      ),
      ragCorpusPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}'
      ),
      ragEngineConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragEngineConfig'
      ),
      ragFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}'
      ),
      reasoningEnginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}'
      ),
      savedQueryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}'
      ),
      schedulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/schedules/{schedule}'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/sessions/{session}'
      ),
      sessionEventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine}/sessions/{session}/events/{event}'
      ),
      specialistPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/specialistPools/{specialist_pool}'
      ),
      studyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}'
      ),
      tensorboardPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}'
      ),
      tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'
      ),
      tensorboardRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'
      ),
      tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'
      ),
      trainingPipelinePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'
      ),
      trialPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/studies/{study}/trials/{trial}'
      ),
      tuningJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tuningJobs/{tuning_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listPublisherModels:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'publisherModels')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/ui/{name=projects/*/locations/*}',additional_bindings: [{get: '/v1beta1/{name=projects/*/locations/*}',}],
      },{selector: 'google.cloud.location.Locations.ListLocations',get: '/ui/{name=projects/*}/locations',additional_bindings: [{get: '/v1beta1/{name=projects/*}/locations',}],
      },{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/publishers/*/models/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:getIamPolicy',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:setIamPolicy',body: '*',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1beta1/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/v1beta1/{resource=projects/*/locations/*/featureGroups/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featurestores/*/entityTypes/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/models/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/endpoints/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/notebookRuntimeTemplates/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureOnlineStores/*/featureViews/*}:testIamPermissions',},{post: '/ui/{resource=projects/*/locations/*/featureGroups/*}:testIamPermissions',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:cancel',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:cancel',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:cancel',}],
      },{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{delete: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{delete: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{delete: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/ui/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/apps/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDeploymentJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/solvers/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/ui/{name=projects/*/locations/*}/operations',additional_bindings: [{get: '/ui/{name=projects/*/locations/*/agents/*}/operations',},{get: '/ui/{name=projects/*/locations/*/apps/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/edgeDevices/*}/operations',},{get: '/ui/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensionControllers/*}/operations',},{get: '/ui/{name=projects/*/locations/*/extensions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/ui/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tuningJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/modelMonitors/*}/operations',},{get: '/ui/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*}/operations',},{get: '/ui/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*}/operations',},{get: '/ui/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/ui/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/ui/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/ui/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/ui/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/ui/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{get: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{get: '/v1beta1/{name=projects/*/locations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/agents/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/apps/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/endpoints/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/exampleStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/extensions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/customJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/indexes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/migratableResources/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/models/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/persistentResources/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/solvers/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/schedules/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/specialistPools/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*}/operations',},{get: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*}/operations',}],
      },{selector: 'google.longrunning.Operations.WaitOperation',post: '/ui/{name=projects/*/locations/*/operations/*}:wait',additional_bindings: [{post: '/ui/{name=projects/*/locations/*/agents/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/apps/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/extensions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tuningJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{post: '/ui/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/agents/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/apps/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/savedQueries/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/annotationSpecs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/datasets/*/dataItems/*/annotations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/deploymentResourcePools/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/edgeDevices/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/endpoints/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/evaluationTasks/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/exampleStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/extensionControllers/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/extensions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featurestores/*/entityTypes/*/features/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/customJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/dataLabelingJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/hyperparameterTuningJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/indexes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/indexEndpoints/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/artifacts/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/contexts/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/metadataStores/*/executions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/modelDeploymentMonitoringJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/modelMonitors/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/migratableResources/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/models/*/evaluations/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookExecutionJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimes/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/notebookRuntimeTemplates/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/persistentResources/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragEngineConfig/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/ragCorpora/*/ragFiles/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/memories/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/reasoningEngines/*/sessions/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/studies/*/trials/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/trainingPipelines/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/pipelineJobs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/schedules/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/specialistPools/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/tensorboards/*/experiments/*/runs/*/timeSeries/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureOnlineStores/*/featureViews/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/features/*/operations/*}:wait',},{post: '/v1beta1/{name=projects/*/locations/*/featureGroups/*/featureMonitors/*/operations/*}:wait',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const deployResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeployResponse') as gax.protobuf.Type;
    const deployMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeployOperationMetadata') as gax.protobuf.Type;
    const deployPublisherModelResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeployPublisherModelResponse') as gax.protobuf.Type;
    const deployPublisherModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.DeployPublisherModelOperationMetadata') as gax.protobuf.Type;
    const exportPublisherModelResponse = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.ExportPublisherModelResponse') as gax.protobuf.Type;
    const exportPublisherModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.aiplatform.v1beta1.ExportPublisherModelOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      deploy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployResponse.decode.bind(deployResponse),
        deployMetadata.decode.bind(deployMetadata)),
      deployPublisherModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployPublisherModelResponse.decode.bind(deployPublisherModelResponse),
        deployPublisherModelMetadata.decode.bind(deployPublisherModelMetadata)),
      exportPublisherModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportPublisherModelResponse.decode.bind(exportPublisherModelResponse),
        exportPublisherModelMetadata.decode.bind(exportPublisherModelMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.aiplatform.v1beta1.ModelGardenService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.modelGardenServiceStub) {
      return this.modelGardenServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.aiplatform.v1beta1.ModelGardenService.
    this.modelGardenServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.aiplatform.v1beta1.ModelGardenService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.aiplatform.v1beta1.ModelGardenService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const modelGardenServiceStubMethods =
        ['getPublisherModel', 'listPublisherModels', 'deploy', 'deployPublisherModel', 'exportPublisherModel', 'checkPublisherModelEulaAcceptance', 'acceptPublisherModelEula'];
    for (const methodName of modelGardenServiceStubMethods) {
      const callPromise = this.modelGardenServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.modelGardenServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'aiplatform.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets a Model Garden publisher model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PublisherModel resource.
 *   Format:
 *   `publishers/{publisher}/models/{publisher_model}`
 * @param {string} [request.languageCode]
 *   Optional. The IETF BCP-47 language code representing the language in which
 *   the publisher model's text information should be written in.
 * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
 *   Optional. PublisherModel view specifying which fields to read.
 * @param {boolean} [request.isHuggingFaceModel]
 *   Optional. Boolean indicates whether the requested model is a Hugging Face
 *   model.
 * @param {string} [request.huggingFaceToken]
 *   Optional. Token used to access Hugging Face gated models.
 * @param {boolean} [request.includeEquivalentModelGardenModelDeploymentConfigs]
 *   Optional. Whether to cnclude the deployment configs from the equivalent
 *   Model Garden model if the requested model is a Hugging Face model.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.get_publisher_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_GetPublisherModel_async
 */
  getPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
        protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|undefined, {}|undefined
      ]>;
  getPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
          protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|null|undefined,
          {}|null|undefined>): void;
  getPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
          protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|null|undefined,
          {}|null|undefined>): void;
  getPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
          protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
          protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
        protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getPublisherModel request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
        protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getPublisherModel response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getPublisherModel(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel,
        protos.google.cloud.aiplatform.v1beta1.IGetPublisherModelRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getPublisherModel response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Checks the EULA acceptance status of a publisher model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project requesting access for named model. The format is
 *   `projects/{project}`.
 * @param {string} request.publisherModel
 *   Required. The name of the PublisherModel resource.
 *   Format:
 *   `publishers/{publisher}/models/{publisher_model}`, or
 *   `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModelEulaAcceptance|PublisherModelEulaAcceptance}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.check_publisher_model_eula_acceptance.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_CheckPublisherModelEulaAcceptance_async
 */
  checkPublisherModelEulaAcceptance(
      request?: protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|undefined, {}|undefined
      ]>;
  checkPublisherModelEulaAcceptance(
      request: protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|null|undefined,
          {}|null|undefined>): void;
  checkPublisherModelEulaAcceptance(
      request: protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|null|undefined,
          {}|null|undefined>): void;
  checkPublisherModelEulaAcceptance(
      request?: protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('checkPublisherModelEulaAcceptance request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('checkPublisherModelEulaAcceptance response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.checkPublisherModelEulaAcceptance(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.ICheckPublisherModelEulaAcceptanceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('checkPublisherModelEulaAcceptance response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Accepts the EULA acceptance status of a publisher model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project requesting access for named model. The format is
 *   `projects/{project}`.
 * @param {string} request.publisherModel
 *   Required. The name of the PublisherModel resource.
 *   Format:
 *   `publishers/{publisher}/models/{publisher_model}`, or
 *   `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModelEulaAcceptance|PublisherModelEulaAcceptance}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.accept_publisher_model_eula.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_AcceptPublisherModelEula_async
 */
  acceptPublisherModelEula(
      request?: protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|undefined, {}|undefined
      ]>;
  acceptPublisherModelEula(
      request: protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|null|undefined,
          {}|null|undefined>): void;
  acceptPublisherModelEula(
      request: protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest,
      callback: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|null|undefined,
          {}|null|undefined>): void;
  acceptPublisherModelEula(
      request?: protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
          protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('acceptPublisherModelEula request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('acceptPublisherModelEula response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.acceptPublisherModelEula(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.aiplatform.v1beta1.IPublisherModelEulaAcceptance,
        protos.google.cloud.aiplatform.v1beta1.IAcceptPublisherModelEulaRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('acceptPublisherModelEula response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Deploys a model to a new endpoint.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.publisherModelName
 *   The Model Garden model to deploy.
 *   Format:
 *   `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
 *   `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`.
 * @param {string} request.huggingFaceModelId
 *   The Hugging Face model to deploy.
 *   Format: Hugging Face model ID like `google/gemma-2-2b-it`.
 * @param {google.cloud.aiplatform.v1beta1.DeployRequest.CustomModel} request.customModel
 *   The custom model to deploy from a Google Cloud Storage URI.
 * @param {string} request.destination
 *   Required. The resource name of the Location to deploy the model in.
 *   Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.aiplatform.v1beta1.DeployRequest.ModelConfig} [request.modelConfig]
 *   Optional. The model config to use for the deployment.
 *   If not specified, the default model config will be used.
 * @param {google.cloud.aiplatform.v1beta1.DeployRequest.EndpointConfig} [request.endpointConfig]
 *   Optional. The endpoint config to use for the deployment.
 *   If not specified, the default endpoint config will be used.
 * @param {google.cloud.aiplatform.v1beta1.DeployRequest.DeployConfig} [request.deployConfig]
 *   Optional. The deploy config to use for the deployment.
 *   If not specified, the default deploy config will be used.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.deploy.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_Deploy_async
 */
  deploy(
      request?: protos.google.cloud.aiplatform.v1beta1.IDeployRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deploy(
      request: protos.google.cloud.aiplatform.v1beta1.IDeployRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deploy(
      request: protos.google.cloud.aiplatform.v1beta1.IDeployRequest,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deploy(
      request?: protos.google.cloud.aiplatform.v1beta1.IDeployRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'destination': request.destination ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deploy response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deploy request %j', request);
    return this.innerApiCalls.deploy(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployResponse, protos.google.cloud.aiplatform.v1beta1.IDeployOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deploy response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deploy()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.deploy.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_Deploy_async
 */
  async checkDeployProgress(name: string): Promise<LROperation<protos.google.cloud.aiplatform.v1beta1.DeployResponse, protos.google.cloud.aiplatform.v1beta1.DeployOperationMetadata>>{
    this._log.info('deploy long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deploy, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.aiplatform.v1beta1.DeployResponse, protos.google.cloud.aiplatform.v1beta1.DeployOperationMetadata>;
  }
/**
 * Deploys publisher models.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.model
 *   Required. The model to deploy.
 *   Format:
 *   1. `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
 *   `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`.
 *   2. Hugging Face model ID like `google/gemma-2-2b-it`.
 *   3. Custom model Google Cloud Storage URI like `gs://bucket`.
 *   4. Custom model zip file like `https://example.com/a.zip`.
 * @param {string} request.destination
 *   Required. The resource name of the Location to deploy the model in.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} [request.endpointDisplayName]
 *   Optional. The user-specified display name of the endpoint. If not set, a
 *   default name will be used.
 * @param {google.cloud.aiplatform.v1beta1.DedicatedResources} [request.dedicatedResources]
 *   Optional. The dedicated resources to use for the endpoint. If not set, the
 *   default resources will be used.
 * @param {string} [request.modelDisplayName]
 *   Optional. The user-specified display name of the uploaded model. If not
 *   set, a default name will be used.
 * @param {string} [request.huggingFaceAccessToken]
 *   Optional. The Hugging Face read access token used to access the model
 *   artifacts of gated models.
 * @param {boolean} [request.acceptEula]
 *   Optional. Whether the user accepts the End User License Agreement (EULA)
 *   for the model.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.deploy_publisher_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_DeployPublisherModel_async
 * @deprecated DeployPublisherModel is deprecated and may be removed in a future version.
 */
  deployPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deployPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelRequest,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'destination': request.destination ?? '',
    });
    this.initialize().catch(err => {throw err});
    this.warn('DEP$ModelGardenService-$DeployPublisherModel','DeployPublisherModel is deprecated and may be removed in a future version.', 'DeprecationWarning');
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deployPublisherModel response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deployPublisherModel request %j', request);
    return this.innerApiCalls.deployPublisherModel(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IDeployPublisherModelOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deployPublisherModel response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deployPublisherModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.deploy_publisher_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_DeployPublisherModel_async
 * @deprecated DeployPublisherModel is deprecated and may be removed in a future version.
 */
  async checkDeployPublisherModelProgress(name: string): Promise<LROperation<protos.google.cloud.aiplatform.v1beta1.DeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.DeployPublisherModelOperationMetadata>>{
    this.warn('DEP$ModelGardenService-$checkDeployPublisherModelProgress','checkDeployPublisherModelProgress is deprecated and may be removed in a future version.', 'DeprecationWarning');
    this._log.info('deployPublisherModel long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deployPublisherModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.aiplatform.v1beta1.DeployPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.DeployPublisherModelOperationMetadata>;
  }
/**
 * Exports a publisher model to a user provided Google Cloud Storage bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PublisherModel resource.
 *   Format:
 *   `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
 *   `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`
 * @param {google.cloud.aiplatform.v1beta1.GcsDestination} request.destination
 *   Required. The target where we are exporting the model weights to
 * @param {string} request.parent
 *   Required. The Location to export the model weights from
 *   Format: `projects/{project}/locations/{location}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.export_publisher_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_ExportPublisherModel_async
 */
  exportPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportPublisherModel(
      request: protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelRequest,
      callback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportPublisherModel(
      request?: protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('exportPublisherModel response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('exportPublisherModel request %j', request);
    return this.innerApiCalls.exportPublisherModel(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.IExportPublisherModelOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('exportPublisherModel response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `exportPublisherModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.export_publisher_model.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_ExportPublisherModel_async
 */
  async checkExportPublisherModelProgress(name: string): Promise<LROperation<protos.google.cloud.aiplatform.v1beta1.ExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.ExportPublisherModelOperationMetadata>>{
    this._log.info('exportPublisherModel long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportPublisherModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.aiplatform.v1beta1.ExportPublisherModelResponse, protos.google.cloud.aiplatform.v1beta1.ExportPublisherModelOperationMetadata>;
  }
 /**
 * Lists publisher models in Model Garden.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the Publisher from which to list the PublisherModels.
 *   Format: `publishers/{publisher}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
 *   call.
 * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
 *   Optional. PublisherModel view specifying which fields to read.
 * @param {string} [request.orderBy]
 *   Optional. A comma-separated list of fields to order by, sorted in ascending
 *   order. Use "desc" after a field name for descending.
 * @param {string} [request.languageCode]
 *   Optional. The IETF BCP-47 language code representing the language in which
 *   the publisher models' text information should be written in. If not set, by
 *   default English (en).
 * @param {boolean} [request.listAllVersions]
 *   Optional. List all publisher model versions if the flag is set to true.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPublisherModelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPublisherModels(
      request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel[],
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      ]>;
  listPublisherModels(
      request: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel>): void;
  listPublisherModels(
      request: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      callback: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel>): void;
  listPublisherModels(
      request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel>,
      callback?: PaginationCallback<
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
          protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse|null|undefined,
          protos.google.cloud.aiplatform.v1beta1.IPublisherModel>):
      Promise<[
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel[],
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse|null|undefined,
      protos.google.cloud.aiplatform.v1beta1.IPublisherModel>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listPublisherModels values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listPublisherModels request %j', request);
    return this.innerApiCalls
      .listPublisherModels(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.aiplatform.v1beta1.IPublisherModel[],
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest|null,
        protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsResponse
      ]) => {
        this._log.info('listPublisherModels values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listPublisherModels`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the Publisher from which to list the PublisherModels.
 *   Format: `publishers/{publisher}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
 *   call.
 * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
 *   Optional. PublisherModel view specifying which fields to read.
 * @param {string} [request.orderBy]
 *   Optional. A comma-separated list of fields to order by, sorted in ascending
 *   order. Use "desc" after a field name for descending.
 * @param {string} [request.languageCode]
 *   Optional. The IETF BCP-47 language code representing the language in which
 *   the publisher models' text information should be written in. If not set, by
 *   default English (en).
 * @param {boolean} [request.listAllVersions]
 *   Optional. List all publisher model versions if the flag is set to true.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPublisherModelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPublisherModelsStream(
      request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPublisherModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPublisherModels stream %j', request);
    return this.descriptors.page.listPublisherModels.createStream(
      this.innerApiCalls.listPublisherModels as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPublisherModels`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the Publisher from which to list the PublisherModels.
 *   Format: `publishers/{publisher}`
 * @param {string} [request.filter]
 *   Optional. The standard list filter.
 * @param {number} [request.pageSize]
 *   Optional. The standard list page size.
 * @param {string} [request.pageToken]
 *   Optional. The standard list page token.
 *   Typically obtained via
 *   {@link protos.google.cloud.aiplatform.v1beta1.ListPublisherModelsResponse.next_page_token|ListPublisherModelsResponse.next_page_token}
 *   of the previous
 *   {@link protos.google.cloud.aiplatform.v1beta1.ModelGardenService.ListPublisherModels|ModelGardenService.ListPublisherModels}
 *   call.
 * @param {google.cloud.aiplatform.v1beta1.PublisherModelView} [request.view]
 *   Optional. PublisherModel view specifying which fields to read.
 * @param {string} [request.orderBy]
 *   Optional. A comma-separated list of fields to order by, sorted in ascending
 *   order. Use "desc" after a field name for descending.
 * @param {string} [request.languageCode]
 *   Optional. The IETF BCP-47 language code representing the language in which
 *   the publisher models' text information should be written in. If not set, by
 *   default English (en).
 * @param {boolean} [request.listAllVersions]
 *   Optional. List all publisher model versions if the flag is set to true.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.aiplatform.v1beta1.PublisherModel|PublisherModel}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/model_garden_service.list_publisher_models.js</caption>
 * region_tag:aiplatform_v1beta1_generated_ModelGardenService_ListPublisherModels_async
 */
  listPublisherModelsAsync(
      request?: protos.google.cloud.aiplatform.v1beta1.IListPublisherModelsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IPublisherModel>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPublisherModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPublisherModels iterate %j', request);
    return this.descriptors.page.listPublisherModels.asyncIterate(
      this.innerApiCalls['listPublisherModels'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.aiplatform.v1beta1.IPublisherModel>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @para