// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as notebookserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.NotebookServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'aiplatform.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = notebookserviceModule.v1beta1.NotebookServiceClient.servicePath;
                assert.strictEqual(servicePath, 'aiplatform.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = notebookserviceModule.v1beta1.NotebookServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'aiplatform.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'aiplatform.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'aiplatform.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new notebookserviceModule.v1beta1.NotebookServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'aiplatform.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new notebookserviceModule.v1beta1.NotebookServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'aiplatform.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new notebookserviceModule.v1beta1.NotebookServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = notebookserviceModule.v1beta1.NotebookServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.notebookServiceStub, undefined);
            await client.initialize();
            assert(client.notebookServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.notebookServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.notebookServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getNotebookRuntimeTemplate', () => {
        it('invokes getNotebookRuntimeTemplate without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()
            );
            client.innerApiCalls.getNotebookRuntimeTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.getNotebookRuntimeTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntimeTemplate without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()
            );
            client.innerApiCalls.getNotebookRuntimeTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNotebookRuntimeTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntimeTemplate with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getNotebookRuntimeTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNotebookRuntimeTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntimeTemplate with closed client', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getNotebookRuntimeTemplate(request), expectedError);
        });
    });

    describe('updateNotebookRuntimeTemplate', () => {
        it('invokes updateNotebookRuntimeTemplate without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest()
            );
            request.notebookRuntimeTemplate ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest', ['notebookRuntimeTemplate', 'name']);
            request.notebookRuntimeTemplate.name = defaultValue1;
            const expectedHeaderRequestParams = `notebook_runtime_template.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()
            );
            client.innerApiCalls.updateNotebookRuntimeTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.updateNotebookRuntimeTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateNotebookRuntimeTemplate without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest()
            );
            request.notebookRuntimeTemplate ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest', ['notebookRuntimeTemplate', 'name']);
            request.notebookRuntimeTemplate.name = defaultValue1;
            const expectedHeaderRequestParams = `notebook_runtime_template.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()
            );
            client.innerApiCalls.updateNotebookRuntimeTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateNotebookRuntimeTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateNotebookRuntimeTemplate with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest()
            );
            request.notebookRuntimeTemplate ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest', ['notebookRuntimeTemplate', 'name']);
            request.notebookRuntimeTemplate.name = defaultValue1;
            const expectedHeaderRequestParams = `notebook_runtime_template.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateNotebookRuntimeTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateNotebookRuntimeTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateNotebookRuntimeTemplate with closed client', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest()
            );
            request.notebookRuntimeTemplate ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpdateNotebookRuntimeTemplateRequest', ['notebookRuntimeTemplate', 'name']);
            request.notebookRuntimeTemplate.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateNotebookRuntimeTemplate(request), expectedError);
        });
    });

    describe('getNotebookRuntime', () => {
        it('invokes getNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()
            );
            client.innerApiCalls.getNotebookRuntime = stubSimpleCall(expectedResponse);
            const [response] = await client.getNotebookRuntime(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()
            );
            client.innerApiCalls.getNotebookRuntime = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNotebookRuntime(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookRuntime|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntime with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getNotebookRuntime = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookRuntime with closed client', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getNotebookRuntime(request), expectedError);
        });
    });

    describe('getNotebookExecutionJob', () => {
        it('invokes getNotebookExecutionJob without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()
            );
            client.innerApiCalls.getNotebookExecutionJob = stubSimpleCall(expectedResponse);
            const [response] = await client.getNotebookExecutionJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookExecutionJob without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()
            );
            client.innerApiCalls.getNotebookExecutionJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNotebookExecutionJob(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookExecutionJob with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getNotebookExecutionJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNotebookExecutionJob(request), expectedError);
            const actualRequest = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotebookExecutionJob with closed client', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.GetNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getNotebookExecutionJob(request), expectedError);
        });
    });

    describe('createNotebookRuntimeTemplate', () => {
        it('invokes createNotebookRuntimeTemplate without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createNotebookRuntimeTemplate = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createNotebookRuntimeTemplate(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookRuntimeTemplate without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createNotebookRuntimeTemplate = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createNotebookRuntimeTemplate(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate, protos.google.cloud.aiplatform.v1beta1.ICreateNotebookRuntimeTemplateOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate, protos.google.cloud.aiplatform.v1beta1.ICreateNotebookRuntimeTemplateOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookRuntimeTemplate with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createNotebookRuntimeTemplate = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createNotebookRuntimeTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookRuntimeTemplate with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookRuntimeTemplateRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createNotebookRuntimeTemplate = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createNotebookRuntimeTemplate(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateNotebookRuntimeTemplateProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateNotebookRuntimeTemplateProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateNotebookRuntimeTemplateProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateNotebookRuntimeTemplateProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteNotebookRuntimeTemplate', () => {
        it('invokes deleteNotebookRuntimeTemplate without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookRuntimeTemplate = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteNotebookRuntimeTemplate(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntimeTemplate without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookRuntimeTemplate = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNotebookRuntimeTemplate(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntimeTemplate with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookRuntimeTemplate = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteNotebookRuntimeTemplate(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntimeTemplate with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeTemplateRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookRuntimeTemplate = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteNotebookRuntimeTemplate(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntimeTemplate as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteNotebookRuntimeTemplateProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteNotebookRuntimeTemplateProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteNotebookRuntimeTemplateProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteNotebookRuntimeTemplateProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('assignNotebookRuntime', () => {
        it('invokes assignNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.assignNotebookRuntime = stubLongRunningCall(expectedResponse);
            const [operation] = await client.assignNotebookRuntime(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes assignNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.assignNotebookRuntime = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.assignNotebookRuntime(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookRuntime, protos.google.cloud.aiplatform.v1beta1.IAssignNotebookRuntimeOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookRuntime, protos.google.cloud.aiplatform.v1beta1.IAssignNotebookRuntimeOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes assignNotebookRuntime with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.assignNotebookRuntime = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.assignNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes assignNotebookRuntime with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.AssignNotebookRuntimeRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.assignNotebookRuntime = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.assignNotebookRuntime(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.assignNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkAssignNotebookRuntimeProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAssignNotebookRuntimeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAssignNotebookRuntimeProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAssignNotebookRuntimeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteNotebookRuntime', () => {
        it('invokes deleteNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookRuntime = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteNotebookRuntime(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookRuntime = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNotebookRuntime(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntime with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookRuntime = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookRuntime with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookRuntime = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteNotebookRuntime(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteNotebookRuntimeProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteNotebookRuntimeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteNotebookRuntimeProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteNotebookRuntimeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('upgradeNotebookRuntime', () => {
        it('invokes upgradeNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.upgradeNotebookRuntime = stubLongRunningCall(expectedResponse);
            const [operation] = await client.upgradeNotebookRuntime(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes upgradeNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.upgradeNotebookRuntime = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.upgradeNotebookRuntime(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.IUpgradeNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IUpgradeNotebookRuntimeOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.IUpgradeNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IUpgradeNotebookRuntimeOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes upgradeNotebookRuntime with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeNotebookRuntime = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.upgradeNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes upgradeNotebookRuntime with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.UpgradeNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeNotebookRuntime = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.upgradeNotebookRuntime(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.upgradeNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpgradeNotebookRuntimeProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpgradeNotebookRuntimeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpgradeNotebookRuntimeProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpgradeNotebookRuntimeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('startNotebookRuntime', () => {
        it('invokes startNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.startNotebookRuntime = stubLongRunningCall(expectedResponse);
            const [operation] = await client.startNotebookRuntime(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.startNotebookRuntime = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startNotebookRuntime(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.IStartNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IStartNotebookRuntimeOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.IStartNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IStartNotebookRuntimeOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startNotebookRuntime with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.startNotebookRuntime = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.startNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startNotebookRuntime with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StartNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.startNotebookRuntime = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.startNotebookRuntime(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkStartNotebookRuntimeProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStartNotebookRuntimeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStartNotebookRuntimeProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStartNotebookRuntimeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('stopNotebookRuntime', () => {
        it('invokes stopNotebookRuntime without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.stopNotebookRuntime = stubLongRunningCall(expectedResponse);
            const [operation] = await client.stopNotebookRuntime(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopNotebookRuntime without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.stopNotebookRuntime = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.stopNotebookRuntime(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.IStopNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IStopNotebookRuntimeOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.IStopNotebookRuntimeResponse, protos.google.cloud.aiplatform.v1beta1.IStopNotebookRuntimeOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopNotebookRuntime with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.stopNotebookRuntime = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.stopNotebookRuntime(request), expectedError);
            const actualRequest = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopNotebookRuntime with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.StopNotebookRuntimeRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.stopNotebookRuntime = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.stopNotebookRuntime(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopNotebookRuntime as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkStopNotebookRuntimeProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStopNotebookRuntimeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStopNotebookRuntimeProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStopNotebookRuntimeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createNotebookExecutionJob', () => {
        it('invokes createNotebookExecutionJob without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createNotebookExecutionJob = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createNotebookExecutionJob(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookExecutionJob without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createNotebookExecutionJob = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createNotebookExecutionJob(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob, protos.google.cloud.aiplatform.v1beta1.ICreateNotebookExecutionJobOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob, protos.google.cloud.aiplatform.v1beta1.ICreateNotebookExecutionJobOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookExecutionJob with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createNotebookExecutionJob = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createNotebookExecutionJob(request), expectedError);
            const actualRequest = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotebookExecutionJob with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.CreateNotebookExecutionJobRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createNotebookExecutionJob = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createNotebookExecutionJob(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateNotebookExecutionJobProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateNotebookExecutionJobProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateNotebookExecutionJobProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateNotebookExecutionJobProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteNotebookExecutionJob', () => {
        it('invokes deleteNotebookExecutionJob without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookExecutionJob = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteNotebookExecutionJob(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookExecutionJob without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteNotebookExecutionJob = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNotebookExecutionJob(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookExecutionJob with call error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookExecutionJob = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteNotebookExecutionJob(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotebookExecutionJob with LRO error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.DeleteNotebookExecutionJobRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotebookExecutionJob = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteNotebookExecutionJob(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotebookExecutionJob as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteNotebookExecutionJobProgress without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteNotebookExecutionJobProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteNotebookExecutionJobProgress with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteNotebookExecutionJobProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listNotebookRuntimeTemplates', () => {
        it('invokes listNotebookRuntimeTemplates without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
            ];
            client.innerApiCalls.listNotebookRuntimeTemplates = stubSimpleCall(expectedResponse);
            const [response] = await client.listNotebookRuntimeTemplates(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimeTemplates without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
            ];
            client.innerApiCalls.listNotebookRuntimeTemplates = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNotebookRuntimeTemplates(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimeTemplates with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listNotebookRuntimeTemplates = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNotebookRuntimeTemplates(request), expectedError);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimeTemplates as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimeTemplatesStream without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
            ];
            client.descriptors.page.listNotebookRuntimeTemplates.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNotebookRuntimeTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNotebookRuntimeTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookRuntimeTemplates, request));
            assert(
                (client.descriptors.page.listNotebookRuntimeTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listNotebookRuntimeTemplatesStream with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookRuntimeTemplates.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNotebookRuntimeTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNotebookRuntimeTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookRuntimeTemplates, request));
            assert(
                (client.descriptors.page.listNotebookRuntimeTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listNotebookRuntimeTemplates without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntimeTemplate()),
            ];
            client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate[] = [];
            const iterable = client.listNotebookRuntimeTemplatesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listNotebookRuntimeTemplates with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimeTemplatesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNotebookRuntimeTemplatesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.aiplatform.v1beta1.INotebookRuntimeTemplate[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookRuntimeTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listNotebookRuntimes', () => {
        it('invokes listNotebookRuntimes without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
            ];
            client.innerApiCalls.listNotebookRuntimes = stubSimpleCall(expectedResponse);
            const [response] = await client.listNotebookRuntimes(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimes without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
            ];
            client.innerApiCalls.listNotebookRuntimes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNotebookRuntimes(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookRuntime[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimes with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listNotebookRuntimes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNotebookRuntimes(request), expectedError);
            const actualRequest = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookRuntimes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookRuntimesStream without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
            ];
            client.descriptors.page.listNotebookRuntimes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNotebookRuntimesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookRuntime[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookRuntime) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNotebookRuntimes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookRuntimes, request));
            assert(
                (client.descriptors.page.listNotebookRuntimes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listNotebookRuntimesStream with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookRuntimes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNotebookRuntimesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookRuntime[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookRuntime) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNotebookRuntimes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookRuntimes, request));
            assert(
                (client.descriptors.page.listNotebookRuntimes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listNotebookRuntimes without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookRuntime()),
            ];
            client.descriptors.page.listNotebookRuntimes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.aiplatform.v1beta1.INotebookRuntime[] = [];
            const iterable = client.listNotebookRuntimesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookRuntimes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookRuntimes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listNotebookRuntimes with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookRuntimesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookRuntimes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNotebookRuntimesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.aiplatform.v1beta1.INotebookRuntime[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookRuntimes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookRuntimes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listNotebookExecutionJobs', () => {
        it('invokes listNotebookExecutionJobs without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
            ];
            client.innerApiCalls.listNotebookExecutionJobs = stubSimpleCall(expectedResponse);
            const [response] = await client.listNotebookExecutionJobs(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookExecutionJobs without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
            ];
            client.innerApiCalls.listNotebookExecutionJobs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNotebookExecutionJobs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookExecutionJobs with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listNotebookExecutionJobs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNotebookExecutionJobs(request), expectedError);
            const actualRequest = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotebookExecutionJobs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotebookExecutionJobsStream without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
            ];
            client.descriptors.page.listNotebookExecutionJobs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNotebookExecutionJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNotebookExecutionJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookExecutionJobs, request));
            assert(
                (client.descriptors.page.listNotebookExecutionJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listNotebookExecutionJobsStream with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookExecutionJobs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNotebookExecutionJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob[] = [];
                stream.on('data', (response: protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNotebookExecutionJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotebookExecutionJobs, request));
            assert(
                (client.descriptors.page.listNotebookExecutionJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listNotebookExecutionJobs without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
              generateSampleMessage(new protos.google.cloud.aiplatform.v1beta1.NotebookExecutionJob()),
            ];
            client.descriptors.page.listNotebookExecutionJobs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob[] = [];
            const iterable = client.listNotebookExecutionJobsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookExecutionJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookExecutionJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listNotebookExecutionJobs with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.aiplatform.v1beta1.ListNotebookExecutionJobsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listNotebookExecutionJobs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNotebookExecutionJobsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.aiplatform.v1beta1.INotebookExecutionJob[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNotebookExecutionJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotebookExecutionJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('annotation', async () => {
            const fakePath = "/rendered/path/annotation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
                data_item: "dataItemValue",
                annotation: "annotationValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.annotationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationPath', () => {
                const result = client.annotationPath("projectValue", "locationValue", "datasetValue", "dataItemValue", "annotationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnnotationName', () => {
                const result = client.matchProjectFromAnnotationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationName', () => {
                const result = client.matchLocationFromAnnotationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromAnnotationName', () => {
                const result = client.matchDatasetFromAnnotationName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataItemFromAnnotationName', () => {
                const result = client.matchDataItemFromAnnotationName(fakePath);
                assert.strictEqual(result, "dataItemValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationFromAnnotationName', () => {
                const result = client.matchAnnotationFromAnnotationName(fakePath);
                assert.strictEqual(result, "annotationValue");
                assert((client.pathTemplates.annotationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('annotationSpec', async () => {
            const fakePath = "/rendered/path/annotationSpec";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
                annotation_spec: "annotationSpecValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.annotationSpecPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.annotationSpecPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('annotationSpecPath', () => {
                const result = client.annotationSpecPath("projectValue", "locationValue", "datasetValue", "annotationSpecValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.annotationSpecPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnnotationSpecName', () => {
                const result = client.matchProjectFromAnnotationSpecName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnnotationSpecName', () => {
                const result = client.matchLocationFromAnnotationSpecName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromAnnotationSpecName', () => {
                const result = client.matchDatasetFromAnnotationSpecName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnnotationSpecFromAnnotationSpecName', () => {
                const result = client.matchAnnotationSpecFromAnnotationSpecName(fakePath);
                assert.strictEqual(result, "annotationSpecValue");
                assert((client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('artifact', async () => {
            const fakePath = "/rendered/path/artifact";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                metadata_store: "metadataStoreValue",
                artifact: "artifactValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.artifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.artifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('artifactPath', () => {
                const result = client.artifactPath("projectValue", "locationValue", "metadataStoreValue", "artifactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.artifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromArtifactName', () => {
                const result = client.matchProjectFromArtifactName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.artifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromArtifactName', () => {
                const result = client.matchLocationFromArtifactName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.artifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetadataStoreFromArtifactName', () => {
                const result = client.matchMetadataStoreFromArtifactName(fakePath);
                assert.strictEqual(result, "metadataStoreValue");
                assert((client.pathTemplates.artifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchArtifactFromArtifactName', () => {
                const result = client.matchArtifactFromArtifactName(fakePath);
                assert.strictEqual(result, "artifactValue");
                assert((client.pathTemplates.artifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('batchPredictionJob', async () => {
            const fakePath = "/rendered/path/batchPredictionJob";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                batch_prediction_job: "batchPredictionJobValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.batchPredictionJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.batchPredictionJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('batchPredictionJobPath', () => {
                const result = client.batchPredictionJobPath("projectValue", "locationValue", "batchPredictionJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.batchPredictionJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBatchPredictionJobName', () => {
                const result = client.matchProjectFromBatchPredictionJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.batchPredictionJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromBatchPredictionJobName', () => {
                const result = client.matchLocationFromBatchPredictionJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.batchPredictionJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBatchPredictionJobFromBatchPredictionJobName', () => {
                const result = client.matchBatchPredictionJobFromBatchPredictionJobName(fakePath);
                assert.strictEqual(result, "batchPredictionJobValue");
                assert((client.pathTemplates.batchPredictionJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cachedContent', async () => {
            const fakePath = "/rendered/path/cachedContent";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cached_content: "cachedContentValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cachedContentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cachedContentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cachedContentPath', () => {
                const result = client.cachedContentPath("projectValue", "locationValue", "cachedContentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cachedContentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCachedContentName', () => {
                const result = client.matchProjectFromCachedContentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cachedContentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCachedContentName', () => {
                const result = client.matchLocationFromCachedContentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cachedContentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCachedContentFromCachedContentName', () => {
                const result = client.matchCachedContentFromCachedContentName(fakePath);
                assert.strictEqual(result, "cachedContentValue");
                assert((client.pathTemplates.cachedContentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('context', async () => {
            const fakePath = "/rendered/path/context";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                metadata_store: "metadataStoreValue",
                context: "contextValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.contextPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.contextPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('contextPath', () => {
                const result = client.contextPath("projectValue", "locationValue", "metadataStoreValue", "contextValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.contextPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromContextName', () => {
                const result = client.matchProjectFromContextName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.contextPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromContextName', () => {
                const result = client.matchLocationFromContextName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.contextPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetadataStoreFromContextName', () => {
                const result = client.matchMetadataStoreFromContextName(fakePath);
                assert.strictEqual(result, "metadataStoreValue");
                assert((client.pathTemplates.contextPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchContextFromContextName', () => {
                const result = client.matchContextFromContextName(fakePath);
                assert.strictEqual(result, "contextValue");
                assert((client.pathTemplates.contextPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customJob', async () => {
            const fakePath = "/rendered/path/customJob";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                custom_job: "customJobValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customJobPath', () => {
                const result = client.customJobPath("projectValue", "locationValue", "customJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCustomJobName', () => {
                const result = client.matchProjectFromCustomJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.customJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCustomJobName', () => {
                const result = client.matchLocationFromCustomJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.customJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomJobFromCustomJobName', () => {
                const result = client.matchCustomJobFromCustomJobName(fakePath);
                assert.strictEqual(result, "customJobValue");
                assert((client.pathTemplates.customJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataItem', async () => {
            const fakePath = "/rendered/path/dataItem";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
                data_item: "dataItemValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dataItemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataItemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataItemPath', () => {
                const result = client.dataItemPath("projectValue", "locationValue", "datasetValue", "dataItemValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataItemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDataItemName', () => {
                const result = client.matchProjectFromDataItemName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dataItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataItemName', () => {
                const result = client.matchLocationFromDataItemName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromDataItemName', () => {
                const result = client.matchDatasetFromDataItemName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.dataItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataItemFromDataItemName', () => {
                const result = client.matchDataItemFromDataItemName(fakePath);
                assert.strictEqual(result, "dataItemValue");
                assert((client.pathTemplates.dataItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataLabelingJob', async () => {
            const fakePath = "/rendered/path/dataLabelingJob";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                data_labeling_job: "dataLabelingJobValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dataLabelingJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataLabelingJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataLabelingJobPath', () => {
                const result = client.dataLabelingJobPath("projectValue", "locationValue", "dataLabelingJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataLabelingJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDataLabelingJobName', () => {
                const result = client.matchProjectFromDataLabelingJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataLabelingJobName', () => {
                const result = client.matchLocationFromDataLabelingJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataLabelingJobFromDataLabelingJobName', () => {
                const result = client.matchDataLabelingJobFromDataLabelingJobName(fakePath);
                assert.strictEqual(result, "dataLabelingJobValue");
                assert((client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataset', async () => {
            const fakePath = "/rendered/path/dataset";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.datasetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.datasetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('datasetPath', () => {
                const result = client.datasetPath("projectValue", "locationValue", "datasetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.datasetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDatasetName', () => {
                const result = client.matchProjectFromDatasetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.datasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDatasetName', () => {
                const result = client.matchLocationFromDatasetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.datasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromDatasetName', () => {
                const result = client.matchDatasetFromDatasetName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.datasetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('datasetVersion', async () => {
            const fakePath = "/rendered/path/datasetVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                dataset: "datasetValue",
                dataset_version: "datasetVersionValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.datasetVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.datasetVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('datasetVersionPath', () => {
                const result = client.datasetVersionPath("projectValue", "locationValue", "datasetValue", "datasetVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.datasetVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDatasetVersionName', () => {
                const result = client.matchProjectFromDatasetVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.datasetVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDatasetVersionName', () => {
                const result = client.matchLocationFromDatasetVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.datasetVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetFromDatasetVersionName', () => {
                const result = client.matchDatasetFromDatasetVersionName(fakePath);
                assert.strictEqual(result, "datasetValue");
                assert((client.pathTemplates.datasetVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatasetVersionFromDatasetVersionName', () => {
                const result = client.matchDatasetVersionFromDatasetVersionName(fakePath);
                assert.strictEqual(result, "datasetVersionValue");
                assert((client.pathTemplates.datasetVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('deploymentResourcePool', async () => {
            const fakePath = "/rendered/path/deploymentResourcePool";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                deployment_resource_pool: "deploymentResourcePoolValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.deploymentResourcePoolPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.deploymentResourcePoolPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('deploymentResourcePoolPath', () => {
                const result = client.deploymentResourcePoolPath("projectValue", "locationValue", "deploymentResourcePoolValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.deploymentResourcePoolPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDeploymentResourcePoolName', () => {
                const result = client.matchProjectFromDeploymentResourcePoolName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.deploymentResourcePoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDeploymentResourcePoolName', () => {
                const result = client.matchLocationFromDeploymentResourcePoolName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.deploymentResourcePoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeploymentResourcePoolFromDeploymentResourcePoolName', () => {
                const result = client.matchDeploymentResourcePoolFromDeploymentResourcePoolName(fakePath);
                assert.strictEqual(result, "deploymentResourcePoolValue");
                assert((client.pathTemplates.deploymentResourcePoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('entityType', async () => {
            const fakePath = "/rendered/path/entityType";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                featurestore: "featurestoreValue",
                entity_type: "entityTypeValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.entityTypePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.entityTypePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('entityTypePath', () => {
                const result = client.entityTypePath("projectValue", "locationValue", "featurestoreValue", "entityTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.entityTypePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEntityTypeName', () => {
                const result = client.matchProjectFromEntityTypeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.entityTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEntityTypeName', () => {
                const result = client.matchLocationFromEntityTypeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.entityTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeaturestoreFromEntityTypeName', () => {
                const result = client.matchFeaturestoreFromEntityTypeName(fakePath);
                assert.strictEqual(result, "featurestoreValue");
                assert((client.pathTemplates.entityTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEntityTypeFromEntityTypeName', () => {
                const result = client.matchEntityTypeFromEntityTypeName(fakePath);
                assert.strictEqual(result, "entityTypeValue");
                assert((client.pathTemplates.entityTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('exampleStore', async () => {
            const fakePath = "/rendered/path/exampleStore";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                example_store: "exampleStoreValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.exampleStorePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.exampleStorePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('exampleStorePath', () => {
                const result = client.exampleStorePath("projectValue", "locationValue", "exampleStoreValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.exampleStorePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExampleStoreName', () => {
                const result = client.matchProjectFromExampleStoreName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.exampleStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExampleStoreName', () => {
                const result = client.matchLocationFromExampleStoreName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.exampleStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExampleStoreFromExampleStoreName', () => {
                const result = client.matchExampleStoreFromExampleStoreName(fakePath);
                assert.strictEqual(result, "exampleStoreValue");
                assert((client.pathTemplates.exampleStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('execution', async () => {
            const fakePath = "/rendered/path/execution";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                metadata_store: "metadataStoreValue",
                execution: "executionValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.executionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.executionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('executionPath', () => {
                const result = client.executionPath("projectValue", "locationValue", "metadataStoreValue", "executionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.executionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExecutionName', () => {
                const result = client.matchProjectFromExecutionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExecutionName', () => {
                const result = client.matchLocationFromExecutionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetadataStoreFromExecutionName', () => {
                const result = client.matchMetadataStoreFromExecutionName(fakePath);
                assert.strictEqual(result, "metadataStoreValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExecutionFromExecutionName', () => {
                const result = client.matchExecutionFromExecutionName(fakePath);
                assert.strictEqual(result, "executionValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('extension', async () => {
            const fakePath = "/rendered/path/extension";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                extension: "extensionValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.extensionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.extensionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('extensionPath', () => {
                const result = client.extensionPath("projectValue", "locationValue", "extensionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.extensionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExtensionName', () => {
                const result = client.matchProjectFromExtensionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.extensionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExtensionName', () => {
                const result = client.matchLocationFromExtensionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.extensionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExtensionFromExtensionName', () => {
                const result = client.matchExtensionFromExtensionName(fakePath);
                assert.strictEqual(result, "extensionValue");
                assert((client.pathTemplates.extensionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureGroup', async () => {
            const fakePath = "/rendered/path/featureGroup";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_group: "featureGroupValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureGroupPath', () => {
                const result = client.featureGroupPath("projectValue", "locationValue", "featureGroupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureGroupName', () => {
                const result = client.matchProjectFromFeatureGroupName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureGroupName', () => {
                const result = client.matchLocationFromFeatureGroupName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureGroupFromFeatureGroupName', () => {
                const result = client.matchFeatureGroupFromFeatureGroupName(fakePath);
                assert.strictEqual(result, "featureGroupValue");
                assert((client.pathTemplates.featureGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureMonitor', async () => {
            const fakePath = "/rendered/path/featureMonitor";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_group: "featureGroupValue",
                feature_monitor: "featureMonitorValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureMonitorPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureMonitorPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureMonitorPath', () => {
                const result = client.featureMonitorPath("projectValue", "locationValue", "featureGroupValue", "featureMonitorValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureMonitorPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureMonitorName', () => {
                const result = client.matchProjectFromFeatureMonitorName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureMonitorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureMonitorName', () => {
                const result = client.matchLocationFromFeatureMonitorName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureMonitorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureGroupFromFeatureMonitorName', () => {
                const result = client.matchFeatureGroupFromFeatureMonitorName(fakePath);
                assert.strictEqual(result, "featureGroupValue");
                assert((client.pathTemplates.featureMonitorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureMonitorFromFeatureMonitorName', () => {
                const result = client.matchFeatureMonitorFromFeatureMonitorName(fakePath);
                assert.strictEqual(result, "featureMonitorValue");
                assert((client.pathTemplates.featureMonitorPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureMonitorJob', async () => {
            const fakePath = "/rendered/path/featureMonitorJob";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_group: "featureGroupValue",
                feature_monitor: "featureMonitorValue",
                feature_monitor_job: "featureMonitorJobValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureMonitorJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureMonitorJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureMonitorJobPath', () => {
                const result = client.featureMonitorJobPath("projectValue", "locationValue", "featureGroupValue", "featureMonitorValue", "featureMonitorJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureMonitorJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureMonitorJobName', () => {
                const result = client.matchProjectFromFeatureMonitorJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureMonitorJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureMonitorJobName', () => {
                const result = client.matchLocationFromFeatureMonitorJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureMonitorJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureGroupFromFeatureMonitorJobName', () => {
                const result = client.matchFeatureGroupFromFeatureMonitorJobName(fakePath);
                assert.strictEqual(result, "featureGroupValue");
                assert((client.pathTemplates.featureMonitorJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureMonitorFromFeatureMonitorJobName', () => {
                const result = client.matchFeatureMonitorFromFeatureMonitorJobName(fakePath);
                assert.strictEqual(result, "featureMonitorValue");
                assert((client.pathTemplates.featureMonitorJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureMonitorJobFromFeatureMonitorJobName', () => {
                const result = client.matchFeatureMonitorJobFromFeatureMonitorJobName(fakePath);
                assert.strictEqual(result, "featureMonitorJobValue");
                assert((client.pathTemplates.featureMonitorJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureOnlineStore', async () => {
            const fakePath = "/rendered/path/featureOnlineStore";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_online_store: "featureOnlineStoreValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureOnlineStorePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureOnlineStorePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureOnlineStorePath', () => {
                const result = client.featureOnlineStorePath("projectValue", "locationValue", "featureOnlineStoreValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureOnlineStorePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureOnlineStoreName', () => {
                const result = client.matchProjectFromFeatureOnlineStoreName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureOnlineStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureOnlineStoreName', () => {
                const result = client.matchLocationFromFeatureOnlineStoreName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureOnlineStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureOnlineStoreFromFeatureOnlineStoreName', () => {
                const result = client.matchFeatureOnlineStoreFromFeatureOnlineStoreName(fakePath);
                assert.strictEqual(result, "featureOnlineStoreValue");
                assert((client.pathTemplates.featureOnlineStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureView', async () => {
            const fakePath = "/rendered/path/featureView";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_online_store: "featureOnlineStoreValue",
                feature_view: "featureViewValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureViewPath', () => {
                const result = client.featureViewPath("projectValue", "locationValue", "featureOnlineStoreValue", "featureViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureViewName', () => {
                const result = client.matchProjectFromFeatureViewName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureViewName', () => {
                const result = client.matchLocationFromFeatureViewName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureOnlineStoreFromFeatureViewName', () => {
                const result = client.matchFeatureOnlineStoreFromFeatureViewName(fakePath);
                assert.strictEqual(result, "featureOnlineStoreValue");
                assert((client.pathTemplates.featureViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureViewFromFeatureViewName', () => {
                const result = client.matchFeatureViewFromFeatureViewName(fakePath);
                assert.strictEqual(result, "featureViewValue");
                assert((client.pathTemplates.featureViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featureViewSync', async () => {
            const fakePath = "/rendered/path/featureViewSync";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                feature_online_store: "featureOnlineStoreValue",
                feature_view: "featureViewValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featureViewSyncPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featureViewSyncPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featureViewSyncPath', () => {
                const result = client.featureViewSyncPath("projectValue", "locationValue", "featureOnlineStoreValue", "featureViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featureViewSyncPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeatureViewSyncName', () => {
                const result = client.matchProjectFromFeatureViewSyncName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featureViewSyncPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeatureViewSyncName', () => {
                const result = client.matchLocationFromFeatureViewSyncName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featureViewSyncPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureOnlineStoreFromFeatureViewSyncName', () => {
                const result = client.matchFeatureOnlineStoreFromFeatureViewSyncName(fakePath);
                assert.strictEqual(result, "featureOnlineStoreValue");
                assert((client.pathTemplates.featureViewSyncPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeatureViewFromFeatureViewSyncName', () => {
                const result = client.matchFeatureViewFromFeatureViewSyncName(fakePath);
                assert.strictEqual(result, "featureViewValue");
                assert((client.pathTemplates.featureViewSyncPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('featurestore', async () => {
            const fakePath = "/rendered/path/featurestore";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                featurestore: "featurestoreValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.featurestorePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.featurestorePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('featurestorePath', () => {
                const result = client.featurestorePath("projectValue", "locationValue", "featurestoreValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.featurestorePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFeaturestoreName', () => {
                const result = client.matchProjectFromFeaturestoreName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.featurestorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFeaturestoreName', () => {
                const result = client.matchLocationFromFeaturestoreName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.featurestorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeaturestoreFromFeaturestoreName', () => {
                const result = client.matchFeaturestoreFromFeaturestoreName(fakePath);
                assert.strictEqual(result, "featurestoreValue");
                assert((client.pathTemplates.featurestorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hyperparameterTuningJob', async () => {
            const fakePath = "/rendered/path/hyperparameterTuningJob";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                hyperparameter_tuning_job: "hyperparameterTuningJobValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.hyperparameterTuningJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hyperparameterTuningJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hyperparameterTuningJobPath', () => {
                const result = client.hyperparameterTuningJobPath("projectValue", "locationValue", "hyperparameterTuningJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hyperparameterTuningJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromHyperparameterTuningJobName', () => {
                const result = client.matchProjectFromHyperparameterTuningJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.hyperparameterTuningJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromHyperparameterTuningJobName', () => {
                const result = client.matchLocationFromHyperparameterTuningJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.hyperparameterTuningJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHyperparameterTuningJobFromHyperparameterTuningJobName', () => {
                const result = client.matchHyperparameterTuningJobFromHyperparameterTuningJobName(fakePath);
                assert.strictEqual(result, "hyperparameterTuningJobValue");
                assert((client.pathTemplates.hyperparameterTuningJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('index', async () => {
            const fakePath = "/rendered/path/index";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                index: "indexValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.indexPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.indexPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('indexPath', () => {
                const result = client.indexPath("projectValue", "locationValue", "indexValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.indexPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromIndexName', () => {
                const result = client.matchProjectFromIndexName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.indexPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromIndexName', () => {
                const result = client.matchLocationFromIndexName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.indexPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIndexFromIndexName', () => {
                const result = client.matchIndexFromIndexName(fakePath);
                assert.strictEqual(result, "indexValue");
                assert((client.pathTemplates.indexPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('indexEndpoint', async () => {
            const fakePath = "/rendered/path/indexEndpoint";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                index_endpoint: "indexEndpointValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.indexEndpointPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.indexEndpointPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('indexEndpointPath', () => {
                const result = client.indexEndpointPath("projectValue", "locationValue", "indexEndpointValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.indexEndpointPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromIndexEndpointName', () => {
                const result = client.matchProjectFromIndexEndpointName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromIndexEndpointName', () => {
                const result = client.matchLocationFromIndexEndpointName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIndexEndpointFromIndexEndpointName', () => {
                const result = client.matchIndexEndpointFromIndexEndpointName(fakePath);
                assert.strictEqual(result, "indexEndpointValue");
                assert((client.pathTemplates.indexEndpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new notebookserviceModule.v1beta1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
 