// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v2/security_center_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './security_center_client_config.json';
const version = require('../../../package.json').version;

/**
 *  V2 APIs for Security Center service.
 * @class
 * @memberof v2
 */
export class SecurityCenterClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('securitycenter');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  securityCenterStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SecurityCenterClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SecurityCenterClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SecurityCenterClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'securitycenter.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderAssetSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/assets/{asset}/securityMarks'
      ),
      folderConstraintNamePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/policies/{constraint_name}'
      ),
      folderLocationBigQueryExportsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/bigQueryExports/{export}'
      ),
      folderLocationMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/muteConfigs/{mute_config}'
      ),
      folderLocationNotificationConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/notificationConfigs/{notification_config}'
      ),
      folderMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/muteConfigs/{mute_config}'
      ),
      folderSourcePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}'
      ),
      folderSourceFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      folderSourceFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/findings/{finding}/securityMarks'
      ),
      folderSourceFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/findings/{finding}'
      ),
      folderSourceLocationFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/locations/{location}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      folderSourceLocationFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/locations/{location}/findings/{finding}/securityMarks'
      ),
      folderSourceLocationFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sources/{source}/locations/{location}/findings/{finding}'
      ),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      organizationAssetSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/assets/{asset}/securityMarks'
      ),
      organizationConstraintNamePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/policies/{constraint_name}'
      ),
      organizationLocationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}'
      ),
      organizationLocationBigQueryExportsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/bigQueryExports/{export}'
      ),
      organizationLocationMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/muteConfigs/{mute_config}'
      ),
      organizationLocationNotificationConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/notificationConfigs/{notification_config}'
      ),
      organizationLocationResourceValueConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/resourceValueConfigs/{resource_value_config}'
      ),
      organizationLocationSimluationValuedResourcesPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/simulations/{simluation}/valuedResources/{valued_resource}'
      ),
      organizationLocationSimulationValuedResourceAttackPathsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/simulations/{simulation}/valuedResources/{valued_resource}/attackPaths/{attack_path}'
      ),
      organizationLocationSimulationsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/simulations/{simluation}'
      ),
      organizationMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/muteConfigs/{mute_config}'
      ),
      organizationResourceValueConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/resourceValueConfigs/{resource_value_config}'
      ),
      organizationSimulationValuedResourceAttackPathsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}/attackPaths/{attack_path}'
      ),
      organizationSimulationValuedResourcesPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}'
      ),
      organizationSimulationsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/simulations/{simulation}'
      ),
      organizationSourcePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}'
      ),
      organizationSourceFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      organizationSourceFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/findings/{finding}/securityMarks'
      ),
      organizationSourceFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/findings/{finding}'
      ),
      organizationSourceLocationFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/locations/{location}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      organizationSourceLocationFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/locations/{location}/findings/{finding}/securityMarks'
      ),
      organizationSourceLocationFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sources/{source}/locations/{location}/findings/{finding}'
      ),
      projectAssetSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/assets/{asset}/securityMarks'
      ),
      projectConstraintNamePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/policies/{constraint_name}'
      ),
      projectLocationBigQueryExportsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/bigQueryExports/{export}'
      ),
      projectLocationMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/muteConfigs/{mute_config}'
      ),
      projectLocationNotificationConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/notificationConfigs/{notification_config}'
      ),
      projectMuteConfigsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/muteConfigs/{mute_config}'
      ),
      projectSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}'
      ),
      projectSourceFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      projectSourceFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/findings/{finding}/securityMarks'
      ),
      projectSourceFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/findings/{finding}'
      ),
      projectSourceLocationFindingExternalsystemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/locations/{location}/findings/{finding}/externalSystems/{externalsystem}'
      ),
      projectSourceLocationFindingSecurityMarksPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/locations/{location}/findings/{finding}/securityMarks'
      ),
      projectSourceLocationFindingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sources/{source}/locations/{location}/findings/{finding}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      groupFindings:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'groupByResults'),
      listAttackPaths:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'attackPaths'),
      listBigQueryExports:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'bigQueryExports'),
      listFindings:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'listFindingsResults'),
      listMuteConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'muteConfigs'),
      listNotificationConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'notificationConfigs'),
      listResourceValueConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'resourceValueConfigs'),
      listSources:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sources'),
      listValuedResources:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'valuedResources')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.CancelOperation',post: '/v2/{name=organizations/*/operations/*}:cancel',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v2/{name=organizations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v2/{name=organizations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v2/{name=organizations/*/operations}',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const bulkMuteFindingsResponse = protoFilesRoot.lookup(
      '.google.cloud.securitycenter.v2.BulkMuteFindingsResponse') as gax.protobuf.Type;
    const bulkMuteFindingsMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      bulkMuteFindings: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        bulkMuteFindingsResponse.decode.bind(bulkMuteFindingsResponse),
        bulkMuteFindingsMetadata.decode.bind(bulkMuteFindingsMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.securitycenter.v2.SecurityCenter', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.securityCenterStub) {
      return this.securityCenterStub;
    }

    // Put together the "service stub" for
    // google.cloud.securitycenter.v2.SecurityCenter.
    this.securityCenterStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.securitycenter.v2.SecurityCenter') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.securitycenter.v2.SecurityCenter,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const securityCenterStubMethods =
        ['batchCreateResourceValueConfigs', 'bulkMuteFindings', 'createBigQueryExport', 'createFinding', 'createMuteConfig', 'createNotificationConfig', 'createSource', 'deleteBigQueryExport', 'deleteMuteConfig', 'deleteNotificationConfig', 'deleteResourceValueConfig', 'getBigQueryExport', 'getSimulation', 'getValuedResource', 'getIamPolicy', 'getMuteConfig', 'getNotificationConfig', 'getResourceValueConfig', 'getSource', 'groupFindings', 'listAttackPaths', 'listBigQueryExports', 'listFindings', 'listMuteConfigs', 'listNotificationConfigs', 'listResourceValueConfigs', 'listSources', 'listValuedResources', 'setFindingState', 'setIamPolicy', 'setMute', 'testIamPermissions', 'updateBigQueryExport', 'updateExternalSystem', 'updateFinding', 'updateMuteConfig', 'updateNotificationConfig', 'updateResourceValueConfig', 'updateSecurityMarks', 'updateSource'];
    for (const methodName of securityCenterStubMethods) {
      const callPromise = this.securityCenterStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.securityCenterStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'securitycenter.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'securitycenter.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a ResourceValueConfig for an organization. Maps user's tags to
 * difference resource values for use by the attack path simulation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the new ResourceValueConfig's parent.
 *   The parent field in the CreateResourceValueConfigRequest
 *   messages must either be empty or match this field.
 * @param {number[]} request.requests
 *   Required. The resource value configs to be created.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.BatchCreateResourceValueConfigsResponse|BatchCreateResourceValueConfigsResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.batch_create_resource_value_configs.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_BatchCreateResourceValueConfigs_async
 */
  batchCreateResourceValueConfigs(
      request?: protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|undefined, {}|undefined
      ]>;
  batchCreateResourceValueConfigs(
      request: protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateResourceValueConfigs(
      request: protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateResourceValueConfigs(
      request?: protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
          protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('batchCreateResourceValueConfigs request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('batchCreateResourceValueConfigs response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.batchCreateResourceValueConfigs(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsResponse,
        protos.google.cloud.securitycenter.v2.IBatchCreateResourceValueConfigsRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('batchCreateResourceValueConfigs response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a BigQuery export.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource of the new BigQuery export. Its
 *   format is `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {google.cloud.securitycenter.v2.BigQueryExport} request.bigQueryExport
 *   Required. The BigQuery export being created.
 * @param {string} request.bigQueryExportId
 *   Required. Unique identifier provided by the client within the parent scope.
 *   It must consist of only lowercase letters, numbers, and hyphens, must start
 *   with a letter, must end with either a letter or a number, and must be 63
 *   characters or less.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.create_big_query_export.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_CreateBigQueryExport_async
 */
  createBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|undefined, {}|undefined
      ]>;
  createBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  createBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  createBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createBigQueryExport request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createBigQueryExport response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createBigQueryExport(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.ICreateBigQueryExportRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createBigQueryExport response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a finding in a location. The corresponding source must exist for
 * finding creation to succeed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the new finding's parent. The following list
 *   shows some examples of the format:
 *   +
 *   `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 * @param {string} request.findingId
 *   Required. Unique identifier provided by the client within the parent scope.
 *   It must be alphanumeric and less than or equal to 32 characters and
 *   greater than 0 characters in length.
 * @param {google.cloud.securitycenter.v2.Finding} request.finding
 *   Required. The Finding being created. The name and security_marks will be
 *   ignored as they are both output only fields on this resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Finding|Finding}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.create_finding.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_CreateFinding_async
 */
  createFinding(
      request?: protos.google.cloud.securitycenter.v2.ICreateFindingRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ICreateFindingRequest|undefined, {}|undefined
      ]>;
  createFinding(
      request: protos.google.cloud.securitycenter.v2.ICreateFindingRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ICreateFindingRequest|null|undefined,
          {}|null|undefined>): void;
  createFinding(
      request: protos.google.cloud.securitycenter.v2.ICreateFindingRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ICreateFindingRequest|null|undefined,
          {}|null|undefined>): void;
  createFinding(
      request?: protos.google.cloud.securitycenter.v2.ICreateFindingRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ICreateFindingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ICreateFindingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ICreateFindingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createFinding request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ICreateFindingRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createFinding response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createFinding(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ICreateFindingRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createFinding response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a mute config.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the new mute configs's parent. Its format is
 *   `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {google.cloud.securitycenter.v2.MuteConfig} request.muteConfig
 *   Required. The mute config being created.
 * @param {string} request.muteConfigId
 *   Required. Unique identifier provided by the client within the parent scope.
 *   It must consist of only lowercase letters, numbers, and hyphens, must start
 *   with a letter, must end with either a letter or a number, and must be 63
 *   characters or less.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.create_mute_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_CreateMuteConfig_async
 */
  createMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|undefined, {}|undefined
      ]>;
  createMuteConfig(
      request: protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createMuteConfig(
      request: protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    this._log.info('createMuteConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createMuteConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createMuteConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.ICreateMuteConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createMuteConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a notification config.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the new notification config's parent. Its format
 *   is `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {string} request.configId
 *   Required.
 *   Unique identifier provided by the client within the parent scope.
 *   It must be between 1 and 128 characters and contain alphanumeric
 *   characters, underscores, or hyphens only.
 * @param {google.cloud.securitycenter.v2.NotificationConfig} request.notificationConfig
 *   Required. The notification config being created. The name and the service
 *   account will be ignored as they are both output only fields on this
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.create_notification_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_CreateNotificationConfig_async
 */
  createNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|undefined, {}|undefined
      ]>;
  createNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createNotificationConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createNotificationConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createNotificationConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.ICreateNotificationConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createNotificationConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the new source's parent. Its format should be
 *   `organizations/[organization_id]`.
 * @param {google.cloud.securitycenter.v2.Source} request.source
 *   Required. The Source being created, only the display_name and description
 *   will be used. All other fields will be ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Source|Source}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.create_source.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_CreateSource_async
 */
  createSource(
      request?: protos.google.cloud.securitycenter.v2.ICreateSourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.ICreateSourceRequest|undefined, {}|undefined
      ]>;
  createSource(
      request: protos.google.cloud.securitycenter.v2.ICreateSourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.ICreateSourceRequest|null|undefined,
          {}|null|undefined>): void;
  createSource(
      request: protos.google.cloud.securitycenter.v2.ICreateSourceRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.ICreateSourceRequest|null|undefined,
          {}|null|undefined>): void;
  createSource(
      request?: protos.google.cloud.securitycenter.v2.ICreateSourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.ICreateSourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.ICreateSourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.ICreateSourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createSource request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.ICreateSourceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createSource response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createSource(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.ICreateSourceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createSource response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes an existing BigQuery export.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the BigQuery export to delete. The following list
 *   shows some examples of the format:
 *
 *   +
 *   `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
 *   + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
 *   + `projects/{project}/locations/{location}/bigQueryExports/{export_id}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.delete_big_query_export.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_DeleteBigQueryExport_async
 */
  deleteBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|undefined, {}|undefined
      ]>;
  deleteBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteBigQueryExport request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteBigQueryExport response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteBigQueryExport(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteBigQueryExportRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteBigQueryExport response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes an existing mute config. If no location is specified, default is
 * global.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the mute config to delete. The following list shows some
 *   examples of the format:
 *
 *   + `organizations/{organization}/muteConfigs/{config_id}`
 *   +
 *   `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
 *   + `folders/{folder}/muteConfigs/{config_id}`
 *   + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
 *   + `projects/{project}/muteConfigs/{config_id}`
 *   + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.delete_mute_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_DeleteMuteConfig_async
 */
  deleteMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|undefined, {}|undefined
      ]>;
  deleteMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    this._log.info('deleteMuteConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteMuteConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteMuteConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteMuteConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteMuteConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a notification config.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the notification config to delete. The following list
 *   shows some examples of the format:
 *
 *   +
 *   `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
 *   +
 *   `folders/[folder_id]/locations/[location_id]notificationConfigs/[config_id]`
 *   +
 *   `projects/[project_id]/locations/[location_id]notificationConfigs/[config_id]`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.delete_notification_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_DeleteNotificationConfig_async
 */
  deleteNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|undefined, {}|undefined
      ]>;
  deleteNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteNotificationConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteNotificationConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteNotificationConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteNotificationConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteNotificationConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a ResourceValueConfig.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the ResourceValueConfig to delete
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.delete_resource_value_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_DeleteResourceValueConfig_async
 */
  deleteResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|undefined, {}|undefined
      ]>;
  deleteResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteResourceValueConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteResourceValueConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteResourceValueConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securitycenter.v2.IDeleteResourceValueConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteResourceValueConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a BigQuery export.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the BigQuery export to retrieve. The following list shows
 *   some examples of the format:
 *
 *   +
 *   `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
 *   + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
 *   + `projects/{project}locations/{location}//bigQueryExports/{export_id}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_big_query_export.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetBigQueryExport_async
 */
  getBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|undefined, {}|undefined
      ]>;
  getBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  getBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  getBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getBigQueryExport request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getBigQueryExport response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getBigQueryExport(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IGetBigQueryExportRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getBigQueryExport response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Get the simulation by name or the latest simulation for the given
 * organization.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The organization name or simulation name of this simulation
 *
 *   Valid format:
 *   `organizations/{organization}/simulations/latest`
 *   `organizations/{organization}/simulations/{simulation}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Simulation|Simulation}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_simulation.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetSimulation_async
 */
  getSimulation(
      request?: protos.google.cloud.securitycenter.v2.IGetSimulationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISimulation,
        protos.google.cloud.securitycenter.v2.IGetSimulationRequest|undefined, {}|undefined
      ]>;
  getSimulation(
      request: protos.google.cloud.securitycenter.v2.IGetSimulationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISimulation,
          protos.google.cloud.securitycenter.v2.IGetSimulationRequest|null|undefined,
          {}|null|undefined>): void;
  getSimulation(
      request: protos.google.cloud.securitycenter.v2.IGetSimulationRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISimulation,
          protos.google.cloud.securitycenter.v2.IGetSimulationRequest|null|undefined,
          {}|null|undefined>): void;
  getSimulation(
      request?: protos.google.cloud.securitycenter.v2.IGetSimulationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.ISimulation,
          protos.google.cloud.securitycenter.v2.IGetSimulationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.ISimulation,
          protos.google.cloud.securitycenter.v2.IGetSimulationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISimulation,
        protos.google.cloud.securitycenter.v2.IGetSimulationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getSimulation request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.ISimulation,
        protos.google.cloud.securitycenter.v2.IGetSimulationRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getSimulation response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getSimulation(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.ISimulation,
        protos.google.cloud.securitycenter.v2.IGetSimulationRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getSimulation response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Get the valued resource by name
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of this valued resource
 *
 *   Valid format:
 *   `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.ValuedResource|ValuedResource}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_valued_resource.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetValuedResource_async
 */
  getValuedResource(
      request?: protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IValuedResource,
        protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|undefined, {}|undefined
      ]>;
  getValuedResource(
      request: protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IValuedResource,
          protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|null|undefined,
          {}|null|undefined>): void;
  getValuedResource(
      request: protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IValuedResource,
          protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|null|undefined,
          {}|null|undefined>): void;
  getValuedResource(
      request?: protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IValuedResource,
          protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IValuedResource,
          protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IValuedResource,
        protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getValuedResource request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IValuedResource,
        protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getValuedResource response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getValuedResource(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IValuedResource,
        protos.google.cloud.securitycenter.v2.IGetValuedResourceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getValuedResource response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets the access control policy on the specified Source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.GetPolicyOptions} request.options
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_iam_policy.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetIamPolicy_async
 */
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getIamPolicy request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getIamPolicy response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getIamPolicy(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getIamPolicy response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a mute config. If no location is specified, default is
 * global.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the mute config to retrieve. The following list shows
 *   some examples of the format:
 *
 *   + `organizations/{organization}/muteConfigs/{config_id}`
 *   +
 *   `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
 *   + `folders/{folder}/muteConfigs/{config_id}`
 *   + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
 *   + `projects/{project}/muteConfigs/{config_id}`
 *   + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_mute_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetMuteConfig_async
 */
  getMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|undefined, {}|undefined
      ]>;
  getMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    this._log.info('getMuteConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getMuteConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getMuteConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IGetMuteConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getMuteConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a notification config.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the notification config to get. The following list shows
 *   some examples of the format:
 *
 *   +
 *   `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
 *   +
 *   `folders/[folder_id]/locations/[location_id]/notificationConfigs/[config_id]`
 *   +
 *   `projects/[project_id]/locations/[location_id]/notificationConfigs/[config_id]`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_notification_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetNotificationConfig_async
 */
  getNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|undefined, {}|undefined
      ]>;
  getNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getNotificationConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getNotificationConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getNotificationConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IGetNotificationConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getNotificationConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a ResourceValueConfig.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource value config to retrieve. Its format is
 *   organizations/{organization}/resourceValueConfigs/{config_id}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.ResourceValueConfig|ResourceValueConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_resource_value_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetResourceValueConfig_async
 */
  getResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|undefined, {}|undefined
      ]>;
  getResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getResourceValueConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getResourceValueConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getResourceValueConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IGetResourceValueConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getResourceValueConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Relative resource name of the source. Its format is
 *   `organizations/[organization_id]/source/[source_id]`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Source|Source}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.get_source.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GetSource_async
 */
  getSource(
      request?: protos.google.cloud.securitycenter.v2.IGetSourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IGetSourceRequest|undefined, {}|undefined
      ]>;
  getSource(
      request: protos.google.cloud.securitycenter.v2.IGetSourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IGetSourceRequest|null|undefined,
          {}|null|undefined>): void;
  getSource(
      request: protos.google.cloud.securitycenter.v2.IGetSourceRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IGetSourceRequest|null|undefined,
          {}|null|undefined>): void;
  getSource(
      request?: protos.google.cloud.securitycenter.v2.IGetSourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IGetSourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IGetSourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IGetSourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getSource request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IGetSourceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getSource response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getSource(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IGetSourceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getSource response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates the state of a finding. If no location is specified, finding is
 * assumed to be in global
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The [relative resource
 *   name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
 *   of the finding. If no location is specified, finding is assumed to be in
 *   global. The following list shows some examples:
 *
 *   +
 *   `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 *   + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 *   + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 * @param {google.cloud.securitycenter.v2.Finding.State} request.state
 *   Required. The desired State of the finding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Finding|Finding}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.set_finding_state.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_SetFindingState_async
 */
  setFindingState(
      request?: protos.google.cloud.securitycenter.v2.ISetFindingStateRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|undefined, {}|undefined
      ]>;
  setFindingState(
      request: protos.google.cloud.securitycenter.v2.ISetFindingStateRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|null|undefined,
          {}|null|undefined>): void;
  setFindingState(
      request: protos.google.cloud.securitycenter.v2.ISetFindingStateRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|null|undefined,
          {}|null|undefined>): void;
  setFindingState(
      request?: protos.google.cloud.securitycenter.v2.ISetFindingStateRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('setFindingState request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('setFindingState response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.setFindingState(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetFindingStateRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('setFindingState response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Sets the access control policy on the specified Source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being specified.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.Policy} request.policy
 *   REQUIRED: The complete policy to be applied to the `resource`. The size of
 *   the policy is limited to a few 10s of KB. An empty policy is a
 *   valid policy but certain Cloud Platform services (such as Projects)
 *   might reject them.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *   the fields in the mask will be modified. If no mask is provided, the
 *   following default mask is used:
 *
 *   `paths: "bindings, etag"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.set_iam_policy.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_SetIamPolicy_async
 */
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('setIamPolicy request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('setIamPolicy response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.setIamPolicy(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('setIamPolicy response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates the mute state of a finding. If no location is specified, finding
 * is assumed to be in global
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The [relative resource
 *   name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
 *   of the finding. If no location is specified, finding is assumed to be in
 *   global. The following list shows some examples:
 *
 *   +
 *   `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 *   + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 *   + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
 *   +
 *   `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
 * @param {google.cloud.securitycenter.v2.Finding.Mute} request.mute
 *   Required. The desired state of the Mute.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Finding|Finding}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.set_mute.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_SetMute_async
 */
  setMute(
      request?: protos.google.cloud.securitycenter.v2.ISetMuteRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetMuteRequest|undefined, {}|undefined
      ]>;
  setMute(
      request: protos.google.cloud.securitycenter.v2.ISetMuteRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetMuteRequest|null|undefined,
          {}|null|undefined>): void;
  setMute(
      request: protos.google.cloud.securitycenter.v2.ISetMuteRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetMuteRequest|null|undefined,
          {}|null|undefined>): void;
  setMute(
      request?: protos.google.cloud.securitycenter.v2.ISetMuteRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetMuteRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.ISetMuteRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetMuteRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('setMute request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetMuteRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('setMute response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.setMute(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.ISetMuteRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('setMute response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Returns the permissions that a caller has on the specified source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.test_iam_permissions.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_TestIamPermissions_async
 */
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('testIamPermissions request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('testIamPermissions response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.testIamPermissions(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('testIamPermissions response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a BigQuery export.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.BigQueryExport} request.bigQueryExport
 *   Required. The BigQuery export being updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 *   If empty all mutable fields will be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_big_query_export.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateBigQueryExport_async
 */
  updateBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|undefined, {}|undefined
      ]>;
  updateBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  updateBigQueryExport(
      request: protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|null|undefined,
          {}|null|undefined>): void;
  updateBigQueryExport(
      request?: protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IBigQueryExport,
          protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'big_query_export.name': request.bigQueryExport!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateBigQueryExport request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateBigQueryExport response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateBigQueryExport(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IBigQueryExport,
        protos.google.cloud.securitycenter.v2.IUpdateBigQueryExportRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateBigQueryExport response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates external system. This is for a given finding. If no location is
 * specified, finding is assumed to be in global
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.ExternalSystem} request.externalSystem
 *   Required. The external system resource to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The FieldMask to use when updating the external system resource.
 *
 *   If empty all mutable fields will be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.ExternalSystem|ExternalSystem}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_external_system.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateExternalSystem_async
 */
  updateExternalSystem(
      request?: protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IExternalSystem,
        protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|undefined, {}|undefined
      ]>;
  updateExternalSystem(
      request: protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IExternalSystem,
          protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|null|undefined,
          {}|null|undefined>): void;
  updateExternalSystem(
      request: protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IExternalSystem,
          protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|null|undefined,
          {}|null|undefined>): void;
  updateExternalSystem(
      request?: protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IExternalSystem,
          protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IExternalSystem,
          protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IExternalSystem,
        protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'external_system.name': request.externalSystem!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateExternalSystem request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IExternalSystem,
        protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateExternalSystem response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateExternalSystem(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IExternalSystem,
        protos.google.cloud.securitycenter.v2.IUpdateExternalSystemRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateExternalSystem response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates or updates a finding. If no location is specified, finding is
 * assumed to be in global. The corresponding source must exist for a finding
 * creation to succeed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.Finding} request.finding
 *   Required. The finding resource to update or create if it does not already
 *   exist. parent, security_marks, and update_time will be ignored.
 *
 *   In the case of creation, the finding id portion of the name must be
 *   alphanumeric and less than or equal to 32 characters and greater than 0
 *   characters in length.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The FieldMask to use when updating the finding resource. This field should
 *   not be specified when creating a finding.
 *
 *   When updating a finding, an empty mask is treated as updating all mutable
 *   fields and replacing source_properties.  Individual source_properties can
 *   be added/updated by using "source_properties.<property key>" in the field
 *   mask.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Finding|Finding}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_finding.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateFinding_async
 */
  updateFinding(
      request?: protos.google.cloud.securitycenter.v2.IUpdateFindingRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|undefined, {}|undefined
      ]>;
  updateFinding(
      request: protos.google.cloud.securitycenter.v2.IUpdateFindingRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|null|undefined,
          {}|null|undefined>): void;
  updateFinding(
      request: protos.google.cloud.securitycenter.v2.IUpdateFindingRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|null|undefined,
          {}|null|undefined>): void;
  updateFinding(
      request?: protos.google.cloud.securitycenter.v2.IUpdateFindingRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IFinding,
          protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'finding.name': request.finding!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateFinding request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateFinding response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateFinding(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IFinding,
        protos.google.cloud.securitycenter.v2.IUpdateFindingRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateFinding response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a mute config. If no location is specified, default is
 * global.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.MuteConfig} request.muteConfig
 *   Required. The mute config being updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 *   If empty all mutable fields will be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_mute_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateMuteConfig_async
 */
  updateMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|undefined, {}|undefined
      ]>;
  updateMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateMuteConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateMuteConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IMuteConfig,
          protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.muteConfig?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.muteConfig?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.muteConfig?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs/[^/]+'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    this._log.info('updateMuteConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateMuteConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateMuteConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IMuteConfig,
        protos.google.cloud.securitycenter.v2.IUpdateMuteConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateMuteConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a notification config. The following update
 * fields are allowed: description, pubsub_topic, streaming_config.filter
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.NotificationConfig} request.notificationConfig
 *   Required. The notification config to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The FieldMask to use when updating the notification config.
 *
 *   If empty all mutable fields will be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_notification_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateNotificationConfig_async
 */
  updateNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|undefined, {}|undefined
      ]>;
  updateNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateNotificationConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateNotificationConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.INotificationConfig,
          protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'notification_config.name': request.notificationConfig!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateNotificationConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateNotificationConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateNotificationConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.INotificationConfig,
        protos.google.cloud.securitycenter.v2.IUpdateNotificationConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateNotificationConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates an existing ResourceValueConfigs with new rules.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.ResourceValueConfig} request.resourceValueConfig
 *   Required. The resource value config being updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 *   If empty all mutable fields will be updated.
 *
 *   To update nested fields, include the top level field in the mask
 *   For example, to update gcp_metadata.resource_type, include the
 *   "gcp_metadata" field mask
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.ResourceValueConfig|ResourceValueConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_resource_value_config.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateResourceValueConfig_async
 */
  updateResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|undefined, {}|undefined
      ]>;
  updateResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateResourceValueConfig(
      request: protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateResourceValueConfig(
      request?: protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.IResourceValueConfig,
          protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource_value_config.name': request.resourceValueConfig!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateResourceValueConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateResourceValueConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateResourceValueConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.IResourceValueConfig,
        protos.google.cloud.securitycenter.v2.IUpdateResourceValueConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateResourceValueConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates security marks. For Finding Security marks, if no location is
 * specified, finding is assumed to be in global. Assets Security Marks can
 * only be accessed through global endpoint.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.SecurityMarks} request.securityMarks
 *   Required. The security marks resource to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The FieldMask to use when updating the security marks resource.
 *
 *   The field mask must not contain duplicate fields.
 *   If empty or set to "marks", all marks will be replaced.  Individual
 *   marks can be updated using "marks.<mark_key>".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.SecurityMarks|SecurityMarks}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_security_marks.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateSecurityMarks_async
 */
  updateSecurityMarks(
      request?: protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISecurityMarks,
        protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|undefined, {}|undefined
      ]>;
  updateSecurityMarks(
      request: protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISecurityMarks,
          protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|null|undefined,
          {}|null|undefined>): void;
  updateSecurityMarks(
      request: protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISecurityMarks,
          protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|null|undefined,
          {}|null|undefined>): void;
  updateSecurityMarks(
      request?: protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.ISecurityMarks,
          protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.ISecurityMarks,
          protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISecurityMarks,
        protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'security_marks.name': request.securityMarks!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateSecurityMarks request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.ISecurityMarks,
        protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateSecurityMarks response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateSecurityMarks(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.ISecurityMarks,
        protos.google.cloud.securitycenter.v2.IUpdateSecurityMarksRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateSecurityMarks response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a source.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.securitycenter.v2.Source} request.source
 *   Required. The source resource to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The FieldMask to use when updating the source resource.
 *
 *   If empty all mutable fields will be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.securitycenter.v2.Source|Source}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.update_source.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_UpdateSource_async
 */
  updateSource(
      request?: protos.google.cloud.securitycenter.v2.IUpdateSourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|undefined, {}|undefined
      ]>;
  updateSource(
      request: protos.google.cloud.securitycenter.v2.IUpdateSourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|null|undefined,
          {}|null|undefined>): void;
  updateSource(
      request: protos.google.cloud.securitycenter.v2.IUpdateSourceRequest,
      callback: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|null|undefined,
          {}|null|undefined>): void;
  updateSource(
      request?: protos.google.cloud.securitycenter.v2.IUpdateSourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.securitycenter.v2.ISource,
          protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'source.name': request.source!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateSource request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateSource response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateSource(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.securitycenter.v2.ISource,
        protos.google.cloud.securitycenter.v2.IUpdateSourceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateSource response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Kicks off an LRO to bulk mute findings for a parent based on a filter. If
 * no location is specified, findings are muted in global. The parent
 * can be either an organization, folder, or project. The findings matched by
 * the filter will be muted after the LRO is done.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, at which bulk action needs to be applied. If no
 *   location is specified, findings are updated in global. The following list
 *   shows some examples:
 *
 *   + `organizations/[organization_id]`
 *   + `organizations/[organization_id]/locations/[location_id]`
 *   + `folders/[folder_id]`
 *   + `folders/[folder_id]/locations/[location_id]`
 *   + `projects/[project_id]`
 *   + `projects/[project_id]/locations/[location_id]`
 * @param {string} request.filter
 *   Expression that identifies findings that should be updated.
 *   The expression is a list of zero or more restrictions combined
 *   via logical operators `AND` and `OR`. Parentheses are supported, and `OR`
 *   has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a
 *   `-` character in front of them to indicate negation. The fields map to
 *   those defined in the corresponding resource.
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 * @param {google.cloud.securitycenter.v2.BulkMuteFindingsRequest.MuteState} [request.muteState]
 *   Optional. All findings matching the given filter will have their mute state
 *   set to this value. The default value is `MUTED`. Setting this to
 *   `UNDEFINED` will clear the mute state on all matching findings.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.bulk_mute_findings.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_BulkMuteFindings_async
 */
  bulkMuteFindings(
      request?: protos.google.cloud.securitycenter.v2.IBulkMuteFindingsRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  bulkMuteFindings(
      request: protos.google.cloud.securitycenter.v2.IBulkMuteFindingsRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  bulkMuteFindings(
      request: protos.google.cloud.securitycenter.v2.IBulkMuteFindingsRequest,
      callback: Callback<
          LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  bulkMuteFindings(
      request?: protos.google.cloud.securitycenter.v2.IBulkMuteFindingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('bulkMuteFindings response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('bulkMuteFindings request %j', request);
    return this.innerApiCalls.bulkMuteFindings(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.securitycenter.v2.IBulkMuteFindingsResponse, protos.google.protobuf.IEmpty>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('bulkMuteFindings response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `bulkMuteFindings()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.bulk_mute_findings.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_BulkMuteFindings_async
 */
  async checkBulkMuteFindingsProgress(name: string): Promise<LROperation<protos.google.cloud.securitycenter.v2.BulkMuteFindingsResponse, protos.google.protobuf.Empty>>{
    this._log.info('bulkMuteFindings long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.bulkMuteFindings, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.securitycenter.v2.BulkMuteFindingsResponse, protos.google.protobuf.Empty>;
  }
 /**
 * Filters an organization or source's findings and groups them by their
 * specified properties in a location. If no location is specified, findings
 * are assumed to be in global
 *
 * To group across all sources provide a `-` as the source id.
 * The following list shows some examples:
 *
 * + `/v2/organizations/{organization_id}/sources/-/findings`
 * +
 * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
 * + `/v2/folders/{folder_id}/sources/-/findings`
 * + `/v2/folders/{folder_id}/sources/-/locations/{location_id}/findings`
 * + `/v2/projects/{project_id}/sources/-/findings`
 * + `/v2/projects/{project_id}/sources/-/locations/{location_id}/findings`
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source to groupBy. If no location is specified,
 *   finding is assumed to be in global.
 *    The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To groupBy across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/[location_id]`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-/locations/[location_id]`
 *   + `projects/{project_id}/sources/-`
 *   + `projects/{project_id}/sources/-/locations/[location_id]`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 * @param {string} request.groupBy
 *   Required. Expression that defines what assets fields to use for grouping.
 *   The string value should follow SQL syntax: comma separated list of fields.
 *   For example: "parent,resource_name".
 * @param {string} request.pageToken
 *   The value returned by the last `GroupFindingsResponse`; indicates
 *   that this is a continuation of a prior `GroupFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.GroupResult|GroupResult}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `groupFindingsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  groupFindings(
      request?: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IGroupResult[],
        protos.google.cloud.securitycenter.v2.IGroupFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IGroupFindingsResponse
      ]>;
  groupFindings(
      request: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
          protos.google.cloud.securitycenter.v2.IGroupFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IGroupResult>): void;
  groupFindings(
      request: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
          protos.google.cloud.securitycenter.v2.IGroupFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IGroupResult>): void;
  groupFindings(
      request?: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
          protos.google.cloud.securitycenter.v2.IGroupFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IGroupResult>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
          protos.google.cloud.securitycenter.v2.IGroupFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IGroupResult>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IGroupResult[],
        protos.google.cloud.securitycenter.v2.IGroupFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IGroupFindingsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      protos.google.cloud.securitycenter.v2.IGroupFindingsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IGroupResult>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('groupFindings values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('groupFindings request %j', request);
    return this.innerApiCalls
      .groupFindings(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IGroupResult[],
        protos.google.cloud.securitycenter.v2.IGroupFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IGroupFindingsResponse
      ]) => {
        this._log.info('groupFindings values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `groupFindings`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source to groupBy. If no location is specified,
 *   finding is assumed to be in global.
 *    The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To groupBy across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/[location_id]`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-/locations/[location_id]`
 *   + `projects/{project_id}/sources/-`
 *   + `projects/{project_id}/sources/-/locations/[location_id]`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 * @param {string} request.groupBy
 *   Required. Expression that defines what assets fields to use for grouping.
 *   The string value should follow SQL syntax: comma separated list of fields.
 *   For example: "parent,resource_name".
 * @param {string} request.pageToken
 *   The value returned by the last `GroupFindingsResponse`; indicates
 *   that this is a continuation of a prior `GroupFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.GroupResult|GroupResult} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `groupFindingsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  groupFindingsStream(
      request?: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['groupFindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('groupFindings stream %j', request);
    return this.descriptors.page.groupFindings.createStream(
      this.innerApiCalls.groupFindings as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `groupFindings`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source to groupBy. If no location is specified,
 *   finding is assumed to be in global.
 *    The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To groupBy across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/[location_id]`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-/locations/[location_id]`
 *   + `projects/{project_id}/sources/-`
 *   + `projects/{project_id}/sources/-/locations/[location_id]`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 * @param {string} request.groupBy
 *   Required. Expression that defines what assets fields to use for grouping.
 *   The string value should follow SQL syntax: comma separated list of fields.
 *   For example: "parent,resource_name".
 * @param {string} request.pageToken
 *   The value returned by the last `GroupFindingsResponse`; indicates
 *   that this is a continuation of a prior `GroupFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.GroupResult|GroupResult}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.group_findings.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_GroupFindings_async
 */
  groupFindingsAsync(
      request?: protos.google.cloud.securitycenter.v2.IGroupFindingsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IGroupResult>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['groupFindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('groupFindings iterate %j', request);
    return this.descriptors.page.groupFindings.asyncIterate(
      this.innerApiCalls['groupFindings'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IGroupResult>;
  }
 /**
 * Lists the attack paths for a set of simulation results or valued resources
 * and filter.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list attack paths.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 *   `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
 * @param {string} request.filter
 *   The filter expression that filters the attack path in the response.
 *   Supported fields:
 *
 *     * `valued_resources` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListAttackPathsResponse`; indicates
 *   that this is a continuation of a prior `ListAttackPaths` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.AttackPath|AttackPath}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAttackPathsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAttackPaths(
      request?: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IAttackPath[],
        protos.google.cloud.securitycenter.v2.IListAttackPathsRequest|null,
        protos.google.cloud.securitycenter.v2.IListAttackPathsResponse
      ]>;
  listAttackPaths(
      request: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
          protos.google.cloud.securitycenter.v2.IListAttackPathsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IAttackPath>): void;
  listAttackPaths(
      request: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
          protos.google.cloud.securitycenter.v2.IListAttackPathsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IAttackPath>): void;
  listAttackPaths(
      request?: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
          protos.google.cloud.securitycenter.v2.IListAttackPathsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IAttackPath>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
          protos.google.cloud.securitycenter.v2.IListAttackPathsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IAttackPath>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IAttackPath[],
        protos.google.cloud.securitycenter.v2.IListAttackPathsRequest|null,
        protos.google.cloud.securitycenter.v2.IListAttackPathsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      protos.google.cloud.securitycenter.v2.IListAttackPathsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IAttackPath>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAttackPaths values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAttackPaths request %j', request);
    return this.innerApiCalls
      .listAttackPaths(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IAttackPath[],
        protos.google.cloud.securitycenter.v2.IListAttackPathsRequest|null,
        protos.google.cloud.securitycenter.v2.IListAttackPathsResponse
      ]) => {
        this._log.info('listAttackPaths values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAttackPaths`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list attack paths.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 *   `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
 * @param {string} request.filter
 *   The filter expression that filters the attack path in the response.
 *   Supported fields:
 *
 *     * `valued_resources` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListAttackPathsResponse`; indicates
 *   that this is a continuation of a prior `ListAttackPaths` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.AttackPath|AttackPath} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAttackPathsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAttackPathsStream(
      request?: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAttackPaths'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAttackPaths stream %j', request);
    return this.descriptors.page.listAttackPaths.createStream(
      this.innerApiCalls.listAttackPaths as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAttackPaths`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list attack paths.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 *   `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
 * @param {string} request.filter
 *   The filter expression that filters the attack path in the response.
 *   Supported fields:
 *
 *     * `valued_resources` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListAttackPathsResponse`; indicates
 *   that this is a continuation of a prior `ListAttackPaths` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.AttackPath|AttackPath}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_attack_paths.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListAttackPaths_async
 */
  listAttackPathsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListAttackPathsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IAttackPath>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAttackPaths'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAttackPaths iterate %j', request);
    return this.descriptors.page.listAttackPaths.asyncIterate(
      this.innerApiCalls['listAttackPaths'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IAttackPath>;
  }
 /**
 * Lists BigQuery exports. Note that when requesting BigQuery exports at a
 * given level all exports under that level are also returned e.g. if
 * requesting BigQuery exports under a folder, then all BigQuery exports
 * immediately under the folder plus the ones created under the projects
 * within the folder are returned.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of BigQuery exports. Its
 *   format is `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListBigQueryExports` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListBigQueryExports`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBigQueryExportsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBigQueryExports(
      request?: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport[],
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest|null,
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse
      ]>;
  listBigQueryExports(
      request: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IBigQueryExport>): void;
  listBigQueryExports(
      request: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IBigQueryExport>): void;
  listBigQueryExports(
      request?: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IBigQueryExport>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
          protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IBigQueryExport>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IBigQueryExport[],
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest|null,
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IBigQueryExport>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listBigQueryExports values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listBigQueryExports request %j', request);
    return this.innerApiCalls
      .listBigQueryExports(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IBigQueryExport[],
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest|null,
        protos.google.cloud.securitycenter.v2.IListBigQueryExportsResponse
      ]) => {
        this._log.info('listBigQueryExports values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listBigQueryExports`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of BigQuery exports. Its
 *   format is `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListBigQueryExports` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListBigQueryExports`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBigQueryExportsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBigQueryExportsStream(
      request?: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBigQueryExports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listBigQueryExports stream %j', request);
    return this.descriptors.page.listBigQueryExports.createStream(
      this.innerApiCalls.listBigQueryExports as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBigQueryExports`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of BigQuery exports. Its
 *   format is `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`, or
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListBigQueryExports` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListBigQueryExports`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.BigQueryExport|BigQueryExport}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_big_query_exports.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListBigQueryExports_async
 */
  listBigQueryExportsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListBigQueryExportsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IBigQueryExport>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBigQueryExports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listBigQueryExports iterate %j', request);
    return this.descriptors.page.listBigQueryExports.asyncIterate(
      this.innerApiCalls['listBigQueryExports'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IBigQueryExport>;
  }
 /**
 * Lists an organization or source's findings.
 *
 * To list across all sources for a given location provide a `-` as the source
 * id. If no location is specified, finding are assumed to be in global.
 * The following list shows some examples:
 *
 * + `/v2/organizations/{organization_id}/sources/-/findings`
 * +
 * `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source the findings belong to. If no location is
 *   specified, the default is global. The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To list across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/{location_id}`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-locations/{location_id}`
 *   + `projects/{projects_id}/sources/-`
 *   + `projects/{projects_id}/sources/-/locations/{location_id}`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 *     * resource.folders.resource_folder: `=`, `:`
 *     * resource.display_name: `=`, `:`
 * @param {string} request.orderBy
 *   Expression that defines what fields and order to use for sorting. The
 *   string value should follow SQL syntax: comma separated list of fields. For
 *   example: "name,parent". The default sorting order
 *   is ascending. To specify descending order for a field, a suffix " desc"
 *   should be appended to the field name. For example: "name
 *   desc,parent". Redundant space characters in the
 *   syntax are insignificant. "name desc,parent" and "
 *   name     desc  ,   parent  " are equivalent.
 *
 *   The following fields are supported:
 *   name
 *   parent
 *   state
 *   category
 *   resource_name
 *   event_time
 *   security_marks.marks
 * @param {google.protobuf.FieldMask} request.fieldMask
 *   A field mask to specify the Finding fields to be listed in the response.
 *   An empty field mask will list all fields.
 * @param {string} request.pageToken
 *   The value returned by the last `ListFindingsResponse`; indicates
 *   that this is a continuation of a prior `ListFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.ListFindingsResponse.ListFindingsResult|ListFindingsResult}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listFindingsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listFindings(
      request?: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult[],
        protos.google.cloud.securitycenter.v2.IListFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IListFindingsResponse
      ]>;
  listFindings(
      request: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListFindingsRequest,
          protos.google.cloud.securitycenter.v2.IListFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>): void;
  listFindings(
      request: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListFindingsRequest,
          protos.google.cloud.securitycenter.v2.IListFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>): void;
  listFindings(
      request?: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListFindingsRequest,
          protos.google.cloud.securitycenter.v2.IListFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListFindingsRequest,
          protos.google.cloud.securitycenter.v2.IListFindingsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult[],
        protos.google.cloud.securitycenter.v2.IListFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IListFindingsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      protos.google.cloud.securitycenter.v2.IListFindingsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listFindings values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listFindings request %j', request);
    return this.innerApiCalls
      .listFindings(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult[],
        protos.google.cloud.securitycenter.v2.IListFindingsRequest|null,
        protos.google.cloud.securitycenter.v2.IListFindingsResponse
      ]) => {
        this._log.info('listFindings values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listFindings`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source the findings belong to. If no location is
 *   specified, the default is global. The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To list across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/{location_id}`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-locations/{location_id}`
 *   + `projects/{projects_id}/sources/-`
 *   + `projects/{projects_id}/sources/-/locations/{location_id}`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 *     * resource.folders.resource_folder: `=`, `:`
 *     * resource.display_name: `=`, `:`
 * @param {string} request.orderBy
 *   Expression that defines what fields and order to use for sorting. The
 *   string value should follow SQL syntax: comma separated list of fields. For
 *   example: "name,parent". The default sorting order
 *   is ascending. To specify descending order for a field, a suffix " desc"
 *   should be appended to the field name. For example: "name
 *   desc,parent". Redundant space characters in the
 *   syntax are insignificant. "name desc,parent" and "
 *   name     desc  ,   parent  " are equivalent.
 *
 *   The following fields are supported:
 *   name
 *   parent
 *   state
 *   category
 *   resource_name
 *   event_time
 *   security_marks.marks
 * @param {google.protobuf.FieldMask} request.fieldMask
 *   A field mask to specify the Finding fields to be listed in the response.
 *   An empty field mask will list all fields.
 * @param {string} request.pageToken
 *   The value returned by the last `ListFindingsResponse`; indicates
 *   that this is a continuation of a prior `ListFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.ListFindingsResponse.ListFindingsResult|ListFindingsResult} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listFindingsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listFindingsStream(
      request?: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listFindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listFindings stream %j', request);
    return this.descriptors.page.listFindings.createStream(
      this.innerApiCalls.listFindings as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listFindings`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the source the findings belong to. If no location is
 *   specified, the default is global. The following list shows some examples:
 *
 *   + `organizations/[organization_id]/sources/[source_id]`
 *   +
 *   `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
 *   + `folders/[folder_id]/sources/[source_id]`
 *   + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
 *   + `projects/[project_id]/sources/[source_id]`
 *   + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
 *
 *   To list across all sources provide a source_id of `-`. The following
 *   list shows some examples:
 *
 *   + `organizations/{organization_id}/sources/-`
 *   + `organizations/{organization_id}/sources/-/locations/{location_id}`
 *   + `folders/{folder_id}/sources/-`
 *   + `folders/{folder_id}/sources/-locations/{location_id}`
 *   + `projects/{projects_id}/sources/-`
 *   + `projects/{projects_id}/sources/-/locations/{location_id}`
 * @param {string} request.filter
 *   Expression that defines the filter to apply across findings.
 *   The expression is a list of one or more restrictions combined via logical
 *   operators `AND` and `OR`.
 *   Parentheses are supported, and `OR` has higher precedence than `AND`.
 *
 *   Restrictions have the form `<field> <operator> <value>` and may have a `-`
 *   character in front of them to indicate negation. Examples include:
 *
 *    * name
 *    * security_marks.marks.marka
 *
 *   The supported operators are:
 *
 *   * `=` for all value types.
 *   * `>`, `<`, `>=`, `<=` for integer values.
 *   * `:`, meaning substring matching, for strings.
 *
 *   The supported value types are:
 *
 *   * string literals in quotes.
 *   * integer literals without quotes.
 *   * boolean literals `true` and `false` without quotes.
 *
 *   The following field and operator combinations are supported:
 *
 *   * name: `=`
 *   * parent: `=`, `:`
 *   * resource_name: `=`, `:`
 *   * state: `=`, `:`
 *   * category: `=`, `:`
 *   * external_uri: `=`, `:`
 *   * event_time: `=`, `>`, `<`, `>=`, `<=`
 *
 *     Usage: This should be milliseconds since epoch or an RFC3339 string.
 *     Examples:
 *       `event_time = "2019-06-10T16:07:18-07:00"`
 *       `event_time = 1560208038000`
 *
 *   * severity: `=`, `:`
 *   * security_marks.marks: `=`, `:`
 *   * resource:
 *     * resource.name: `=`, `:`
 *     * resource.parent_name: `=`, `:`
 *     * resource.parent_display_name: `=`, `:`
 *     * resource.project_name: `=`, `:`
 *     * resource.project_display_name: `=`, `:`
 *     * resource.type: `=`, `:`
 *     * resource.folders.resource_folder: `=`, `:`
 *     * resource.display_name: `=`, `:`
 * @param {string} request.orderBy
 *   Expression that defines what fields and order to use for sorting. The
 *   string value should follow SQL syntax: comma separated list of fields. For
 *   example: "name,parent". The default sorting order
 *   is ascending. To specify descending order for a field, a suffix " desc"
 *   should be appended to the field name. For example: "name
 *   desc,parent". Redundant space characters in the
 *   syntax are insignificant. "name desc,parent" and "
 *   name     desc  ,   parent  " are equivalent.
 *
 *   The following fields are supported:
 *   name
 *   parent
 *   state
 *   category
 *   resource_name
 *   event_time
 *   security_marks.marks
 * @param {google.protobuf.FieldMask} request.fieldMask
 *   A field mask to specify the Finding fields to be listed in the response.
 *   An empty field mask will list all fields.
 * @param {string} request.pageToken
 *   The value returned by the last `ListFindingsResponse`; indicates
 *   that this is a continuation of a prior `ListFindings` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.ListFindingsResponse.ListFindingsResult|ListFindingsResult}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_findings.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListFindings_async
 */
  listFindingsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListFindingsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listFindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listFindings iterate %j', request);
    return this.descriptors.page.listFindings.asyncIterate(
      this.innerApiCalls['listFindings'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.ListFindingsResponse.IListFindingsResult>;
  }
 /**
 * Lists mute configs. If no location is specified, default is
 * global.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of mute configs. Its format
 *   is `organizations/[organization_id]", "folders/[folder_id]`,
 *   `projects/[project_id]`,
 *   `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`,
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListMuteConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListMuteConfigs` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listMuteConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMuteConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig[],
        protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse
      ]>;
  listMuteConfigs(
      request: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IMuteConfig>): void;
  listMuteConfigs(
      request: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IMuteConfig>): void;
  listMuteConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IMuteConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IMuteConfig>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IMuteConfig[],
        protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IMuteConfig>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listMuteConfigs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listMuteConfigs request %j', request);
    return this.innerApiCalls
      .listMuteConfigs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IMuteConfig[],
        protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListMuteConfigsResponse
      ]) => {
        this._log.info('listMuteConfigs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listMuteConfigs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of mute configs. Its format
 *   is `organizations/[organization_id]", "folders/[folder_id]`,
 *   `projects/[project_id]`,
 *   `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`,
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListMuteConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListMuteConfigs` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listMuteConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMuteConfigsStream(
      request?: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listMuteConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMuteConfigs stream %j', request);
    return this.descriptors.page.listMuteConfigs.createStream(
      this.innerApiCalls.listMuteConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listMuteConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of mute configs. Its format
 *   is `organizations/[organization_id]", "folders/[folder_id]`,
 *   `projects/[project_id]`,
 *   `organizations/[organization_id]/locations/[location_id]`,
 *   `folders/[folder_id]/locations/[location_id]`,
 *   `projects/[project_id]/locations/[location_id]`.
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListMuteConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListMuteConfigs` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.MuteConfig|MuteConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_mute_configs.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListMuteConfigs_async
 */
  listMuteConfigsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListMuteConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IMuteConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('organizations/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('folders/[^/]+/locations/(?<location>[^/]+)/muteConfigs'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listMuteConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMuteConfigs iterate %j', request);
    return this.descriptors.page.listMuteConfigs.asyncIterate(
      this.innerApiCalls['listMuteConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IMuteConfig>;
  }
 /**
 * Lists notification configs.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in which to list the notification
 *   configurations. Its format is
 *   "organizations/[organization_id]/locations/[location_id]",
 *   "folders/[folder_id]/locations/[location_id]", or
 *   "projects/[project_id]/locations/[location_id]".
 * @param {string} request.pageToken
 *   The value returned by the last `ListNotificationConfigsResponse`; indicates
 *   that this is a continuation of a prior `ListNotificationConfigs` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listNotificationConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNotificationConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig[],
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse
      ]>;
  listNotificationConfigs(
      request: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.INotificationConfig>): void;
  listNotificationConfigs(
      request: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.INotificationConfig>): void;
  listNotificationConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.INotificationConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.INotificationConfig>):
      Promise<[
        protos.google.cloud.securitycenter.v2.INotificationConfig[],
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.INotificationConfig>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listNotificationConfigs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listNotificationConfigs request %j', request);
    return this.innerApiCalls
      .listNotificationConfigs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.INotificationConfig[],
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListNotificationConfigsResponse
      ]) => {
        this._log.info('listNotificationConfigs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listNotificationConfigs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in which to list the notification
 *   configurations. Its format is
 *   "organizations/[organization_id]/locations/[location_id]",
 *   "folders/[folder_id]/locations/[location_id]", or
 *   "projects/[project_id]/locations/[location_id]".
 * @param {string} request.pageToken
 *   The value returned by the last `ListNotificationConfigsResponse`; indicates
 *   that this is a continuation of a prior `ListNotificationConfigs` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listNotificationConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNotificationConfigsStream(
      request?: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNotificationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNotificationConfigs stream %j', request);
    return this.descriptors.page.listNotificationConfigs.createStream(
      this.innerApiCalls.listNotificationConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listNotificationConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in which to list the notification
 *   configurations. Its format is
 *   "organizations/[organization_id]/locations/[location_id]",
 *   "folders/[folder_id]/locations/[location_id]", or
 *   "projects/[project_id]/locations/[location_id]".
 * @param {string} request.pageToken
 *   The value returned by the last `ListNotificationConfigsResponse`; indicates
 *   that this is a continuation of a prior `ListNotificationConfigs` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.NotificationConfig|NotificationConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_notification_configs.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListNotificationConfigs_async
 */
  listNotificationConfigsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.INotificationConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listNotificationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listNotificationConfigs iterate %j', request);
    return this.descriptors.page.listNotificationConfigs.asyncIterate(
      this.innerApiCalls['listNotificationConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.INotificationConfig>;
  }
 /**
 * Lists all ResourceValueConfigs.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of resource value configs.
 *   Its format is
 *   `organizations/[organization_id]`
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListResourceValueConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListResourceValueConfigs` must match the call that provided the
 *   page token.
 *
 *   page_size can be specified, and the new page_size will be used.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.ResourceValueConfig|ResourceValueConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listResourceValueConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listResourceValueConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig[],
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse
      ]>;
  listResourceValueConfigs(
      request: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IResourceValueConfig>): void;
  listResourceValueConfigs(
      request: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IResourceValueConfig>): void;
  listResourceValueConfigs(
      request?: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IResourceValueConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
          protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IResourceValueConfig>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IResourceValueConfig[],
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IResourceValueConfig>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listResourceValueConfigs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listResourceValueConfigs request %j', request);
    return this.innerApiCalls
      .listResourceValueConfigs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IResourceValueConfig[],
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest|null,
        protos.google.cloud.securitycenter.v2.IListResourceValueConfigsResponse
      ]) => {
        this._log.info('listResourceValueConfigs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listResourceValueConfigs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of resource value configs.
 *   Its format is
 *   `organizations/[organization_id]`
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListResourceValueConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListResourceValueConfigs` must match the call that provided the
 *   page token.
 *
 *   page_size can be specified, and the new page_size will be used.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.ResourceValueConfig|ResourceValueConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listResourceValueConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listResourceValueConfigsStream(
      request?: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listResourceValueConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listResourceValueConfigs stream %j', request);
    return this.descriptors.page.listResourceValueConfigs.createStream(
      this.innerApiCalls.listResourceValueConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listResourceValueConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns the collection of resource value configs.
 *   Its format is
 *   `organizations/[organization_id]`
 * @param {number} request.pageSize
 *   The maximum number of configs to return. The service may return fewer than
 *   this value.
 *   If unspecified, at most 10 configs will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListResourceValueConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   `ListResourceValueConfigs` must match the call that provided the
 *   page token.
 *
 *   page_size can be specified, and the new page_size will be used.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.ResourceValueConfig|ResourceValueConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_resource_value_configs.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListResourceValueConfigs_async
 */
  listResourceValueConfigsAsync(
      request?: protos.google.cloud.securitycenter.v2.IListResourceValueConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IResourceValueConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listResourceValueConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listResourceValueConfigs iterate %j', request);
    return this.descriptors.page.listResourceValueConfigs.asyncIterate(
      this.innerApiCalls['listResourceValueConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IResourceValueConfig>;
  }
 /**
 * Lists all sources belonging to an organization.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent of sources to list. Its format should
 *   be `organizations/[organization_id]`, `folders/[folder_id]`, or
 *   `projects/[project_id]`.
 * @param {string} request.pageToken
 *   The value returned by the last `ListSourcesResponse`; indicates
 *   that this is a continuation of a prior `ListSources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.Source|Source}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSources(
      request?: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource[],
        protos.google.cloud.securitycenter.v2.IListSourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListSourcesResponse
      ]>;
  listSources(
      request: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListSourcesRequest,
          protos.google.cloud.securitycenter.v2.IListSourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ISource>): void;
  listSources(
      request: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListSourcesRequest,
          protos.google.cloud.securitycenter.v2.IListSourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ISource>): void;
  listSources(
      request?: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListSourcesRequest,
          protos.google.cloud.securitycenter.v2.IListSourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ISource>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListSourcesRequest,
          protos.google.cloud.securitycenter.v2.IListSourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.ISource>):
      Promise<[
        protos.google.cloud.securitycenter.v2.ISource[],
        protos.google.cloud.securitycenter.v2.IListSourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListSourcesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      protos.google.cloud.securitycenter.v2.IListSourcesResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.ISource>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listSources values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listSources request %j', request);
    return this.innerApiCalls
      .listSources(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.ISource[],
        protos.google.cloud.securitycenter.v2.IListSourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListSourcesResponse
      ]) => {
        this._log.info('listSources values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listSources`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent of sources to list. Its format should
 *   be `organizations/[organization_id]`, `folders/[folder_id]`, or
 *   `projects/[project_id]`.
 * @param {string} request.pageToken
 *   The value returned by the last `ListSourcesResponse`; indicates
 *   that this is a continuation of a prior `ListSources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.Source|Source} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSourcesStream(
      request?: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listSources stream %j', request);
    return this.descriptors.page.listSources.createStream(
      this.innerApiCalls.listSources as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSources`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent of sources to list. Its format should
 *   be `organizations/[organization_id]`, `folders/[folder_id]`, or
 *   `projects/[project_id]`.
 * @param {string} request.pageToken
 *   The value returned by the last `ListSourcesResponse`; indicates
 *   that this is a continuation of a prior `ListSources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.Source|Source}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_sources.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListSources_async
 */
  listSourcesAsync(
      request?: protos.google.cloud.securitycenter.v2.IListSourcesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.ISource>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listSources iterate %j', request);
    return this.descriptors.page.listSources.asyncIterate(
      this.innerApiCalls['listSources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.ISource>;
  }
 /**
 * Lists the valued resources for a set of simulation results and filter.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list exposed resources.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 * @param {string} request.filter
 *   The filter expression that filters the valued resources in the response.
 *   Supported fields:
 *
 *     * `resource_value` supports =
 *     * `resource_type` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListValuedResourcesResponse`; indicates
 *   that this is a continuation of a prior `ListValuedResources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {string} [request.orderBy]
 *   Optional. The fields by which to order the valued resources response.
 *
 *   Supported fields:
 *
 *     * `exposed_score`
 *
 *     * `resource_value`
 *
 *     * `resource_type`
 *
 *   Values should be a comma separated list of fields. For example:
 *   `exposed_score,resource_value`.
 *
 *   The default sorting order is descending. To specify ascending or descending
 *   order for a field, append a " ASC" or a " DESC" suffix, respectively; for
 *   example: `exposed_score DESC`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.securitycenter.v2.ValuedResource|ValuedResource}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listValuedResourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listValuedResources(
      request?: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.securitycenter.v2.IValuedResource[],
        protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse
      ]>;
  listValuedResources(
      request: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
          protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IValuedResource>): void;
  listValuedResources(
      request: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      callback: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
          protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IValuedResource>): void;
  listValuedResources(
      request?: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
          protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IValuedResource>,
      callback?: PaginationCallback<
          protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
          protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse|null|undefined,
          protos.google.cloud.securitycenter.v2.IValuedResource>):
      Promise<[
        protos.google.cloud.securitycenter.v2.IValuedResource[],
        protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse|null|undefined,
      protos.google.cloud.securitycenter.v2.IValuedResource>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listValuedResources values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listValuedResources request %j', request);
    return this.innerApiCalls
      .listValuedResources(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.securitycenter.v2.IValuedResource[],
        protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest|null,
        protos.google.cloud.securitycenter.v2.IListValuedResourcesResponse
      ]) => {
        this._log.info('listValuedResources values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listValuedResources`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list exposed resources.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 * @param {string} request.filter
 *   The filter expression that filters the valued resources in the response.
 *   Supported fields:
 *
 *     * `resource_value` supports =
 *     * `resource_type` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListValuedResourcesResponse`; indicates
 *   that this is a continuation of a prior `ListValuedResources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {string} [request.orderBy]
 *   Optional. The fields by which to order the valued resources response.
 *
 *   Supported fields:
 *
 *     * `exposed_score`
 *
 *     * `resource_value`
 *
 *     * `resource_type`
 *
 *   Values should be a comma separated list of fields. For example:
 *   `exposed_score,resource_value`.
 *
 *   The default sorting order is descending. To specify ascending or descending
 *   order for a field, append a " ASC" or a " DESC" suffix, respectively; for
 *   example: `exposed_score DESC`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.securitycenter.v2.ValuedResource|ValuedResource} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listValuedResourcesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listValuedResourcesStream(
      request?: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listValuedResources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listValuedResources stream %j', request);
    return this.descriptors.page.listValuedResources.createStream(
      this.innerApiCalls.listValuedResources as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listValuedResources`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of parent to list exposed resources.
 *
 *   Valid formats:
 *   `organizations/{organization}`,
 *   `organizations/{organization}/simulations/{simulation}`
 *   `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
 * @param {string} request.filter
 *   The filter expression that filters the valued resources in the response.
 *   Supported fields:
 *
 *     * `resource_value` supports =
 *     * `resource_type` supports =
 * @param {string} request.pageToken
 *   The value returned by the last `ListValuedResourcesResponse`; indicates
 *   that this is a continuation of a prior `ListValuedResources` call, and
 *   that the system should return the next page of data.
 * @param {number} request.pageSize
 *   The maximum number of results to return in a single response. Default is
 *   10, minimum is 1, maximum is 1000.
 * @param {string} [request.orderBy]
 *   Optional. The fields by which to order the valued resources response.
 *
 *   Supported fields:
 *
 *     * `exposed_score`
 *
 *     * `resource_value`
 *
 *     * `resource_type`
 *
 *   Values should be a comma separated list of fields. For example:
 *   `exposed_score,resource_value`.
 *
 *   The default sorting order is descending. To specify ascending or descending
 *   order for a field, append a " ASC" or a " DESC" suffix, respectively; for
 *   example: `exposed_score DESC`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.securitycenter.v2.ValuedResource|ValuedResource}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/security_center.list_valued_resources.js</caption>
 * region_tag:securitycenter_v2_generated_SecurityCenter_ListValuedResources_async
 */
  listValuedResourcesAsync(
      request?: protos.google.cloud.securitycenter.v2.IListValuedResourcesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.securitycenter.v2.IValuedResource>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listValuedResources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listValuedResources iterate %j', request);
    return this.descriptors.page.listValuedResources.asyncIterate(
      this.innerApiCalls['listValuedResources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securitycenter.v2.IValuedResource>;
  }
/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderAssetSecurityMarks resource name string.
   *
   * @param {string} folder
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  folderAssetSecurityMarksPath(folder:string,asset:string) {
    return this.pathTemplates.folderAssetSecurityMarksPathTemplate.render({
      folder: folder,
      asset: asset,
    });
  }

  /**
   * Parse the folder from FolderAssetSecurityMarks resource.
   *
   * @param {string} folderAssetSecurityMarksName
   *   A fully-qualified path representing folder_asset_securityMarks resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAssetSecurityMarksName(folderAssetSecurityMarksName: string) {
    return this.pathTemplates.folderAssetSecurityMarksPathTemplate.match(folderAssetSecurityMarksName).folder;
  }

  /**
   * Parse the asset from FolderAssetSecurityMarks resource.
   *
   * @param {string} folderAssetSecurityMarksName
   *   A fully-qualified path representing folder_asset_securityMarks resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromFolderAssetSecurityMarksName(folderAssetSecurityMarksName: string) {
    return this.pathTemplates.folderAssetSecurityMarksPathTemplate.match(folderAssetSecurityMarksName).asset;
  }

  /**
   * Return a fully-qualified folderConstraintName resource name string.
   *
   * @param {string} folder
   * @param {string} constraint_name
   * @returns {string} Resource name string.
   */
  folderConstraintNamePath(folder:string,constraintName:string) {
    return this.pathTemplates.folderConstraintNamePathTemplate.render({
      folder: folder,
      constraint_name: constraintName,
    });
  }

  /**
   * Parse the folder from FolderConstraintName resource.
   *
   * @param {string} folderConstraintNameName
   *   A fully-qualified path representing folder_constraint_name resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderConstraintNameName(folderConstraintNameName: string) {
    return this.pathTemplates.folderConstraintNamePathTemplate.match(folderConstraintNameName).folder;
  }

  /**
   * Parse the constraint_name from FolderConstraintName resource.
   *
   * @param {string} folderConstraintNameName
   *   A fully-qualified path representing folder_constraint_name resource.
   * @returns {string} A string representing the constraint_name.
   */
  matchConstraintNameFromFolderConstraintNameName(folderConstraintNameName: string) {
    return this.pathTemplates.folderConstraintNamePathTemplate.match(folderConstraintNameName).constraint_name;
  }

  /**
   * Return a fully-qualified folderLocationBigQueryExports resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} exportParam
   * @returns {string} Resource name string.
   */
  folderLocationBigQueryExportsPath(folder:string,location:string,exportParam:string) {
    return this.pathTemplates.folderLocationBigQueryExportsPathTemplate.render({
      folder: folder,
      location: location,
      export: exportParam,
    });
  }

  /**
   * Parse the folder from FolderLocationBigQueryExports resource.
   *
   * @param {string} folderLocationBigQueryExportsName
   *   A fully-qualified path representing folder_location_bigQueryExports resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBigQueryExportsName(folderLocationBigQueryExportsName: string) {
    return this.pathTemplates.folderLocationBigQueryExportsPathTemplate.match(folderLocationBigQueryExportsName).folder;
  }

  /**
   * Parse the location from FolderLocationBigQueryExports resource.
   *
   * @param {string} folderLocationBigQueryExportsName
   *   A fully-qualified path representing folder_location_bigQueryExports resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBigQueryExportsName(folderLocationBigQueryExportsName: string) {
    return this.pathTemplates.folderLocationBigQueryExportsPathTemplate.match(folderLocationBigQueryExportsName).location;
  }

  /**
   * Parse the export from FolderLocationBigQueryExports resource.
   *
   * @param {string} folderLocationBigQueryExportsName
   *   A fully-qualified path representing folder_location_bigQueryExports resource.
   * @returns {string} A string representing the export.
   */
  matchExportFromFolderLocationBigQueryExportsName(folderLocationBigQueryExportsName: string) {
    return this.pathTemplates.folderLocationBigQueryExportsPathTemplate.match(folderLocationBigQueryExportsName).export;
  }

  /**
   * Return a fully-qualified folderLocationMuteConfigs resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  folderLocationMuteConfigsPath(folder:string,location:string,muteConfig:string) {
    return this.pathTemplates.folderLocationMuteConfigsPathTemplate.render({
      folder: folder,
      location: location,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the folder from FolderLocationMuteConfigs resource.
   *
   * @param {string} folderLocationMuteConfigsName
   *   A fully-qualified path representing folder_location_muteConfigs resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationMuteConfigsName(folderLocationMuteConfigsName: string) {
    return this.pathTemplates.folderLocationMuteConfigsPathTemplate.match(folderLocationMuteConfigsName).folder;
  }

  /**
   * Parse the location from FolderLocationMuteConfigs resource.
   *
   * @param {string} folderLocationMuteConfigsName
   *   A fully-qualified path representing folder_location_muteConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationMuteConfigsName(folderLocationMuteConfigsName: string) {
    return this.pathTemplates.folderLocationMuteConfigsPathTemplate.match(folderLocationMuteConfigsName).location;
  }

  /**
   * Parse the mute_config from FolderLocationMuteConfigs resource.
   *
   * @param {string} folderLocationMuteConfigsName
   *   A fully-qualified path representing folder_location_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromFolderLocationMuteConfigsName(folderLocationMuteConfigsName: string) {
    return this.pathTemplates.folderLocationMuteConfigsPathTemplate.match(folderLocationMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified folderLocationNotificationConfigs resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} notification_config
   * @returns {string} Resource name string.
   */
  folderLocationNotificationConfigsPath(folder:string,location:string,notificationConfig:string) {
    return this.pathTemplates.folderLocationNotificationConfigsPathTemplate.render({
      folder: folder,
      location: location,
      notification_config: notificationConfig,
    });
  }

  /**
   * Parse the folder from FolderLocationNotificationConfigs resource.
   *
   * @param {string} folderLocationNotificationConfigsName
   *   A fully-qualified path representing folder_location_notificationConfigs resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationNotificationConfigsName(folderLocationNotificationConfigsName: string) {
    return this.pathTemplates.folderLocationNotificationConfigsPathTemplate.match(folderLocationNotificationConfigsName).folder;
  }

  /**
   * Parse the location from FolderLocationNotificationConfigs resource.
   *
   * @param {string} folderLocationNotificationConfigsName
   *   A fully-qualified path representing folder_location_notificationConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationNotificationConfigsName(folderLocationNotificationConfigsName: string) {
    return this.pathTemplates.folderLocationNotificationConfigsPathTemplate.match(folderLocationNotificationConfigsName).location;
  }

  /**
   * Parse the notification_config from FolderLocationNotificationConfigs resource.
   *
   * @param {string} folderLocationNotificationConfigsName
   *   A fully-qualified path representing folder_location_notificationConfigs resource.
   * @returns {string} A string representing the notification_config.
   */
  matchNotificationConfigFromFolderLocationNotificationConfigsName(folderLocationNotificationConfigsName: string) {
    return this.pathTemplates.folderLocationNotificationConfigsPathTemplate.match(folderLocationNotificationConfigsName).notification_config;
  }

  /**
   * Return a fully-qualified folderMuteConfigs resource name string.
   *
   * @param {string} folder
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  folderMuteConfigsPath(folder:string,muteConfig:string) {
    return this.pathTemplates.folderMuteConfigsPathTemplate.render({
      folder: folder,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the folder from FolderMuteConfigs resource.
   *
   * @param {string} folderMuteConfigsName
   *   A fully-qualified path representing folder_muteConfigs resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderMuteConfigsName(folderMuteConfigsName: string) {
    return this.pathTemplates.folderMuteConfigsPathTemplate.match(folderMuteConfigsName).folder;
  }

  /**
   * Parse the mute_config from FolderMuteConfigs resource.
   *
   * @param {string} folderMuteConfigsName
   *   A fully-qualified path representing folder_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromFolderMuteConfigsName(folderMuteConfigsName: string) {
    return this.pathTemplates.folderMuteConfigsPathTemplate.match(folderMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified folderSource resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @returns {string} Resource name string.
   */
  folderSourcePath(folder:string,source:string) {
    return this.pathTemplates.folderSourcePathTemplate.render({
      folder: folder,
      source: source,
    });
  }

  /**
   * Parse the folder from FolderSource resource.
   *
   * @param {string} folderSourceName
   *   A fully-qualified path representing folder_source resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceName(folderSourceName: string) {
    return this.pathTemplates.folderSourcePathTemplate.match(folderSourceName).folder;
  }

  /**
   * Parse the source from FolderSource resource.
   *
   * @param {string} folderSourceName
   *   A fully-qualified path representing folder_source resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceName(folderSourceName: string) {
    return this.pathTemplates.folderSourcePathTemplate.match(folderSourceName).source;
  }

  /**
   * Return a fully-qualified folderSourceFindingExternalsystem resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  folderSourceFindingExternalsystemPath(folder:string,source:string,finding:string,externalsystem:string) {
    return this.pathTemplates.folderSourceFindingExternalsystemPathTemplate.render({
      folder: folder,
      source: source,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the folder from FolderSourceFindingExternalsystem resource.
   *
   * @param {string} folderSourceFindingExternalsystemName
   *   A fully-qualified path representing folder_source_finding_externalsystem resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceFindingExternalsystemName(folderSourceFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceFindingExternalsystemPathTemplate.match(folderSourceFindingExternalsystemName).folder;
  }

  /**
   * Parse the source from FolderSourceFindingExternalsystem resource.
   *
   * @param {string} folderSourceFindingExternalsystemName
   *   A fully-qualified path representing folder_source_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceFindingExternalsystemName(folderSourceFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceFindingExternalsystemPathTemplate.match(folderSourceFindingExternalsystemName).source;
  }

  /**
   * Parse the finding from FolderSourceFindingExternalsystem resource.
   *
   * @param {string} folderSourceFindingExternalsystemName
   *   A fully-qualified path representing folder_source_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceFindingExternalsystemName(folderSourceFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceFindingExternalsystemPathTemplate.match(folderSourceFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from FolderSourceFindingExternalsystem resource.
   *
   * @param {string} folderSourceFindingExternalsystemName
   *   A fully-qualified path representing folder_source_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromFolderSourceFindingExternalsystemName(folderSourceFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceFindingExternalsystemPathTemplate.match(folderSourceFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified folderSourceFindingSecurityMarks resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  folderSourceFindingSecurityMarksPath(folder:string,source:string,finding:string) {
    return this.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.render({
      folder: folder,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the folder from FolderSourceFindingSecurityMarks resource.
   *
   * @param {string} folderSourceFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_finding_securityMarks resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceFindingSecurityMarksName(folderSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.match(folderSourceFindingSecurityMarksName).folder;
  }

  /**
   * Parse the source from FolderSourceFindingSecurityMarks resource.
   *
   * @param {string} folderSourceFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceFindingSecurityMarksName(folderSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.match(folderSourceFindingSecurityMarksName).source;
  }

  /**
   * Parse the finding from FolderSourceFindingSecurityMarks resource.
   *
   * @param {string} folderSourceFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceFindingSecurityMarksName(folderSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceFindingSecurityMarksPathTemplate.match(folderSourceFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified folderSourceFindings resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  folderSourceFindingsPath(folder:string,source:string,finding:string) {
    return this.pathTemplates.folderSourceFindingsPathTemplate.render({
      folder: folder,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the folder from FolderSourceFindings resource.
   *
   * @param {string} folderSourceFindingsName
   *   A fully-qualified path representing folder_source_findings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceFindingsName(folderSourceFindingsName: string) {
    return this.pathTemplates.folderSourceFindingsPathTemplate.match(folderSourceFindingsName).folder;
  }

  /**
   * Parse the source from FolderSourceFindings resource.
   *
   * @param {string} folderSourceFindingsName
   *   A fully-qualified path representing folder_source_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceFindingsName(folderSourceFindingsName: string) {
    return this.pathTemplates.folderSourceFindingsPathTemplate.match(folderSourceFindingsName).source;
  }

  /**
   * Parse the finding from FolderSourceFindings resource.
   *
   * @param {string} folderSourceFindingsName
   *   A fully-qualified path representing folder_source_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceFindingsName(folderSourceFindingsName: string) {
    return this.pathTemplates.folderSourceFindingsPathTemplate.match(folderSourceFindingsName).finding;
  }

  /**
   * Return a fully-qualified folderSourceLocationFindingExternalsystem resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  folderSourceLocationFindingExternalsystemPath(folder:string,source:string,location:string,finding:string,externalsystem:string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.render({
      folder: folder,
      source: source,
      location: location,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the folder from FolderSourceLocationFindingExternalsystem resource.
   *
   * @param {string} folderSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing folder_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceLocationFindingExternalsystemName(folderSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.match(folderSourceLocationFindingExternalsystemName).folder;
  }

  /**
   * Parse the source from FolderSourceLocationFindingExternalsystem resource.
   *
   * @param {string} folderSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing folder_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceLocationFindingExternalsystemName(folderSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.match(folderSourceLocationFindingExternalsystemName).source;
  }

  /**
   * Parse the location from FolderSourceLocationFindingExternalsystem resource.
   *
   * @param {string} folderSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing folder_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderSourceLocationFindingExternalsystemName(folderSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.match(folderSourceLocationFindingExternalsystemName).location;
  }

  /**
   * Parse the finding from FolderSourceLocationFindingExternalsystem resource.
   *
   * @param {string} folderSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing folder_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceLocationFindingExternalsystemName(folderSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.match(folderSourceLocationFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from FolderSourceLocationFindingExternalsystem resource.
   *
   * @param {string} folderSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing folder_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromFolderSourceLocationFindingExternalsystemName(folderSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.folderSourceLocationFindingExternalsystemPathTemplate.match(folderSourceLocationFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified folderSourceLocationFindingSecurityMarks resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  folderSourceLocationFindingSecurityMarksPath(folder:string,source:string,location:string,finding:string) {
    return this.pathTemplates.folderSourceLocationFindingSecurityMarksPathTemplate.render({
      folder: folder,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the folder from FolderSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} folderSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceLocationFindingSecurityMarksName(folderSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceLocationFindingSecurityMarksPathTemplate.match(folderSourceLocationFindingSecurityMarksName).folder;
  }

  /**
   * Parse the source from FolderSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} folderSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceLocationFindingSecurityMarksName(folderSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceLocationFindingSecurityMarksPathTemplate.match(folderSourceLocationFindingSecurityMarksName).source;
  }

  /**
   * Parse the location from FolderSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} folderSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderSourceLocationFindingSecurityMarksName(folderSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceLocationFindingSecurityMarksPathTemplate.match(folderSourceLocationFindingSecurityMarksName).location;
  }

  /**
   * Parse the finding from FolderSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} folderSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing folder_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceLocationFindingSecurityMarksName(folderSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.folderSourceLocationFindingSecurityMarksPathTemplate.match(folderSourceLocationFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified folderSourceLocationFindings resource name string.
   *
   * @param {string} folder
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  folderSourceLocationFindingsPath(folder:string,source:string,location:string,finding:string) {
    return this.pathTemplates.folderSourceLocationFindingsPathTemplate.render({
      folder: folder,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the folder from FolderSourceLocationFindings resource.
   *
   * @param {string} folderSourceLocationFindingsName
   *   A fully-qualified path representing folder_source_location_findings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSourceLocationFindingsName(folderSourceLocationFindingsName: string) {
    return this.pathTemplates.folderSourceLocationFindingsPathTemplate.match(folderSourceLocationFindingsName).folder;
  }

  /**
   * Parse the source from FolderSourceLocationFindings resource.
   *
   * @param {string} folderSourceLocationFindingsName
   *   A fully-qualified path representing folder_source_location_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromFolderSourceLocationFindingsName(folderSourceLocationFindingsName: string) {
    return this.pathTemplates.folderSourceLocationFindingsPathTemplate.match(folderSourceLocationFindingsName).source;
  }

  /**
   * Parse the location from FolderSourceLocationFindings resource.
   *
   * @param {string} folderSourceLocationFindingsName
   *   A fully-qualified path representing folder_source_location_findings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderSourceLocationFindingsName(folderSourceLocationFindingsName: string) {
    return this.pathTemplates.folderSourceLocationFindingsPathTemplate.match(folderSourceLocationFindingsName).location;
  }

  /**
   * Parse the finding from FolderSourceLocationFindings resource.
   *
   * @param {string} folderSourceLocationFindingsName
   *   A fully-qualified path representing folder_source_location_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFolderSourceLocationFindingsName(folderSourceLocationFindingsName: string) {
    return this.pathTemplates.folderSourceLocationFindingsPathTemplate.match(folderSourceLocationFindingsName).finding;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization:string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName).organization;
  }

  /**
   * Return a fully-qualified organizationAssetSecurityMarks resource name string.
   *
   * @param {string} organization
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  organizationAssetSecurityMarksPath(organization:string,asset:string) {
    return this.pathTemplates.organizationAssetSecurityMarksPathTemplate.render({
      organization: organization,
      asset: asset,
    });
  }

  /**
   * Parse the organization from OrganizationAssetSecurityMarks resource.
   *
   * @param {string} organizationAssetSecurityMarksName
   *   A fully-qualified path representing organization_asset_securityMarks resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAssetSecurityMarksName(organizationAssetSecurityMarksName: string) {
    return this.pathTemplates.organizationAssetSecurityMarksPathTemplate.match(organizationAssetSecurityMarksName).organization;
  }

  /**
   * Parse the asset from OrganizationAssetSecurityMarks resource.
   *
   * @param {string} organizationAssetSecurityMarksName
   *   A fully-qualified path representing organization_asset_securityMarks resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromOrganizationAssetSecurityMarksName(organizationAssetSecurityMarksName: string) {
    return this.pathTemplates.organizationAssetSecurityMarksPathTemplate.match(organizationAssetSecurityMarksName).asset;
  }

  /**
   * Return a fully-qualified organizationConstraintName resource name string.
   *
   * @param {string} organization
   * @param {string} constraint_name
   * @returns {string} Resource name string.
   */
  organizationConstraintNamePath(organization:string,constraintName:string) {
    return this.pathTemplates.organizationConstraintNamePathTemplate.render({
      organization: organization,
      constraint_name: constraintName,
    });
  }

  /**
   * Parse the organization from OrganizationConstraintName resource.
   *
   * @param {string} organizationConstraintNameName
   *   A fully-qualified path representing organization_constraint_name resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationConstraintNameName(organizationConstraintNameName: string) {
    return this.pathTemplates.organizationConstraintNamePathTemplate.match(organizationConstraintNameName).organization;
  }

  /**
   * Parse the constraint_name from OrganizationConstraintName resource.
   *
   * @param {string} organizationConstraintNameName
   *   A fully-qualified path representing organization_constraint_name resource.
   * @returns {string} A string representing the constraint_name.
   */
  matchConstraintNameFromOrganizationConstraintNameName(organizationConstraintNameName: string) {
    return this.pathTemplates.organizationConstraintNamePathTemplate.match(organizationConstraintNameName).constraint_name;
  }

  /**
   * Return a fully-qualified organizationLocation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @returns {string} Resource name string.
   */
  organizationLocationPath(organization:string,location:string) {
    return this.pathTemplates.organizationLocationPathTemplate.render({
      organization: organization,
      location: location,
    });
  }

  /**
   * Parse the organization from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).organization;
  }

  /**
   * Parse the location from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).location;
  }

  /**
   * Return a fully-qualified organizationLocationBigQueryExports resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} exportParam
   * @returns {string} Resource name string.
   */
  organizationLocationBigQueryExportsPath(organization:string,location:string,exportParam:string) {
    return this.pathTemplates.organizationLocationBigQueryExportsPathTemplate.render({
      organization: organization,
      location: location,
      export: exportParam,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBigQueryExports resource.
   *
   * @param {string} organizationLocationBigQueryExportsName
   *   A fully-qualified path representing organization_location_bigQueryExports resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBigQueryExportsName(organizationLocationBigQueryExportsName: string) {
    return this.pathTemplates.organizationLocationBigQueryExportsPathTemplate.match(organizationLocationBigQueryExportsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBigQueryExports resource.
   *
   * @param {string} organizationLocationBigQueryExportsName
   *   A fully-qualified path representing organization_location_bigQueryExports resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBigQueryExportsName(organizationLocationBigQueryExportsName: string) {
    return this.pathTemplates.organizationLocationBigQueryExportsPathTemplate.match(organizationLocationBigQueryExportsName).location;
  }

  /**
   * Parse the export from OrganizationLocationBigQueryExports resource.
   *
   * @param {string} organizationLocationBigQueryExportsName
   *   A fully-qualified path representing organization_location_bigQueryExports resource.
   * @returns {string} A string representing the export.
   */
  matchExportFromOrganizationLocationBigQueryExportsName(organizationLocationBigQueryExportsName: string) {
    return this.pathTemplates.organizationLocationBigQueryExportsPathTemplate.match(organizationLocationBigQueryExportsName).export;
  }

  /**
   * Return a fully-qualified organizationLocationMuteConfigs resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  organizationLocationMuteConfigsPath(organization:string,location:string,muteConfig:string) {
    return this.pathTemplates.organizationLocationMuteConfigsPathTemplate.render({
      organization: organization,
      location: location,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the organization from OrganizationLocationMuteConfigs resource.
   *
   * @param {string} organizationLocationMuteConfigsName
   *   A fully-qualified path representing organization_location_muteConfigs resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationMuteConfigsName(organizationLocationMuteConfigsName: string) {
    return this.pathTemplates.organizationLocationMuteConfigsPathTemplate.match(organizationLocationMuteConfigsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationMuteConfigs resource.
   *
   * @param {string} organizationLocationMuteConfigsName
   *   A fully-qualified path representing organization_location_muteConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationMuteConfigsName(organizationLocationMuteConfigsName: string) {
    return this.pathTemplates.organizationLocationMuteConfigsPathTemplate.match(organizationLocationMuteConfigsName).location;
  }

  /**
   * Parse the mute_config from OrganizationLocationMuteConfigs resource.
   *
   * @param {string} organizationLocationMuteConfigsName
   *   A fully-qualified path representing organization_location_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromOrganizationLocationMuteConfigsName(organizationLocationMuteConfigsName: string) {
    return this.pathTemplates.organizationLocationMuteConfigsPathTemplate.match(organizationLocationMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified organizationLocationNotificationConfigs resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} notification_config
   * @returns {string} Resource name string.
   */
  organizationLocationNotificationConfigsPath(organization:string,location:string,notificationConfig:string) {
    return this.pathTemplates.organizationLocationNotificationConfigsPathTemplate.render({
      organization: organization,
      location: location,
      notification_config: notificationConfig,
    });
  }

  /**
   * Parse the organization from OrganizationLocationNotificationConfigs resource.
   *
   * @param {string} organizationLocationNotificationConfigsName
   *   A fully-qualified path representing organization_location_notificationConfigs resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationNotificationConfigsName(organizationLocationNotificationConfigsName: string) {
    return this.pathTemplates.organizationLocationNotificationConfigsPathTemplate.match(organizationLocationNotificationConfigsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationNotificationConfigs resource.
   *
   * @param {string} organizationLocationNotificationConfigsName
   *   A fully-qualified path representing organization_location_notificationConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationNotificationConfigsName(organizationLocationNotificationConfigsName: string) {
    return this.pathTemplates.organizationLocationNotificationConfigsPathTemplate.match(organizationLocationNotificationConfigsName).location;
  }

  /**
   * Parse the notification_config from OrganizationLocationNotificationConfigs resource.
   *
   * @param {string} organizationLocationNotificationConfigsName
   *   A fully-qualified path representing organization_location_notificationConfigs resource.
   * @returns {string} A string representing the notification_config.
   */
  matchNotificationConfigFromOrganizationLocationNotificationConfigsName(organizationLocationNotificationConfigsName: string) {
    return this.pathTemplates.organizationLocationNotificationConfigsPathTemplate.match(organizationLocationNotificationConfigsName).notification_config;
  }

  /**
   * Return a fully-qualified organizationLocationResourceValueConfigs resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} resource_value_config
   * @returns {string} Resource name string.
   */
  organizationLocationResourceValueConfigsPath(organization:string,location:string,resourceValueConfig:string) {
    return this.pathTemplates.organizationLocationResourceValueConfigsPathTemplate.render({
      organization: organization,
      location: location,
      resource_value_config: resourceValueConfig,
    });
  }

  /**
   * Parse the organization from OrganizationLocationResourceValueConfigs resource.
   *
   * @param {string} organizationLocationResourceValueConfigsName
   *   A fully-qualified path representing organization_location_resourceValueConfigs resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationResourceValueConfigsName(organizationLocationResourceValueConfigsName: string) {
    return this.pathTemplates.organizationLocationResourceValueConfigsPathTemplate.match(organizationLocationResourceValueConfigsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationResourceValueConfigs resource.
   *
   * @param {string} organizationLocationResourceValueConfigsName
   *   A fully-qualified path representing organization_location_resourceValueConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationResourceValueConfigsName(organizationLocationResourceValueConfigsName: string) {
    return this.pathTemplates.organizationLocationResourceValueConfigsPathTemplate.match(organizationLocationResourceValueConfigsName).location;
  }

  /**
   * Parse the resource_value_config from OrganizationLocationResourceValueConfigs resource.
   *
   * @param {string} organizationLocationResourceValueConfigsName
   *   A fully-qualified path representing organization_location_resourceValueConfigs resource.
   * @returns {string} A string representing the resource_value_config.
   */
  matchResourceValueConfigFromOrganizationLocationResourceValueConfigsName(organizationLocationResourceValueConfigsName: string) {
    return this.pathTemplates.organizationLocationResourceValueConfigsPathTemplate.match(organizationLocationResourceValueConfigsName).resource_value_config;
  }

  /**
   * Return a fully-qualified organizationLocationSimluationValuedResources resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} simluation
   * @param {string} valued_resource
   * @returns {string} Resource name string.
   */
  organizationLocationSimluationValuedResourcesPath(organization:string,location:string,simluation:string,valuedResource:string) {
    return this.pathTemplates.organizationLocationSimluationValuedResourcesPathTemplate.render({
      organization: organization,
      location: location,
      simluation: simluation,
      valued_resource: valuedResource,
    });
  }

  /**
   * Parse the organization from OrganizationLocationSimluationValuedResources resource.
   *
   * @param {string} organizationLocationSimluationValuedResourcesName
   *   A fully-qualified path representing organization_location_simluation_valuedResources resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationSimluationValuedResourcesName(organizationLocationSimluationValuedResourcesName: string) {
    return this.pathTemplates.organizationLocationSimluationValuedResourcesPathTemplate.match(organizationLocationSimluationValuedResourcesName).organization;
  }

  /**
   * Parse the location from OrganizationLocationSimluationValuedResources resource.
   *
   * @param {string} organizationLocationSimluationValuedResourcesName
   *   A fully-qualified path representing organization_location_simluation_valuedResources resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationSimluationValuedResourcesName(organizationLocationSimluationValuedResourcesName: string) {
    return this.pathTemplates.organizationLocationSimluationValuedResourcesPathTemplate.match(organizationLocationSimluationValuedResourcesName).location;
  }

  /**
   * Parse the simluation from OrganizationLocationSimluationValuedResources resource.
   *
   * @param {string} organizationLocationSimluationValuedResourcesName
   *   A fully-qualified path representing organization_location_simluation_valuedResources resource.
   * @returns {string} A string representing the simluation.
   */
  matchSimluationFromOrganizationLocationSimluationValuedResourcesName(organizationLocationSimluationValuedResourcesName: string) {
    return this.pathTemplates.organizationLocationSimluationValuedResourcesPathTemplate.match(organizationLocationSimluationValuedResourcesName).simluation;
  }

  /**
   * Parse the valued_resource from OrganizationLocationSimluationValuedResources resource.
   *
   * @param {string} organizationLocationSimluationValuedResourcesName
   *   A fully-qualified path representing organization_location_simluation_valuedResources resource.
   * @returns {string} A string representing the valued_resource.
   */
  matchValuedResourceFromOrganizationLocationSimluationValuedResourcesName(organizationLocationSimluationValuedResourcesName: string) {
    return this.pathTemplates.organizationLocationSimluationValuedResourcesPathTemplate.match(organizationLocationSimluationValuedResourcesName).valued_resource;
  }

  /**
   * Return a fully-qualified organizationLocationSimulationValuedResourceAttackPaths resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} simulation
   * @param {string} valued_resource
   * @param {string} attack_path
   * @returns {string} Resource name string.
   */
  organizationLocationSimulationValuedResourceAttackPathsPath(organization:string,location:string,simulation:string,valuedResource:string,attackPath:string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.render({
      organization: organization,
      location: location,
      simulation: simulation,
      valued_resource: valuedResource,
      attack_path: attackPath,
    });
  }

  /**
   * Parse the organization from OrganizationLocationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationLocationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_location_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationSimulationValuedResourceAttackPathsName(organizationLocationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.match(organizationLocationSimulationValuedResourceAttackPathsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationLocationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_location_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationSimulationValuedResourceAttackPathsName(organizationLocationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.match(organizationLocationSimulationValuedResourceAttackPathsName).location;
  }

  /**
   * Parse the simulation from OrganizationLocationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationLocationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_location_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the simulation.
   */
  matchSimulationFromOrganizationLocationSimulationValuedResourceAttackPathsName(organizationLocationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.match(organizationLocationSimulationValuedResourceAttackPathsName).simulation;
  }

  /**
   * Parse the valued_resource from OrganizationLocationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationLocationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_location_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the valued_resource.
   */
  matchValuedResourceFromOrganizationLocationSimulationValuedResourceAttackPathsName(organizationLocationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.match(organizationLocationSimulationValuedResourceAttackPathsName).valued_resource;
  }

  /**
   * Parse the attack_path from OrganizationLocationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationLocationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_location_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the attack_path.
   */
  matchAttackPathFromOrganizationLocationSimulationValuedResourceAttackPathsName(organizationLocationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationLocationSimulationValuedResourceAttackPathsPathTemplate.match(organizationLocationSimulationValuedResourceAttackPathsName).attack_path;
  }

  /**
   * Return a fully-qualified organizationLocationSimulations resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} simluation
   * @returns {string} Resource name string.
   */
  organizationLocationSimulationsPath(organization:string,location:string,simluation:string) {
    return this.pathTemplates.organizationLocationSimulationsPathTemplate.render({
      organization: organization,
      location: location,
      simluation: simluation,
    });
  }

  /**
   * Parse the organization from OrganizationLocationSimulations resource.
   *
   * @param {string} organizationLocationSimulationsName
   *   A fully-qualified path representing organization_location_simulations resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationSimulationsName(organizationLocationSimulationsName: string) {
    return this.pathTemplates.organizationLocationSimulationsPathTemplate.match(organizationLocationSimulationsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationSimulations resource.
   *
   * @param {string} organizationLocationSimulationsName
   *   A fully-qualified path representing organization_location_simulations resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationSimulationsName(organizationLocationSimulationsName: string) {
    return this.pathTemplates.organizationLocationSimulationsPathTemplate.match(organizationLocationSimulationsName).location;
  }

  /**
   * Parse the simluation from OrganizationLocationSimulations resource.
   *
   * @param {string} organizationLocationSimulationsName
   *   A fully-qualified path representing organization_location_simulations resource.
   * @returns {string} A string representing the simluation.
   */
  matchSimluationFromOrganizationLocationSimulationsName(organizationLocationSimulationsName: string) {
    return this.pathTemplates.organizationLocationSimulationsPathTemplate.match(organizationLocationSimulationsName).simluation;
  }

  /**
   * Return a fully-qualified organizationMuteConfigs resource name string.
   *
   * @param {string} organization
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  organizationMuteConfigsPath(organization:string,muteConfig:string) {
    return this.pathTemplates.organizationMuteConfigsPathTemplate.render({
      organization: organization,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the organization from OrganizationMuteConfigs resource.
   *
   * @param {string} organizationMuteConfigsName
   *   A fully-qualified path representing organization_muteConfigs resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationMuteConfigsName(organizationMuteConfigsName: string) {
    return this.pathTemplates.organizationMuteConfigsPathTemplate.match(organizationMuteConfigsName).organization;
  }

  /**
   * Parse the mute_config from OrganizationMuteConfigs resource.
   *
   * @param {string} organizationMuteConfigsName
   *   A fully-qualified path representing organization_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromOrganizationMuteConfigsName(organizationMuteConfigsName: string) {
    return this.pathTemplates.organizationMuteConfigsPathTemplate.match(organizationMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified organizationResourceValueConfigs resource name string.
   *
   * @param {string} organization
   * @param {string} resource_value_config
   * @returns {string} Resource name string.
   */
  organizationResourceValueConfigsPath(organization:string,resourceValueConfig:string) {
    return this.pathTemplates.organizationResourceValueConfigsPathTemplate.render({
      organization: organization,
      resource_value_config: resourceValueConfig,
    });
  }

  /**
   * Parse the organization from OrganizationResourceValueConfigs resource.
   *
   * @param {string} organizationResourceValueConfigsName
   *   A fully-qualified path representing organization_resourceValueConfigs resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationResourceValueConfigsName(organizationResourceValueConfigsName: string) {
    return this.pathTemplates.organizationResourceValueConfigsPathTemplate.match(organizationResourceValueConfigsName).organization;
  }

  /**
   * Parse the resource_value_config from OrganizationResourceValueConfigs resource.
   *
   * @param {string} organizationResourceValueConfigsName
   *   A fully-qualified path representing organization_resourceValueConfigs resource.
   * @returns {string} A string representing the resource_value_config.
   */
  matchResourceValueConfigFromOrganizationResourceValueConfigsName(organizationResourceValueConfigsName: string) {
    return this.pathTemplates.organizationResourceValueConfigsPathTemplate.match(organizationResourceValueConfigsName).resource_value_config;
  }

  /**
   * Return a fully-qualified organizationSimulationValuedResourceAttackPaths resource name string.
   *
   * @param {string} organization
   * @param {string} simulation
   * @param {string} valued_resource
   * @param {string} attack_path
   * @returns {string} Resource name string.
   */
  organizationSimulationValuedResourceAttackPathsPath(organization:string,simulation:string,valuedResource:string,attackPath:string) {
    return this.pathTemplates.organizationSimulationValuedResourceAttackPathsPathTemplate.render({
      organization: organization,
      simulation: simulation,
      valued_resource: valuedResource,
      attack_path: attackPath,
    });
  }

  /**
   * Parse the organization from OrganizationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSimulationValuedResourceAttackPathsName(organizationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationSimulationValuedResourceAttackPathsPathTemplate.match(organizationSimulationValuedResourceAttackPathsName).organization;
  }

  /**
   * Parse the simulation from OrganizationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the simulation.
   */
  matchSimulationFromOrganizationSimulationValuedResourceAttackPathsName(organizationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationSimulationValuedResourceAttackPathsPathTemplate.match(organizationSimulationValuedResourceAttackPathsName).simulation;
  }

  /**
   * Parse the valued_resource from OrganizationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the valued_resource.
   */
  matchValuedResourceFromOrganizationSimulationValuedResourceAttackPathsName(organizationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationSimulationValuedResourceAttackPathsPathTemplate.match(organizationSimulationValuedResourceAttackPathsName).valued_resource;
  }

  /**
   * Parse the attack_path from OrganizationSimulationValuedResourceAttackPaths resource.
   *
   * @param {string} organizationSimulationValuedResourceAttackPathsName
   *   A fully-qualified path representing organization_simulation_valued_resource_attackPaths resource.
   * @returns {string} A string representing the attack_path.
   */
  matchAttackPathFromOrganizationSimulationValuedResourceAttackPathsName(organizationSimulationValuedResourceAttackPathsName: string) {
    return this.pathTemplates.organizationSimulationValuedResourceAttackPathsPathTemplate.match(organizationSimulationValuedResourceAttackPathsName).attack_path;
  }

  /**
   * Return a fully-qualified organizationSimulationValuedResources resource name string.
   *
   * @param {string} organization
   * @param {string} simulation
   * @param {string} valued_resource
   * @returns {string} Resource name string.
   */
  organizationSimulationValuedResourcesPath(organization:string,simulation:string,valuedResource:string) {
    return this.pathTemplates.organizationSimulationValuedResourcesPathTemplate.render({
      organization: organization,
      simulation: simulation,
      valued_resource: valuedResource,
    });
  }

  /**
   * Parse the organization from OrganizationSimulationValuedResources resource.
   *
   * @param {string} organizationSimulationValuedResourcesName
   *   A fully-qualified path representing organization_simulation_valuedResources resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSimulationValuedResourcesName(organizationSimulationValuedResourcesName: string) {
    return this.pathTemplates.organizationSimulationValuedResourcesPathTemplate.match(organizationSimulationValuedResourcesName).organization;
  }

  /**
   * Parse the simulation from OrganizationSimulationValuedResources resource.
   *
   * @param {string} organizationSimulationValuedResourcesName
   *   A fully-qualified path representing organization_simulation_valuedResources resource.
   * @returns {string} A string representing the simulation.
   */
  matchSimulationFromOrganizationSimulationValuedResourcesName(organizationSimulationValuedResourcesName: string) {
    return this.pathTemplates.organizationSimulationValuedResourcesPathTemplate.match(organizationSimulationValuedResourcesName).simulation;
  }

  /**
   * Parse the valued_resource from OrganizationSimulationValuedResources resource.
   *
   * @param {string} organizationSimulationValuedResourcesName
   *   A fully-qualified path representing organization_simulation_valuedResources resource.
   * @returns {string} A string representing the valued_resource.
   */
  matchValuedResourceFromOrganizationSimulationValuedResourcesName(organizationSimulationValuedResourcesName: string) {
    return this.pathTemplates.organizationSimulationValuedResourcesPathTemplate.match(organizationSimulationValuedResourcesName).valued_resource;
  }

  /**
   * Return a fully-qualified organizationSimulations resource name string.
   *
   * @param {string} organization
   * @param {string} simulation
   * @returns {string} Resource name string.
   */
  organizationSimulationsPath(organization:string,simulation:string) {
    return this.pathTemplates.organizationSimulationsPathTemplate.render({
      organization: organization,
      simulation: simulation,
    });
  }

  /**
   * Parse the organization from OrganizationSimulations resource.
   *
   * @param {string} organizationSimulationsName
   *   A fully-qualified path representing organization_simulations resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSimulationsName(organizationSimulationsName: string) {
    return this.pathTemplates.organizationSimulationsPathTemplate.match(organizationSimulationsName).organization;
  }

  /**
   * Parse the simulation from OrganizationSimulations resource.
   *
   * @param {string} organizationSimulationsName
   *   A fully-qualified path representing organization_simulations resource.
   * @returns {string} A string representing the simulation.
   */
  matchSimulationFromOrganizationSimulationsName(organizationSimulationsName: string) {
    return this.pathTemplates.organizationSimulationsPathTemplate.match(organizationSimulationsName).simulation;
  }

  /**
   * Return a fully-qualified organizationSource resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @returns {string} Resource name string.
   */
  organizationSourcePath(organization:string,source:string) {
    return this.pathTemplates.organizationSourcePathTemplate.render({
      organization: organization,
      source: source,
    });
  }

  /**
   * Parse the organization from OrganizationSource resource.
   *
   * @param {string} organizationSourceName
   *   A fully-qualified path representing organization_source resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceName(organizationSourceName: string) {
    return this.pathTemplates.organizationSourcePathTemplate.match(organizationSourceName).organization;
  }

  /**
   * Parse the source from OrganizationSource resource.
   *
   * @param {string} organizationSourceName
   *   A fully-qualified path representing organization_source resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceName(organizationSourceName: string) {
    return this.pathTemplates.organizationSourcePathTemplate.match(organizationSourceName).source;
  }

  /**
   * Return a fully-qualified organizationSourceFindingExternalsystem resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  organizationSourceFindingExternalsystemPath(organization:string,source:string,finding:string,externalsystem:string) {
    return this.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.render({
      organization: organization,
      source: source,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the organization from OrganizationSourceFindingExternalsystem resource.
   *
   * @param {string} organizationSourceFindingExternalsystemName
   *   A fully-qualified path representing organization_source_finding_externalsystem resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceFindingExternalsystemName(organizationSourceFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.match(organizationSourceFindingExternalsystemName).organization;
  }

  /**
   * Parse the source from OrganizationSourceFindingExternalsystem resource.
   *
   * @param {string} organizationSourceFindingExternalsystemName
   *   A fully-qualified path representing organization_source_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceFindingExternalsystemName(organizationSourceFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.match(organizationSourceFindingExternalsystemName).source;
  }

  /**
   * Parse the finding from OrganizationSourceFindingExternalsystem resource.
   *
   * @param {string} organizationSourceFindingExternalsystemName
   *   A fully-qualified path representing organization_source_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceFindingExternalsystemName(organizationSourceFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.match(organizationSourceFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from OrganizationSourceFindingExternalsystem resource.
   *
   * @param {string} organizationSourceFindingExternalsystemName
   *   A fully-qualified path representing organization_source_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromOrganizationSourceFindingExternalsystemName(organizationSourceFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceFindingExternalsystemPathTemplate.match(organizationSourceFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified organizationSourceFindingSecurityMarks resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  organizationSourceFindingSecurityMarksPath(organization:string,source:string,finding:string) {
    return this.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.render({
      organization: organization,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the organization from OrganizationSourceFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_finding_securityMarks resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceFindingSecurityMarksName(organizationSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.match(organizationSourceFindingSecurityMarksName).organization;
  }

  /**
   * Parse the source from OrganizationSourceFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceFindingSecurityMarksName(organizationSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.match(organizationSourceFindingSecurityMarksName).source;
  }

  /**
   * Parse the finding from OrganizationSourceFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceFindingSecurityMarksName(organizationSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceFindingSecurityMarksPathTemplate.match(organizationSourceFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified organizationSourceFindings resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  organizationSourceFindingsPath(organization:string,source:string,finding:string) {
    return this.pathTemplates.organizationSourceFindingsPathTemplate.render({
      organization: organization,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the organization from OrganizationSourceFindings resource.
   *
   * @param {string} organizationSourceFindingsName
   *   A fully-qualified path representing organization_source_findings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceFindingsName(organizationSourceFindingsName: string) {
    return this.pathTemplates.organizationSourceFindingsPathTemplate.match(organizationSourceFindingsName).organization;
  }

  /**
   * Parse the source from OrganizationSourceFindings resource.
   *
   * @param {string} organizationSourceFindingsName
   *   A fully-qualified path representing organization_source_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceFindingsName(organizationSourceFindingsName: string) {
    return this.pathTemplates.organizationSourceFindingsPathTemplate.match(organizationSourceFindingsName).source;
  }

  /**
   * Parse the finding from OrganizationSourceFindings resource.
   *
   * @param {string} organizationSourceFindingsName
   *   A fully-qualified path representing organization_source_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceFindingsName(organizationSourceFindingsName: string) {
    return this.pathTemplates.organizationSourceFindingsPathTemplate.match(organizationSourceFindingsName).finding;
  }

  /**
   * Return a fully-qualified organizationSourceLocationFindingExternalsystem resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  organizationSourceLocationFindingExternalsystemPath(organization:string,source:string,location:string,finding:string,externalsystem:string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.render({
      organization: organization,
      source: source,
      location: location,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the organization from OrganizationSourceLocationFindingExternalsystem resource.
   *
   * @param {string} organizationSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing organization_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceLocationFindingExternalsystemName(organizationSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.match(organizationSourceLocationFindingExternalsystemName).organization;
  }

  /**
   * Parse the source from OrganizationSourceLocationFindingExternalsystem resource.
   *
   * @param {string} organizationSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing organization_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceLocationFindingExternalsystemName(organizationSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.match(organizationSourceLocationFindingExternalsystemName).source;
  }

  /**
   * Parse the location from OrganizationSourceLocationFindingExternalsystem resource.
   *
   * @param {string} organizationSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing organization_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationSourceLocationFindingExternalsystemName(organizationSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.match(organizationSourceLocationFindingExternalsystemName).location;
  }

  /**
   * Parse the finding from OrganizationSourceLocationFindingExternalsystem resource.
   *
   * @param {string} organizationSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing organization_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceLocationFindingExternalsystemName(organizationSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.match(organizationSourceLocationFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from OrganizationSourceLocationFindingExternalsystem resource.
   *
   * @param {string} organizationSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing organization_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromOrganizationSourceLocationFindingExternalsystemName(organizationSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.organizationSourceLocationFindingExternalsystemPathTemplate.match(organizationSourceLocationFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified organizationSourceLocationFindingSecurityMarks resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  organizationSourceLocationFindingSecurityMarksPath(organization:string,source:string,location:string,finding:string) {
    return this.pathTemplates.organizationSourceLocationFindingSecurityMarksPathTemplate.render({
      organization: organization,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the organization from OrganizationSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceLocationFindingSecurityMarksName(organizationSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceLocationFindingSecurityMarksPathTemplate.match(organizationSourceLocationFindingSecurityMarksName).organization;
  }

  /**
   * Parse the source from OrganizationSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceLocationFindingSecurityMarksName(organizationSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceLocationFindingSecurityMarksPathTemplate.match(organizationSourceLocationFindingSecurityMarksName).source;
  }

  /**
   * Parse the location from OrganizationSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationSourceLocationFindingSecurityMarksName(organizationSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceLocationFindingSecurityMarksPathTemplate.match(organizationSourceLocationFindingSecurityMarksName).location;
  }

  /**
   * Parse the finding from OrganizationSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} organizationSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing organization_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceLocationFindingSecurityMarksName(organizationSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.organizationSourceLocationFindingSecurityMarksPathTemplate.match(organizationSourceLocationFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified organizationSourceLocationFindings resource name string.
   *
   * @param {string} organization
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  organizationSourceLocationFindingsPath(organization:string,source:string,location:string,finding:string) {
    return this.pathTemplates.organizationSourceLocationFindingsPathTemplate.render({
      organization: organization,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the organization from OrganizationSourceLocationFindings resource.
   *
   * @param {string} organizationSourceLocationFindingsName
   *   A fully-qualified path representing organization_source_location_findings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSourceLocationFindingsName(organizationSourceLocationFindingsName: string) {
    return this.pathTemplates.organizationSourceLocationFindingsPathTemplate.match(organizationSourceLocationFindingsName).organization;
  }

  /**
   * Parse the source from OrganizationSourceLocationFindings resource.
   *
   * @param {string} organizationSourceLocationFindingsName
   *   A fully-qualified path representing organization_source_location_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromOrganizationSourceLocationFindingsName(organizationSourceLocationFindingsName: string) {
    return this.pathTemplates.organizationSourceLocationFindingsPathTemplate.match(organizationSourceLocationFindingsName).source;
  }

  /**
   * Parse the location from OrganizationSourceLocationFindings resource.
   *
   * @param {string} organizationSourceLocationFindingsName
   *   A fully-qualified path representing organization_source_location_findings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationSourceLocationFindingsName(organizationSourceLocationFindingsName: string) {
    return this.pathTemplates.organizationSourceLocationFindingsPathTemplate.match(organizationSourceLocationFindingsName).location;
  }

  /**
   * Parse the finding from OrganizationSourceLocationFindings resource.
   *
   * @param {string} organizationSourceLocationFindingsName
   *   A fully-qualified path representing organization_source_location_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromOrganizationSourceLocationFindingsName(organizationSourceLocationFindingsName: string) {
    return this.pathTemplates.organizationSourceLocationFindingsPathTemplate.match(organizationSourceLocationFindingsName).finding;
  }

  /**
   * Return a fully-qualified projectAssetSecurityMarks resource name string.
   *
   * @param {string} project
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  projectAssetSecurityMarksPath(project:string,asset:string) {
    return this.pathTemplates.projectAssetSecurityMarksPathTemplate.render({
      project: project,
      asset: asset,
    });
  }

  /**
   * Parse the project from ProjectAssetSecurityMarks resource.
   *
   * @param {string} projectAssetSecurityMarksName
   *   A fully-qualified path representing project_asset_securityMarks resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAssetSecurityMarksName(projectAssetSecurityMarksName: string) {
    return this.pathTemplates.projectAssetSecurityMarksPathTemplate.match(projectAssetSecurityMarksName).project;
  }

  /**
   * Parse the asset from ProjectAssetSecurityMarks resource.
   *
   * @param {string} projectAssetSecurityMarksName
   *   A fully-qualified path representing project_asset_securityMarks resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromProjectAssetSecurityMarksName(projectAssetSecurityMarksName: string) {
    return this.pathTemplates.projectAssetSecurityMarksPathTemplate.match(projectAssetSecurityMarksName).asset;
  }

  /**
   * Return a fully-qualified projectConstraintName resource name string.
   *
   * @param {string} project
   * @param {string} constraint_name
   * @returns {string} Resource name string.
   */
  projectConstraintNamePath(project:string,constraintName:string) {
    return this.pathTemplates.projectConstraintNamePathTemplate.render({
      project: project,
      constraint_name: constraintName,
    });
  }

  /**
   * Parse the project from ProjectConstraintName resource.
   *
   * @param {string} projectConstraintNameName
   *   A fully-qualified path representing project_constraint_name resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectConstraintNameName(projectConstraintNameName: string) {
    return this.pathTemplates.projectConstraintNamePathTemplate.match(projectConstraintNameName).project;
  }

  /**
   * Parse the constraint_name from ProjectConstraintName resource.
   *
   * @param {string} projectConstraintNameName
   *   A fully-qualified path representing project_constraint_name resource.
   * @returns {string} A string representing the constraint_name.
   */
  matchConstraintNameFromProjectConstraintNameName(projectConstraintNameName: string) {
    return this.pathTemplates.projectConstraintNamePathTemplate.match(projectConstraintNameName).constraint_name;
  }

  /**
   * Return a fully-qualified projectLocationBigQueryExports resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} exportParam
   * @returns {string} Resource name string.
   */
  projectLocationBigQueryExportsPath(project:string,location:string,exportParam:string) {
    return this.pathTemplates.projectLocationBigQueryExportsPathTemplate.render({
      project: project,
      location: location,
      export: exportParam,
    });
  }

  /**
   * Parse the project from ProjectLocationBigQueryExports resource.
   *
   * @param {string} projectLocationBigQueryExportsName
   *   A fully-qualified path representing project_location_bigQueryExports resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBigQueryExportsName(projectLocationBigQueryExportsName: string) {
    return this.pathTemplates.projectLocationBigQueryExportsPathTemplate.match(projectLocationBigQueryExportsName).project;
  }

  /**
   * Parse the location from ProjectLocationBigQueryExports resource.
   *
   * @param {string} projectLocationBigQueryExportsName
   *   A fully-qualified path representing project_location_bigQueryExports resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBigQueryExportsName(projectLocationBigQueryExportsName: string) {
    return this.pathTemplates.projectLocationBigQueryExportsPathTemplate.match(projectLocationBigQueryExportsName).location;
  }

  /**
   * Parse the export from ProjectLocationBigQueryExports resource.
   *
   * @param {string} projectLocationBigQueryExportsName
   *   A fully-qualified path representing project_location_bigQueryExports resource.
   * @returns {string} A string representing the export.
   */
  matchExportFromProjectLocationBigQueryExportsName(projectLocationBigQueryExportsName: string) {
    return this.pathTemplates.projectLocationBigQueryExportsPathTemplate.match(projectLocationBigQueryExportsName).export;
  }

  /**
   * Return a fully-qualified projectLocationMuteConfigs resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  projectLocationMuteConfigsPath(project:string,location:string,muteConfig:string) {
    return this.pathTemplates.projectLocationMuteConfigsPathTemplate.render({
      project: project,
      location: location,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the project from ProjectLocationMuteConfigs resource.
   *
   * @param {string} projectLocationMuteConfigsName
   *   A fully-qualified path representing project_location_muteConfigs resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationMuteConfigsName(projectLocationMuteConfigsName: string) {
    return this.pathTemplates.projectLocationMuteConfigsPathTemplate.match(projectLocationMuteConfigsName).project;
  }

  /**
   * Parse the location from ProjectLocationMuteConfigs resource.
   *
   * @param {string} projectLocationMuteConfigsName
   *   A fully-qualified path representing project_location_muteConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationMuteConfigsName(projectLocationMuteConfigsName: string) {
    return this.pathTemplates.projectLocationMuteConfigsPathTemplate.match(projectLocationMuteConfigsName).location;
  }

  /**
   * Parse the mute_config from ProjectLocationMuteConfigs resource.
   *
   * @param {string} projectLocationMuteConfigsName
   *   A fully-qualified path representing project_location_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromProjectLocationMuteConfigsName(projectLocationMuteConfigsName: string) {
    return this.pathTemplates.projectLocationMuteConfigsPathTemplate.match(projectLocationMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified projectLocationNotificationConfigs resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} notification_config
   * @returns {string} Resource name string.
   */
  projectLocationNotificationConfigsPath(project:string,location:string,notificationConfig:string) {
    return this.pathTemplates.projectLocationNotificationConfigsPathTemplate.render({
      project: project,
      location: location,
      notification_config: notificationConfig,
    });
  }

  /**
   * Parse the project from ProjectLocationNotificationConfigs resource.
   *
   * @param {string} projectLocationNotificationConfigsName
   *   A fully-qualified path representing project_location_notificationConfigs resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationNotificationConfigsName(projectLocationNotificationConfigsName: string) {
    return this.pathTemplates.projectLocationNotificationConfigsPathTemplate.match(projectLocationNotificationConfigsName).project;
  }

  /**
   * Parse the location from ProjectLocationNotificationConfigs resource.
   *
   * @param {string} projectLocationNotificationConfigsName
   *   A fully-qualified path representing project_location_notificationConfigs resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationNotificationConfigsName(projectLocationNotificationConfigsName: string) {
    return this.pathTemplates.projectLocationNotificationConfigsPathTemplate.match(projectLocationNotificationConfigsName).location;
  }

  /**
   * Parse the notification_config from ProjectLocationNotificationConfigs resource.
   *
   * @param {string} projectLocationNotificationConfigsName
   *   A fully-qualified path representing project_location_notificationConfigs resource.
   * @returns {string} A string representing the notification_config.
   */
  matchNotificationConfigFromProjectLocationNotificationConfigsName(projectLocationNotificationConfigsName: string) {
    return this.pathTemplates.projectLocationNotificationConfigsPathTemplate.match(projectLocationNotificationConfigsName).notification_config;
  }

  /**
   * Return a fully-qualified projectMuteConfigs resource name string.
   *
   * @param {string} project
   * @param {string} mute_config
   * @returns {string} Resource name string.
   */
  projectMuteConfigsPath(project:string,muteConfig:string) {
    return this.pathTemplates.projectMuteConfigsPathTemplate.render({
      project: project,
      mute_config: muteConfig,
    });
  }

  /**
   * Parse the project from ProjectMuteConfigs resource.
   *
   * @param {string} projectMuteConfigsName
   *   A fully-qualified path representing project_muteConfigs resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectMuteConfigsName(projectMuteConfigsName: string) {
    return this.pathTemplates.projectMuteConfigsPathTemplate.match(projectMuteConfigsName).project;
  }

  /**
   * Parse the mute_config from ProjectMuteConfigs resource.
   *
   * @param {string} projectMuteConfigsName
   *   A fully-qualified path representing project_muteConfigs resource.
   * @returns {string} A string representing the mute_config.
   */
  matchMuteConfigFromProjectMuteConfigsName(projectMuteConfigsName: string) {
    return this.pathTemplates.projectMuteConfigsPathTemplate.match(projectMuteConfigsName).mute_config;
  }

  /**
   * Return a fully-qualified projectSource resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @returns {string} Resource name string.
   */
  projectSourcePath(project:string,source:string) {
    return this.pathTemplates.projectSourcePathTemplate.render({
      project: project,
      source: source,
    });
  }

  /**
   * Parse the project from ProjectSource resource.
   *
   * @param {string} projectSourceName
   *   A fully-qualified path representing project_source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceName(projectSourceName: string) {
    return this.pathTemplates.projectSourcePathTemplate.match(projectSourceName).project;
  }

  /**
   * Parse the source from ProjectSource resource.
   *
   * @param {string} projectSourceName
   *   A fully-qualified path representing project_source resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceName(projectSourceName: string) {
    return this.pathTemplates.projectSourcePathTemplate.match(projectSourceName).source;
  }

  /**
   * Return a fully-qualified projectSourceFindingExternalsystem resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  projectSourceFindingExternalsystemPath(project:string,source:string,finding:string,externalsystem:string) {
    return this.pathTemplates.projectSourceFindingExternalsystemPathTemplate.render({
      project: project,
      source: source,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the project from ProjectSourceFindingExternalsystem resource.
   *
   * @param {string} projectSourceFindingExternalsystemName
   *   A fully-qualified path representing project_source_finding_externalsystem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceFindingExternalsystemName(projectSourceFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceFindingExternalsystemPathTemplate.match(projectSourceFindingExternalsystemName).project;
  }

  /**
   * Parse the source from ProjectSourceFindingExternalsystem resource.
   *
   * @param {string} projectSourceFindingExternalsystemName
   *   A fully-qualified path representing project_source_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceFindingExternalsystemName(projectSourceFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceFindingExternalsystemPathTemplate.match(projectSourceFindingExternalsystemName).source;
  }

  /**
   * Parse the finding from ProjectSourceFindingExternalsystem resource.
   *
   * @param {string} projectSourceFindingExternalsystemName
   *   A fully-qualified path representing project_source_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceFindingExternalsystemName(projectSourceFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceFindingExternalsystemPathTemplate.match(projectSourceFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from ProjectSourceFindingExternalsystem resource.
   *
   * @param {string} projectSourceFindingExternalsystemName
   *   A fully-qualified path representing project_source_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromProjectSourceFindingExternalsystemName(projectSourceFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceFindingExternalsystemPathTemplate.match(projectSourceFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified projectSourceFindingSecurityMarks resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  projectSourceFindingSecurityMarksPath(project:string,source:string,finding:string) {
    return this.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.render({
      project: project,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the project from ProjectSourceFindingSecurityMarks resource.
   *
   * @param {string} projectSourceFindingSecurityMarksName
   *   A fully-qualified path representing project_source_finding_securityMarks resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceFindingSecurityMarksName(projectSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.match(projectSourceFindingSecurityMarksName).project;
  }

  /**
   * Parse the source from ProjectSourceFindingSecurityMarks resource.
   *
   * @param {string} projectSourceFindingSecurityMarksName
   *   A fully-qualified path representing project_source_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceFindingSecurityMarksName(projectSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.match(projectSourceFindingSecurityMarksName).source;
  }

  /**
   * Parse the finding from ProjectSourceFindingSecurityMarks resource.
   *
   * @param {string} projectSourceFindingSecurityMarksName
   *   A fully-qualified path representing project_source_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceFindingSecurityMarksName(projectSourceFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceFindingSecurityMarksPathTemplate.match(projectSourceFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified projectSourceFindings resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  projectSourceFindingsPath(project:string,source:string,finding:string) {
    return this.pathTemplates.projectSourceFindingsPathTemplate.render({
      project: project,
      source: source,
      finding: finding,
    });
  }

  /**
   * Parse the project from ProjectSourceFindings resource.
   *
   * @param {string} projectSourceFindingsName
   *   A fully-qualified path representing project_source_findings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceFindingsName(projectSourceFindingsName: string) {
    return this.pathTemplates.projectSourceFindingsPathTemplate.match(projectSourceFindingsName).project;
  }

  /**
   * Parse the source from ProjectSourceFindings resource.
   *
   * @param {string} projectSourceFindingsName
   *   A fully-qualified path representing project_source_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceFindingsName(projectSourceFindingsName: string) {
    return this.pathTemplates.projectSourceFindingsPathTemplate.match(projectSourceFindingsName).source;
  }

  /**
   * Parse the finding from ProjectSourceFindings resource.
   *
   * @param {string} projectSourceFindingsName
   *   A fully-qualified path representing project_source_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceFindingsName(projectSourceFindingsName: string) {
    return this.pathTemplates.projectSourceFindingsPathTemplate.match(projectSourceFindingsName).finding;
  }

  /**
   * Return a fully-qualified projectSourceLocationFindingExternalsystem resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @param {string} externalsystem
   * @returns {string} Resource name string.
   */
  projectSourceLocationFindingExternalsystemPath(project:string,source:string,location:string,finding:string,externalsystem:string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.render({
      project: project,
      source: source,
      location: location,
      finding: finding,
      externalsystem: externalsystem,
    });
  }

  /**
   * Parse the project from ProjectSourceLocationFindingExternalsystem resource.
   *
   * @param {string} projectSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing project_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceLocationFindingExternalsystemName(projectSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.match(projectSourceLocationFindingExternalsystemName).project;
  }

  /**
   * Parse the source from ProjectSourceLocationFindingExternalsystem resource.
   *
   * @param {string} projectSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing project_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceLocationFindingExternalsystemName(projectSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.match(projectSourceLocationFindingExternalsystemName).source;
  }

  /**
   * Parse the location from ProjectSourceLocationFindingExternalsystem resource.
   *
   * @param {string} projectSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing project_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectSourceLocationFindingExternalsystemName(projectSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.match(projectSourceLocationFindingExternalsystemName).location;
  }

  /**
   * Parse the finding from ProjectSourceLocationFindingExternalsystem resource.
   *
   * @param {string} projectSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing project_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceLocationFindingExternalsystemName(projectSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.match(projectSourceLocationFindingExternalsystemName).finding;
  }

  /**
   * Parse the externalsystem from ProjectSourceLocationFindingExternalsystem resource.
   *
   * @param {string} projectSourceLocationFindingExternalsystemName
   *   A fully-qualified path representing project_source_location_finding_externalsystem resource.
   * @returns {string} A string representing the externalsystem.
   */
  matchExternalsystemFromProjectSourceLocationFindingExternalsystemName(projectSourceLocationFindingExternalsystemName: string) {
    return this.pathTemplates.projectSourceLocationFindingExternalsystemPathTemplate.match(projectSourceLocationFindingExternalsystemName).externalsystem;
  }

  /**
   * Return a fully-qualified projectSourceLocationFindingSecurityMarks resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  projectSourceLocationFindingSecurityMarksPath(project:string,source:string,location:string,finding:string) {
    return this.pathTemplates.projectSourceLocationFindingSecurityMarksPathTemplate.render({
      project: project,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the project from ProjectSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} projectSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing project_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceLocationFindingSecurityMarksName(projectSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceLocationFindingSecurityMarksPathTemplate.match(projectSourceLocationFindingSecurityMarksName).project;
  }

  /**
   * Parse the source from ProjectSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} projectSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing project_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceLocationFindingSecurityMarksName(projectSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceLocationFindingSecurityMarksPathTemplate.match(projectSourceLocationFindingSecurityMarksName).source;
  }

  /**
   * Parse the location from ProjectSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} projectSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing project_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectSourceLocationFindingSecurityMarksName(projectSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceLocationFindingSecurityMarksPathTemplate.match(projectSourceLocationFindingSecurityMarksName).location;
  }

  /**
   * Parse the finding from ProjectSourceLocationFindingSecurityMarks resource.
   *
   * @param {string} projectSourceLocationFindingSecurityMarksName
   *   A fully-qualified path representing project_source_location_finding_securityMarks resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceLocationFindingSecurityMarksName(projectSourceLocationFindingSecurityMarksName: string) {
    return this.pathTemplates.projectSourceLocationFindingSecurityMarksPathTemplate.match(projectSourceLocationFindingSecurityMarksName).finding;
  }

  /**
   * Return a fully-qualified projectSourceLocationFindings resource name string.
   *
   * @param {string} project
   * @param {string} source
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  projectSourceLocationFindingsPath(project:string,source:string,location:string,finding:string) {
    return this.pathTemplates.projectSourceLocationFindingsPathTemplate.render({
      project: project,
      source: source,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the project from ProjectSourceLocationFindings resource.
   *
   * @param {string} projectSourceLocationFindingsName
   *   A fully-qualified path representing project_source_location_findings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSourceLocationFindingsName(projectSourceLocationFindingsName: string) {
    return this.pathTemplates.projectSourceLocationFindingsPathTemplate.match(projectSourceLocationFindingsName).project;
  }

  /**
   * Parse the source from ProjectSourceLocationFindings resource.
   *
   * @param {string} projectSourceLocationFindingsName
   *   A fully-qualified path representing project_source_location_findings resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromProjectSourceLocationFindingsName(projectSourceLocationFindingsName: string) {
    return this.pathTemplates.projectSourceLocationFindingsPathTemplate.match(projectSourceLocationFindingsName).source;
  }

  /**
   * Parse the location from ProjectSourceLocationFindings resource.
   *
   * @param {string} projectSourceLocationFindingsName
   *   A fully-qualified path representing project_source_location_findings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectSourceLocationFindingsName(projectSourceLocationFindingsName: string) {
    return this.pathTemplates.projectSourceLocationFindingsPathTemplate.match(projectSourceLocationFindingsName).location;
  }

  /**
   * Parse the finding from ProjectSourceLocationFindings resource.
   *
   * @param {string} projectSourceLocationFindingsName
   *   A fully-qualified path representing project_source_location_findings resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromProjectSourceLocationFindingsName(projectSourceLocationFindingsName: string) {
    return this.pathTemplates.projectSourceLocationFindingsPathTemplate.match(projectSourceLocationFindingsName).finding;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.securityCenterStub && !this._terminated) {
      return this.securityCenterStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}