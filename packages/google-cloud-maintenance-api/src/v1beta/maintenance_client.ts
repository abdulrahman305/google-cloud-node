// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/maintenance_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './maintenance_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Unified Maintenance service
 * @class
 * @memberof v1beta
 */
export class MaintenanceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('maintenance-api');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  maintenanceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MaintenanceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new MaintenanceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MaintenanceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'maintenance.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      resourceMaintenancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/resourceMaintenances/{resource_maintenance}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      summarizeMaintenances:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'maintenances'),
      listResourceMaintenances:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'resourceMaintenances')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.maintenance.api.v1beta.Maintenance', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.maintenanceStub) {
      return this.maintenanceStub;
    }

    // Put together the "service stub" for
    // google.cloud.maintenance.api.v1beta.Maintenance.
    this.maintenanceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.maintenance.api.v1beta.Maintenance') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.maintenance.api.v1beta.Maintenance,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const maintenanceStubMethods =
        ['summarizeMaintenances', 'listResourceMaintenances', 'getResourceMaintenance'];
    for (const methodName of maintenanceStubMethods) {
      const callPromise = this.maintenanceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.maintenanceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'maintenance.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'maintenance.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Retrieve a single resource maintenance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the resource within a service.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.maintenance.api.v1beta.ResourceMaintenance|ResourceMaintenance}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/maintenance.get_resource_maintenance.js</caption>
 * region_tag:maintenance_v1beta_generated_Maintenance_GetResourceMaintenance_async
 */
  getResourceMaintenance(
      request?: protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
        protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|undefined, {}|undefined
      ]>;
  getResourceMaintenance(
      request: protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
          protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|null|undefined,
          {}|null|undefined>): void;
  getResourceMaintenance(
      request: protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest,
      callback: Callback<
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
          protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|null|undefined,
          {}|null|undefined>): void;
  getResourceMaintenance(
      request?: protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
          protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
          protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
        protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getResourceMaintenance request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
        protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getResourceMaintenance response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getResourceMaintenance(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance,
        protos.google.cloud.maintenance.api.v1beta.IGetResourceMaintenanceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getResourceMaintenance response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

 /**
 * Retrieves the statistics of a specific maintenance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 *   eg. `projects/123/locations/*`
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page. The default
 *   page size is 20 and the maximum is 1000.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 *   Supported fields include:
 *   - state
 *   - resource.location
 *   - resource.resourceName
 *   - resource.type
 *   - maintenance.maintenanceName
 *   - maintenanceStartTime
 *   - maintenanceCompleteTime
 *   Examples:
 *   - state="SCHEDULED"
 *   - resource.location="us-central1-c"
 *   - resource.resourceName=~"* /instance-20241212-211259"
 *   - maintenanceStartTime>"2000-10-11T20:44:51Z"
 *   - state="SCHEDULED" OR resource.type="compute.googleapis.com/Instance"
 *   - maintenance.maitenanceName="eb3b709c-9ca1-5472-9fb6-800a3849eda1" AND
 *   maintenanceCompleteTime>"2000-10-11T20:44:51Z"
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.maintenance.api.v1beta.MaintenanceSummary|MaintenanceSummary}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `summarizeMaintenancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  summarizeMaintenances(
      request?: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary[],
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse
      ]>;
  summarizeMaintenances(
      request: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>): void;
  summarizeMaintenances(
      request: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      callback: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>): void;
  summarizeMaintenances(
      request?: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>,
      callback?: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary[],
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse|null|undefined,
      protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('summarizeMaintenances values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('summarizeMaintenances request %j', request);
    return this.innerApiCalls
      .summarizeMaintenances(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary[],
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesResponse
      ]) => {
        this._log.info('summarizeMaintenances values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `summarizeMaintenances`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 *   eg. `projects/123/locations/*`
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page. The default
 *   page size is 20 and the maximum is 1000.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 *   Supported fields include:
 *   - state
 *   - resource.location
 *   - resource.resourceName
 *   - resource.type
 *   - maintenance.maintenanceName
 *   - maintenanceStartTime
 *   - maintenanceCompleteTime
 *   Examples:
 *   - state="SCHEDULED"
 *   - resource.location="us-central1-c"
 *   - resource.resourceName=~"* /instance-20241212-211259"
 *   - maintenanceStartTime>"2000-10-11T20:44:51Z"
 *   - state="SCHEDULED" OR resource.type="compute.googleapis.com/Instance"
 *   - maintenance.maitenanceName="eb3b709c-9ca1-5472-9fb6-800a3849eda1" AND
 *   maintenanceCompleteTime>"2000-10-11T20:44:51Z"
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.maintenance.api.v1beta.MaintenanceSummary|MaintenanceSummary} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `summarizeMaintenancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  summarizeMaintenancesStream(
      request?: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['summarizeMaintenances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('summarizeMaintenances stream %j', request);
    return this.descriptors.page.summarizeMaintenances.createStream(
      this.innerApiCalls.summarizeMaintenances as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `summarizeMaintenances`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 *   eg. `projects/123/locations/*`
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page. The default
 *   page size is 20 and the maximum is 1000.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 *   Supported fields include:
 *   - state
 *   - resource.location
 *   - resource.resourceName
 *   - resource.type
 *   - maintenance.maintenanceName
 *   - maintenanceStartTime
 *   - maintenanceCompleteTime
 *   Examples:
 *   - state="SCHEDULED"
 *   - resource.location="us-central1-c"
 *   - resource.resourceName=~"* /instance-20241212-211259"
 *   - maintenanceStartTime>"2000-10-11T20:44:51Z"
 *   - state="SCHEDULED" OR resource.type="compute.googleapis.com/Instance"
 *   - maintenance.maitenanceName="eb3b709c-9ca1-5472-9fb6-800a3849eda1" AND
 *   maintenanceCompleteTime>"2000-10-11T20:44:51Z"
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.maintenance.api.v1beta.MaintenanceSummary|MaintenanceSummary}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/maintenance.summarize_maintenances.js</caption>
 * region_tag:maintenance_v1beta_generated_Maintenance_SummarizeMaintenances_async
 */
  summarizeMaintenancesAsync(
      request?: protos.google.cloud.maintenance.api.v1beta.ISummarizeMaintenancesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['summarizeMaintenances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('summarizeMaintenances iterate %j', request);
    return this.descriptors.page.summarizeMaintenances.asyncIterate(
      this.innerApiCalls['summarizeMaintenances'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.maintenance.api.v1beta.IMaintenanceSummary>;
  }
 /**
 * Retrieve a collection of resource maintenances.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.maintenance.api.v1beta.ResourceMaintenance|ResourceMaintenance}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listResourceMaintenancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listResourceMaintenances(
      request?: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance[],
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse
      ]>;
  listResourceMaintenances(
      request: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>): void;
  listResourceMaintenances(
      request: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      callback: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>): void;
  listResourceMaintenances(
      request?: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>,
      callback?: PaginationCallback<
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
          protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse|null|undefined,
          protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>):
      Promise<[
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance[],
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse|null|undefined,
      protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listResourceMaintenances values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listResourceMaintenances request %j', request);
    return this.innerApiCalls
      .listResourceMaintenances(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance[],
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest|null,
        protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesResponse
      ]) => {
        this._log.info('listResourceMaintenances values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listResourceMaintenances`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.maintenance.api.v1beta.ResourceMaintenance|ResourceMaintenance} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listResourceMaintenancesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listResourceMaintenancesStream(
      request?: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listResourceMaintenances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listResourceMaintenances stream %j', request);
    return this.descriptors.page.listResourceMaintenances.createStream(
      this.innerApiCalls.listResourceMaintenances as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listResourceMaintenances`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent of the resource maintenance.
 * @param {number} request.pageSize
 *   The maximum number of resource maintenances to send per page.
 * @param {string} request.pageToken
 *   The page token: If the next_page_token from a previous response
 *   is provided, this request will send the subsequent page.
 * @param {string} request.filter
 *   Filter the list as specified in https://google.aip.dev/160.
 * @param {string} request.orderBy
 *   Order results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.maintenance.api.v1beta.ResourceMaintenance|ResourceMaintenance}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/maintenance.list_resource_maintenances.js</caption>
 * region_tag:maintenance_v1beta_generated_Maintenance_ListResourceMaintenances_async
 */
  listResourceMaintenancesAsync(
      request?: protos.google.cloud.maintenance.api.v1beta.IListResourceMaintenancesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listResourceMaintenances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listResourceMaintenances iterate %j', request);
    return this.descriptors.page.listResourceMaintenances.asyncIterate(
      this.innerApiCalls['listResourceMaintenances'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.maintenance.api.v1beta.IResourceMaintenance>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified resourceMaintenance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} resource_maintenance
   * @returns {string} Resource name string.
   */
  resourceMaintenancePath(project:string,location:string,resourceMaintenance:string) {
    return this.pathTemplates.resourceMaintenancePathTemplate.render({
      project: project,
      location: location,
      resource_maintenance: resourceMaintenance,
    });
  }

  /**
   * Parse the project from ResourceMaintenance resource.
   *
   * @param {string} resourceMaintenanceName
   *   A fully-qualified path representing ResourceMaintenance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromResourceMaintenanceName(resourceMaintenanceName: string) {
    return this.pathTemplates.resourceMaintenancePathTemplate.match(resourceMaintenanceName).project;
  }

  /**
   * Parse the location from ResourceMaintenance resource.
   *
   * @param {string} resourceMaintenanceName
   *   A fully-qualified path representing ResourceMaintenance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromResourceMaintenanceName(resourceMaintenanceName: string) {
    return this.pathTemplates.resourceMaintenancePathTemplate.match(resourceMaintenanceName).location;
  }

  /**
   * Parse the resource_maintenance from ResourceMaintenance resource.
   *
   * @param {string} resourceMaintenanceName
   *   A fully-qualified path representing ResourceMaintenance resource.
   * @returns {string} A string representing the resource_maintenance.
   */
  matchResourceMaintenanceFromResourceMaintenanceName(resourceMaintenanceName: string) {
    return this.pathTemplates.resourceMaintenancePathTemplate.match(resourceMaintenanceName).resource_maintenance;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.maintenanceStub && !this._terminated) {
      return this.maintenanceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
      });
    }
    return Promise.resolve();
  }
}