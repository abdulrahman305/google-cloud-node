// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v2/worker_pools_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './worker_pools_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Cloud Run WorkerPool Control Plane API.
 * @class
 * @memberof v2
 */
export class WorkerPoolsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('run');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  workerPoolsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WorkerPoolsClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new WorkerPoolsClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof WorkerPoolsClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'run.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}/executions/{execution}'
      ),
      jobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      revisionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}/revisions/{revision}'
      ),
      servicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}/executions/{execution}/tasks/{task}'
      ),
      workerPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workerPools/{worker_pool}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listWorkerPools:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workerPools')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v2/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v2/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v2/{name=projects/*/locations/*}/operations',},{selector: 'google.longrunning.Operations.WaitOperation',post: '/v2/{name=projects/*/locations/*/operations/*}:wait',body: '*',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createWorkerPoolResponse = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;
    const createWorkerPoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;
    const updateWorkerPoolResponse = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;
    const updateWorkerPoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;
    const deleteWorkerPoolResponse = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;
    const deleteWorkerPoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.run.v2.WorkerPool') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createWorkerPool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createWorkerPoolResponse.decode.bind(createWorkerPoolResponse),
        createWorkerPoolMetadata.decode.bind(createWorkerPoolMetadata)),
      updateWorkerPool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateWorkerPoolResponse.decode.bind(updateWorkerPoolResponse),
        updateWorkerPoolMetadata.decode.bind(updateWorkerPoolMetadata)),
      deleteWorkerPool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteWorkerPoolResponse.decode.bind(deleteWorkerPoolResponse),
        deleteWorkerPoolMetadata.decode.bind(deleteWorkerPoolMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.run.v2.WorkerPools', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.workerPoolsStub) {
      return this.workerPoolsStub;
    }

    // Put together the "service stub" for
    // google.cloud.run.v2.WorkerPools.
    this.workerPoolsStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.run.v2.WorkerPools') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.run.v2.WorkerPools,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const workerPoolsStubMethods =
        ['createWorkerPool', 'getWorkerPool', 'listWorkerPools', 'updateWorkerPool', 'deleteWorkerPool', 'getIamPolicy', 'setIamPolicy', 'testIamPermissions'];
    for (const methodName of workerPoolsStubMethods) {
      const callPromise = this.workerPoolsStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.workerPoolsStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'run.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'run.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets information about a WorkerPool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full name of the WorkerPool.
 *   Format:
 *   `projects/{project}/locations/{location}/workerPools/{worker_pool}`, where
 *   `{project}` can be project id or number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.run.v2.WorkerPool|WorkerPool}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.get_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_GetWorkerPool_async
 */
  getWorkerPool(
      request?: protos.google.cloud.run.v2.IGetWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.run.v2.IWorkerPool,
        protos.google.cloud.run.v2.IGetWorkerPoolRequest|undefined, {}|undefined
      ]>;
  getWorkerPool(
      request: protos.google.cloud.run.v2.IGetWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.run.v2.IWorkerPool,
          protos.google.cloud.run.v2.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  getWorkerPool(
      request: protos.google.cloud.run.v2.IGetWorkerPoolRequest,
      callback: Callback<
          protos.google.cloud.run.v2.IWorkerPool,
          protos.google.cloud.run.v2.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  getWorkerPool(
      request?: protos.google.cloud.run.v2.IGetWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.run.v2.IWorkerPool,
          protos.google.cloud.run.v2.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.run.v2.IWorkerPool,
          protos.google.cloud.run.v2.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.run.v2.IWorkerPool,
        protos.google.cloud.run.v2.IGetWorkerPoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    this._log.info('getWorkerPool request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.run.v2.IWorkerPool,
        protos.google.cloud.run.v2.IGetWorkerPoolRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getWorkerPool response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getWorkerPool(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.run.v2.IWorkerPool,
        protos.google.cloud.run.v2.IGetWorkerPoolRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getWorkerPool response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets the IAM Access Control policy currently in effect for the given
 * Cloud Run WorkerPool. This result does not include any inherited policies.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.GetPolicyOptions} request.options
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.get_iam_policy.js</caption>
 * region_tag:run_v2_generated_WorkerPools_GetIamPolicy_async
 */
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getIamPolicy request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getIamPolicy response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getIamPolicy(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getIamPolicy response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Sets the IAM Access control policy for the specified WorkerPool. Overwrites
 * any existing policy.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being specified.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.Policy} request.policy
 *   REQUIRED: The complete policy to be applied to the `resource`. The size of
 *   the policy is limited to a few 10s of KB. An empty policy is a
 *   valid policy but certain Cloud Platform services (such as Projects)
 *   might reject them.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *   the fields in the mask will be modified. If no mask is provided, the
 *   following default mask is used:
 *
 *   `paths: "bindings, etag"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.set_iam_policy.js</caption>
 * region_tag:run_v2_generated_WorkerPools_SetIamPolicy_async
 */
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('setIamPolicy request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('setIamPolicy response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.setIamPolicy(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('setIamPolicy response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Returns permissions that a caller has on the specified Project.
 *
 * There are no permissions required for making this API call.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.test_iam_permissions.js</caption>
 * region_tag:run_v2_generated_WorkerPools_TestIamPermissions_async
 */
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'resource': request.resource ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('testIamPermissions request %j', request);
    const wrappedCallback: Callback<
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('testIamPermissions response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.testIamPermissions(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('testIamPermissions response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Creates a new WorkerPool in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The location and project in which this worker pool should be
 *   created. Format: `projects/{project}/locations/{location}`, where
 *   `{project}` can be project id or number. Only lowercase characters, digits,
 *   and hyphens.
 * @param {google.cloud.run.v2.WorkerPool} request.workerPool
 *   Required. The WorkerPool instance to create.
 * @param {string} request.workerPoolId
 *   Required. The unique identifier for the WorkerPool. It must begin with
 *   letter, and cannot end with hyphen; must contain fewer than 50 characters.
 *   The name of the worker pool becomes
 *   `{parent}/workerPools/{worker_pool_id}`.
 * @param {boolean} [request.validateOnly]
 *   Optional. Indicates that the request should be validated and default values
 *   populated, without persisting the request or creating any resources.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.create_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_CreateWorkerPool_async
 */
  createWorkerPool(
      request?: protos.google.cloud.run.v2.ICreateWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createWorkerPool(
      request: protos.google.cloud.run.v2.ICreateWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createWorkerPool(
      request: protos.google.cloud.run.v2.ICreateWorkerPoolRequest,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createWorkerPool(
      request?: protos.google.cloud.run.v2.ICreateWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createWorkerPool response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createWorkerPool request %j', request);
    return this.innerApiCalls.createWorkerPool(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createWorkerPool response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createWorkerPool()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.create_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_CreateWorkerPool_async
 */
  async checkCreateWorkerPoolProgress(name: string): Promise<LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>>{
    this._log.info('createWorkerPool long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createWorkerPool, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>;
  }
/**
 * Updates a WorkerPool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. The list of fields to be updated.
 * @param {google.cloud.run.v2.WorkerPool} request.workerPool
 *   Required. The WorkerPool to be updated.
 * @param {boolean} [request.validateOnly]
 *   Optional. Indicates that the request should be validated and default values
 *   populated, without persisting the request or updating any resources.
 * @param {boolean} [request.allowMissing]
 *   Optional. If set to true, and if the WorkerPool does not exist, it will
 *   create a new one. The caller must have 'run.workerpools.create' permissions
 *   if this is set to true and the WorkerPool does not exist.
 * @param {boolean} [request.forceNewRevision]
 *   Optional. If set to true, a new revision will be created from the template
 *   even if the system doesn't detect any changes from the previously deployed
 *   revision.
 *
 *   This may be useful for cases where the underlying resources need to be
 *   recreated or reinitialized. For example if the image is specified by label,
 *   but the underlying image digest has changed) or if the container performs
 *   deployment initialization work that needs to be performed again.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.update_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_UpdateWorkerPool_async
 */
  updateWorkerPool(
      request?: protos.google.cloud.run.v2.IUpdateWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateWorkerPool(
      request: protos.google.cloud.run.v2.IUpdateWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateWorkerPool(
      request: protos.google.cloud.run.v2.IUpdateWorkerPoolRequest,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateWorkerPool(
      request?: protos.google.cloud.run.v2.IUpdateWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.workerPool?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateWorkerPool response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateWorkerPool request %j', request);
    return this.innerApiCalls.updateWorkerPool(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateWorkerPool response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateWorkerPool()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.update_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_UpdateWorkerPool_async
 */
  async checkUpdateWorkerPoolProgress(name: string): Promise<LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>>{
    this._log.info('updateWorkerPool long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateWorkerPool, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>;
  }
/**
 * Deletes a WorkerPool.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full name of the WorkerPool.
 *   Format:
 *   `projects/{project}/locations/{location}/workerPools/{worker_pool}`, where
 *   `{project}` can be project id or number.
 * @param {boolean} [request.validateOnly]
 *   Optional. Indicates that the request should be validated without actually
 *   deleting any resources.
 * @param {string} request.etag
 *   A system-generated fingerprint for this version of the
 *   resource. May be used to detect modification conflict during updates.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.delete_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_DeleteWorkerPool_async
 */
  deleteWorkerPool(
      request?: protos.google.cloud.run.v2.IDeleteWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteWorkerPool(
      request: protos.google.cloud.run.v2.IDeleteWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteWorkerPool(
      request: protos.google.cloud.run.v2.IDeleteWorkerPoolRequest,
      callback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteWorkerPool(
      request?: protos.google.cloud.run.v2.IDeleteWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteWorkerPool response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteWorkerPool request %j', request);
    return this.innerApiCalls.deleteWorkerPool(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.run.v2.IWorkerPool, protos.google.cloud.run.v2.IWorkerPool>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteWorkerPool response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteWorkerPool()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.delete_worker_pool.js</caption>
 * region_tag:run_v2_generated_WorkerPools_DeleteWorkerPool_async
 */
  async checkDeleteWorkerPoolProgress(name: string): Promise<LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>>{
    this._log.info('deleteWorkerPool long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteWorkerPool, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.run.v2.WorkerPool, protos.google.cloud.run.v2.WorkerPool>;
  }
 /**
 * Lists WorkerPools. Results are sorted by creation time, descending.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The location and project to list resources on.
 *   Location must be a valid Google Cloud region, and cannot be the "-"
 *   wildcard. Format: `projects/{project}/locations/{location}`, where
 *   `{project}` can be project id or number.
 * @param {number} request.pageSize
 *   Maximum number of WorkerPools to return in this call.
 * @param {string} request.pageToken
 *   A page token received from a previous call to ListWorkerPools.
 *   All other parameters must match.
 * @param {boolean} request.showDeleted
 *   If true, returns deleted (but unexpired) resources along with active ones.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.run.v2.WorkerPool|WorkerPool}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listWorkerPoolsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listWorkerPools(
      request?: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.run.v2.IWorkerPool[],
        protos.google.cloud.run.v2.IListWorkerPoolsRequest|null,
        protos.google.cloud.run.v2.IListWorkerPoolsResponse
      ]>;
  listWorkerPools(
      request: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.run.v2.IListWorkerPoolsRequest,
          protos.google.cloud.run.v2.IListWorkerPoolsResponse|null|undefined,
          protos.google.cloud.run.v2.IWorkerPool>): void;
  listWorkerPools(
      request: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      callback: PaginationCallback<
          protos.google.cloud.run.v2.IListWorkerPoolsRequest,
          protos.google.cloud.run.v2.IListWorkerPoolsResponse|null|undefined,
          protos.google.cloud.run.v2.IWorkerPool>): void;
  listWorkerPools(
      request?: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.run.v2.IListWorkerPoolsRequest,
          protos.google.cloud.run.v2.IListWorkerPoolsResponse|null|undefined,
          protos.google.cloud.run.v2.IWorkerPool>,
      callback?: PaginationCallback<
          protos.google.cloud.run.v2.IListWorkerPoolsRequest,
          protos.google.cloud.run.v2.IListWorkerPoolsResponse|null|undefined,
          protos.google.cloud.run.v2.IWorkerPool>):
      Promise<[
        protos.google.cloud.run.v2.IWorkerPool[],
        protos.google.cloud.run.v2.IListWorkerPoolsRequest|null,
        protos.google.cloud.run.v2.IListWorkerPoolsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      protos.google.cloud.run.v2.IListWorkerPoolsResponse|null|undefined,
      protos.google.cloud.run.v2.IWorkerPool>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listWorkerPools values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listWorkerPools request %j', request);
    return this.innerApiCalls
      .listWorkerPools(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.run.v2.IWorkerPool[],
        protos.google.cloud.run.v2.IListWorkerPoolsRequest|null,
        protos.google.cloud.run.v2.IListWorkerPoolsResponse
      ]) => {
        this._log.info('listWorkerPools values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listWorkerPools`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The location and project to list resources on.
 *   Location must be a valid Google Cloud region, and cannot be the "-"
 *   wildcard. Format: `projects/{project}/locations/{location}`, where
 *   `{project}` can be project id or number.
 * @param {number} request.pageSize
 *   Maximum number of WorkerPools to return in this call.
 * @param {string} request.pageToken
 *   A page token received from a previous call to ListWorkerPools.
 *   All other parameters must match.
 * @param {boolean} request.showDeleted
 *   If true, returns deleted (but unexpired) resources along with active ones.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.run.v2.WorkerPool|WorkerPool} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listWorkerPoolsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listWorkerPoolsStream(
      request?: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listWorkerPools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listWorkerPools stream %j', request);
    return this.descriptors.page.listWorkerPools.createStream(
      this.innerApiCalls.listWorkerPools as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listWorkerPools`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The location and project to list resources on.
 *   Location must be a valid Google Cloud region, and cannot be the "-"
 *   wildcard. Format: `projects/{project}/locations/{location}`, where
 *   `{project}` can be project id or number.
 * @param {number} request.pageSize
 *   Maximum number of WorkerPools to return in this call.
 * @param {string} request.pageToken
 *   A page token received from a previous call to ListWorkerPools.
 *   All other parameters must match.
 * @param {boolean} request.showDeleted
 *   If true, returns deleted (but unexpired) resources along with active ones.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.run.v2.WorkerPool|WorkerPool}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/worker_pools.list_worker_pools.js</caption>
 * region_tag:run_v2_generated_WorkerPools_ListWorkerPools_async
 */
  listWorkerPoolsAsync(
      request?: protos.google.cloud.run.v2.IListWorkerPoolsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.run.v2.IWorkerPool>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['location'] ?? fieldValue;
          Object.assign(routingParameter, { location: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listWorkerPools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listWorkerPools iterate %j', request);
    return this.descriptors.page.listWorkerPools.asyncIterate(
      this.innerApiCalls['listWorkerPools'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.run.v2.IWorkerPool>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(project:string,location:string,job:string,execution:string) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      job: job,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).location;
  }

  /**
   * Parse the job from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).job;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).execution;
  }

  /**
   * Return a fully-qualified job resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @returns {string} Resource name string.
   */
  jobPath(project:string,location:string,job:string) {
    return this.pathTemplates.jobPathTemplate.render({
      project: project,
      location: location,
      job: job,
    });
  }

  /**
   * Parse the project from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).project;
  }

  /**
   * Parse the location from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).location;
  }

  /**
   * Parse the job from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).job;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified revision resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @param {string} revision
   * @returns {string} Resource name string.
   */
  revisionPath(project:string,location:string,service:string,revision:string) {
    return this.pathTemplates.revisionPathTemplate.render({
      project: project,
      location: location,
      service: service,
      revision: revision,
    });
  }

  /**
   * Parse the project from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).project;
  }

  /**
   * Parse the location from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).location;
  }

  /**
   * Parse the service from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).service;
  }

  /**
   * Parse the revision from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the revision.
   */
  matchRevisionFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).revision;
  }

  /**
   * Return a fully-qualified service resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @returns {string} Resource name string.
   */
  servicePath(project:string,location:string,service:string) {
    return this.pathTemplates.servicePathTemplate.render({
      project: project,
      location: location,
      service: service,
    });
  }

  /**
   * Parse the project from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).project;
  }

  /**
   * Parse the location from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).location;
  }

  /**
   * Parse the service from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).service;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @param {string} execution
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(project:string,location:string,job:string,execution:string,task:string) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      job: job,
      execution: execution,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the job from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).job;
  }

  /**
   * Parse the execution from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).execution;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified workerPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} worker_pool
   * @returns {string} Resource name string.
   */
  workerPoolPath(project:string,location:string,workerPool:string) {
    return this.pathTemplates.workerPoolPathTemplate.render({
      project: project,
      location: location,
      worker_pool: workerPool,
    });
  }

  /**
   * Parse the project from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).project;
  }

  /**
   * Parse the location from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).location;
  }

  /**
   * Parse the worker_pool from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the worker_pool.
   */
  matchWorkerPoolFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).worker_pool;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.workerPoolsStub && !this._terminated) {
      return this.workerPoolsStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}