// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/document_processor_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './document_processor_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service to call Document AI to process documents according to the
 *  processor's definition. Processors are built using state-of-the-art Google
 *  AI such as natural language, computer vision, and translation to extract
 *  structured information from unstructured or semi-structured documents.
 * @class
 * @memberof v1
 */
export class DocumentProcessorServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('documentai');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  documentProcessorServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DocumentProcessorServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DocumentProcessorServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DocumentProcessorServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'documentai.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      evaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}/evaluations/{evaluation}'
      ),
      humanReviewConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}/humanReviewConfig'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      processorTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processorTypes/{processor_type}'
      ),
      processorVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listProcessorTypes:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processorTypes'),
      listProcessors:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processors'),
      listProcessorVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processorVersions'),
      listEvaluations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'evaluations')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',additional_bindings: [{get: '/uiv1beta3/{name=projects/*/locations/*}',}],
      },{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',additional_bindings: [{get: '/uiv1beta3/{name=projects/*}/locations',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',additional_bindings: [{post: '/uiv1beta3/{name=projects/*/locations/*/operations/*}:cancel',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/operations/*}',additional_bindings: [{get: '/v1/{name=projects/*/locations/*/operations/*}',},{get: '/uiv1beta3/{name=projects/*/locations/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*/operations}',additional_bindings: [{get: '/uiv1beta3/{name=projects/*/locations/*/operations}',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const batchProcessDocumentsResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.BatchProcessResponse') as gax.protobuf.Type;
    const batchProcessDocumentsMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.BatchProcessMetadata') as gax.protobuf.Type;
    const trainProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.TrainProcessorVersionResponse') as gax.protobuf.Type;
    const trainProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.TrainProcessorVersionMetadata') as gax.protobuf.Type;
    const deleteProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DeleteProcessorVersionMetadata') as gax.protobuf.Type;
    const deployProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DeployProcessorVersionResponse') as gax.protobuf.Type;
    const deployProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DeployProcessorVersionMetadata') as gax.protobuf.Type;
    const undeployProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.UndeployProcessorVersionResponse') as gax.protobuf.Type;
    const undeployProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.UndeployProcessorVersionMetadata') as gax.protobuf.Type;
    const deleteProcessorResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DeleteProcessorMetadata') as gax.protobuf.Type;
    const enableProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.EnableProcessorResponse') as gax.protobuf.Type;
    const enableProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.EnableProcessorMetadata') as gax.protobuf.Type;
    const disableProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DisableProcessorResponse') as gax.protobuf.Type;
    const disableProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.DisableProcessorMetadata') as gax.protobuf.Type;
    const setDefaultProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.SetDefaultProcessorVersionResponse') as gax.protobuf.Type;
    const setDefaultProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.SetDefaultProcessorVersionMetadata') as gax.protobuf.Type;
    const reviewDocumentResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.ReviewDocumentResponse') as gax.protobuf.Type;
    const reviewDocumentMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.ReviewDocumentOperationMetadata') as gax.protobuf.Type;
    const evaluateProcessorVersionResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.EvaluateProcessorVersionResponse') as gax.protobuf.Type;
    const evaluateProcessorVersionMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1.EvaluateProcessorVersionMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      batchProcessDocuments: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchProcessDocumentsResponse.decode.bind(batchProcessDocumentsResponse),
        batchProcessDocumentsMetadata.decode.bind(batchProcessDocumentsMetadata)),
      trainProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        trainProcessorVersionResponse.decode.bind(trainProcessorVersionResponse),
        trainProcessorVersionMetadata.decode.bind(trainProcessorVersionMetadata)),
      deleteProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteProcessorVersionResponse.decode.bind(deleteProcessorVersionResponse),
        deleteProcessorVersionMetadata.decode.bind(deleteProcessorVersionMetadata)),
      deployProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployProcessorVersionResponse.decode.bind(deployProcessorVersionResponse),
        deployProcessorVersionMetadata.decode.bind(deployProcessorVersionMetadata)),
      undeployProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeployProcessorVersionResponse.decode.bind(undeployProcessorVersionResponse),
        undeployProcessorVersionMetadata.decode.bind(undeployProcessorVersionMetadata)),
      deleteProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteProcessorResponse.decode.bind(deleteProcessorResponse),
        deleteProcessorMetadata.decode.bind(deleteProcessorMetadata)),
      enableProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        enableProcessorResponse.decode.bind(enableProcessorResponse),
        enableProcessorMetadata.decode.bind(enableProcessorMetadata)),
      disableProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        disableProcessorResponse.decode.bind(disableProcessorResponse),
        disableProcessorMetadata.decode.bind(disableProcessorMetadata)),
      setDefaultProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        setDefaultProcessorVersionResponse.decode.bind(setDefaultProcessorVersionResponse),
        setDefaultProcessorVersionMetadata.decode.bind(setDefaultProcessorVersionMetadata)),
      reviewDocument: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        reviewDocumentResponse.decode.bind(reviewDocumentResponse),
        reviewDocumentMetadata.decode.bind(reviewDocumentMetadata)),
      evaluateProcessorVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        evaluateProcessorVersionResponse.decode.bind(evaluateProcessorVersionResponse),
        evaluateProcessorVersionMetadata.decode.bind(evaluateProcessorVersionMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.documentai.v1.DocumentProcessorService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.documentProcessorServiceStub) {
      return this.documentProcessorServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.documentai.v1.DocumentProcessorService.
    this.documentProcessorServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.documentai.v1.DocumentProcessorService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.documentai.v1.DocumentProcessorService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const documentProcessorServiceStubMethods =
        ['processDocument', 'batchProcessDocuments', 'fetchProcessorTypes', 'listProcessorTypes', 'getProcessorType', 'listProcessors', 'getProcessor', 'trainProcessorVersion', 'getProcessorVersion', 'listProcessorVersions', 'deleteProcessorVersion', 'deployProcessorVersion', 'undeployProcessorVersion', 'createProcessor', 'deleteProcessor', 'enableProcessor', 'disableProcessor', 'setDefaultProcessorVersion', 'reviewDocument', 'evaluateProcessorVersion', 'getEvaluation', 'listEvaluations'];
    for (const methodName of documentProcessorServiceStubMethods) {
      const callPromise = this.documentProcessorServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.documentProcessorServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'documentai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'documentai.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Processes a single document.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.documentai.v1.Document} request.inlineDocument
 *   An inline document proto.
 * @param {google.cloud.documentai.v1.RawDocument} request.rawDocument
 *   A raw document content (bytes).
 * @param {google.cloud.documentai.v1.GcsDocument} request.gcsDocument
 *   A raw document on Google Cloud Storage.
 * @param {string} request.name
 *   Required. The resource name of the
 *   {@link protos.google.cloud.documentai.v1.Processor|Processor} or
 *   {@link protos.google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion}
 *   to use for processing. If a
 *   {@link protos.google.cloud.documentai.v1.Processor|Processor} is specified, the server
 *   will use its [default
 *   version][google.cloud.documentai.v1.Processor.default_processor_version].
 *   Format: `projects/{project}/locations/{location}/processors/{processor}`,
 *   or
 *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
 * @param {boolean} request.skipHumanReview
 *   Whether human review should be skipped for this request. Default to
 *   `false`.
 * @param {google.protobuf.FieldMask} request.fieldMask
 *   Specifies which fields to include in the
 *   {@link protos.google.cloud.documentai.v1.ProcessResponse.document|ProcessResponse.document}
 *   output. Only supports top-level document and pages field, so it must be in
 *   the form of `{document_field_name}` or `pages.{page_field_name}`.
 * @param {google.cloud.documentai.v1.ProcessOptions} request.processOptions
 *   Inference-time options for the process API
 * @param {number[]} [request.labels]
 *   Optional. The labels with user-defined metadata for the request.
 *
 *   Label keys and values can be no longer than 63 characters
 *   (Unicode codepoints) and can only contain lowercase letters, numeric
 *   characters, underscores, and dashes. International characters are allowed.
 *   Label values are optional. Label keys must start with a letter.
 * @param {boolean} [request.imagelessMode]
 *   Optional. Option to remove images from the document.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.ProcessResponse|ProcessResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.process_document.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_ProcessDocument_async
 */
  processDocument(
      request?: protos.google.cloud.documentai.v1.IProcessRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessResponse,
        protos.google.cloud.documentai.v1.IProcessRequest|undefined, {}|undefined
      ]>;
  processDocument(
      request: protos.google.cloud.documentai.v1.IProcessRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessResponse,
          protos.google.cloud.documentai.v1.IProcessRequest|null|undefined,
          {}|null|undefined>): void;
  processDocument(
      request: protos.google.cloud.documentai.v1.IProcessRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessResponse,
          protos.google.cloud.documentai.v1.IProcessRequest|null|undefined,
          {}|null|undefined>): void;
  processDocument(
      request?: protos.google.cloud.documentai.v1.IProcessRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IProcessResponse,
          protos.google.cloud.documentai.v1.IProcessRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IProcessResponse,
          protos.google.cloud.documentai.v1.IProcessRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessResponse,
        protos.google.cloud.documentai.v1.IProcessRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('processDocument request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IProcessResponse,
        protos.google.cloud.documentai.v1.IProcessRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('processDocument response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.processDocument(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IProcessResponse,
        protos.google.cloud.documentai.v1.IProcessRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('processDocument response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Fetches processor types. Note that we don't use
 * {@link protos.google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes|ListProcessorTypes}
 * here, because it isn't paginated.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The location of processor types to list.
 *   Format: `projects/{project}/locations/{location}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.FetchProcessorTypesResponse|FetchProcessorTypesResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.fetch_processor_types.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_FetchProcessorTypes_async
 */
  fetchProcessorTypes(
      request?: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|undefined, {}|undefined
      ]>;
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>): void;
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>): void;
  fetchProcessorTypes(
      request?: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('fetchProcessorTypes request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('fetchProcessorTypes response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.fetchProcessorTypes(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('fetchProcessorTypes response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a processor type detail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor type resource name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.ProcessorType|ProcessorType}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.get_processor_type.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessorType_async
 */
  getProcessorType(
      request?: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessorType,
        protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|undefined, {}|undefined
      ]>;
  getProcessorType(
      request: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessorType,
          protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessorType(
      request: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessorType,
          protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessorType(
      request?: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IProcessorType,
          protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IProcessorType,
          protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessorType,
        protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getProcessorType request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IProcessorType,
        protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getProcessorType response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getProcessorType(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IProcessorType,
        protos.google.cloud.documentai.v1.IGetProcessorTypeRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getProcessorType response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a processor detail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.Processor|Processor}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.get_processor.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessor_async
 */
  getProcessor(
      request?: protos.google.cloud.documentai.v1.IGetProcessorRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.IGetProcessorRequest|undefined, {}|undefined
      ]>;
  getProcessor(
      request: protos.google.cloud.documentai.v1.IGetProcessorRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessor(
      request: protos.google.cloud.documentai.v1.IGetProcessorRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessor(
      request?: protos.google.cloud.documentai.v1.IGetProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.IGetProcessorRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.IGetProcessorRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getProcessor request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.IGetProcessorRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getProcessor response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getProcessor(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.IGetProcessorRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getProcessor response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a processor version detail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.get_processor_version.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessorVersion_async
 */
  getProcessorVersion(
      request?: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessorVersion,
        protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|undefined, {}|undefined
      ]>;
  getProcessorVersion(
      request: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessorVersion,
          protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessorVersion(
      request: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessorVersion,
          protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|null|undefined,
          {}|null|undefined>): void;
  getProcessorVersion(
      request?: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IProcessorVersion,
          protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IProcessorVersion,
          protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessorVersion,
        protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getProcessorVersion request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IProcessorVersion,
        protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getProcessorVersion response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getProcessorVersion(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IProcessorVersion,
        protos.google.cloud.documentai.v1.IGetProcessorVersionRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getProcessorVersion response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a processor from the
 * {@link protos.google.cloud.documentai.v1.ProcessorType|ProcessorType} provided. The
 * processor will be at `ENABLED` state by default after its creation. Note
 * that this method requires the `documentai.processors.create` permission on
 * the project, which is highly privileged. A user or service account with
 * this permission can create new processors that can interact with any gcs
 * bucket in your project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) under which to create the
 *   processor. Format: `projects/{project}/locations/{location}`
 * @param {google.cloud.documentai.v1.Processor} request.processor
 *   Required. The processor to be created, requires
 *   {@link protos.google.cloud.documentai.v1.Processor.type|Processor.type} and
 *   {@link protos.google.cloud.documentai.v1.Processor.display_name|Processor.display_name}
 *   to be set. Also, the
 *   {@link protos.google.cloud.documentai.v1.Processor.kms_key_name|Processor.kms_key_name}
 *   field must be set if the processor is under CMEK.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.Processor|Processor}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.create_processor.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_CreateProcessor_async
 */
  createProcessor(
      request?: protos.google.cloud.documentai.v1.ICreateProcessorRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.ICreateProcessorRequest|undefined, {}|undefined
      ]>;
  createProcessor(
      request: protos.google.cloud.documentai.v1.ICreateProcessorRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  createProcessor(
      request: protos.google.cloud.documentai.v1.ICreateProcessorRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  createProcessor(
      request?: protos.google.cloud.documentai.v1.ICreateProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IProcessor,
          protos.google.cloud.documentai.v1.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.ICreateProcessorRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createProcessor request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.ICreateProcessorRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createProcessor response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createProcessor(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.ICreateProcessorRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createProcessor response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Retrieves a specific evaluation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the
 *   {@link protos.google.cloud.documentai.v1.Evaluation|Evaluation} to get.
 *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}/evaluations/{evaluation}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.documentai.v1.Evaluation|Evaluation}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.get_evaluation.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_GetEvaluation_async
 */
  getEvaluation(
      request?: protos.google.cloud.documentai.v1.IGetEvaluationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1.IEvaluation,
        protos.google.cloud.documentai.v1.IGetEvaluationRequest|undefined, {}|undefined
      ]>;
  getEvaluation(
      request: protos.google.cloud.documentai.v1.IGetEvaluationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1.IEvaluation,
          protos.google.cloud.documentai.v1.IGetEvaluationRequest|null|undefined,
          {}|null|undefined>): void;
  getEvaluation(
      request: protos.google.cloud.documentai.v1.IGetEvaluationRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1.IEvaluation,
          protos.google.cloud.documentai.v1.IGetEvaluationRequest|null|undefined,
          {}|null|undefined>): void;
  getEvaluation(
      request?: protos.google.cloud.documentai.v1.IGetEvaluationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1.IEvaluation,
          protos.google.cloud.documentai.v1.IGetEvaluationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1.IEvaluation,
          protos.google.cloud.documentai.v1.IGetEvaluationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1.IEvaluation,
        protos.google.cloud.documentai.v1.IGetEvaluationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getEvaluation request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.documentai.v1.IEvaluation,
        protos.google.cloud.documentai.v1.IGetEvaluationRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getEvaluation response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getEvaluation(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.documentai.v1.IEvaluation,
        protos.google.cloud.documentai.v1.IGetEvaluationRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getEvaluation response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * LRO endpoint to batch process many documents. The output is written
 * to Cloud Storage as JSON in the [Document] format.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of
 *   {@link protos.google.cloud.documentai.v1.Processor|Processor} or
 *   {@link protos.google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion}.
 *   Format: `projects/{project}/locations/{location}/processors/{processor}`,
 *   or
 *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
 * @param {google.cloud.documentai.v1.BatchDocumentsInputConfig} request.inputDocuments
 *   The input documents for the
 *   {@link protos.google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments|BatchProcessDocuments}
 *   method.
 * @param {google.cloud.documentai.v1.DocumentOutputConfig} request.documentOutputConfig
 *   The output configuration for the
 *   {@link protos.google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments|BatchProcessDocuments}
 *   method.
 * @param {boolean} request.skipHumanReview
 *   Whether human review should be skipped for this request. Default to
 *   `false`.
 * @param {google.cloud.documentai.v1.ProcessOptions} request.processOptions
 *   Inference-time options for the process API
 * @param {number[]} [request.labels]
 *   Optional. The labels with user-defined metadata for the request.
 *
 *   Label keys and values can be no longer than 63 characters
 *   (Unicode codepoints) and can only contain lowercase letters, numeric
 *   characters, underscores, and dashes. International characters are allowed.
 *   Label values are optional. Label keys must start with a letter.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/document_processor_service.batch_process_documents.js</caption>
 * region_tag:documentai_v1_generated_DocumentProcessorService_BatchProcessDocuments_async
 */
  batchProcessDocuments(
      request?: protos.google.cloud.documentai.v1.IBatchProcessRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1.IBatchProcessRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1.IBatchProcessRequest,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  batchProcessDocuments(
      request?: protos.google.cloud.documentai.v1.IBatchProcessRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('batchProcessDocuments response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('batchProcessDocuments request %j', request);
    return this.innerApiCalls.batchProcessDocuments(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('batchProcessDocuments response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `batchProcessDocuments()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>incl