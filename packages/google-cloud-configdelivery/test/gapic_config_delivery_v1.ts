// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as configdeliveryModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ConfigDeliveryClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'configdelivery.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = configdeliveryModule.v1.ConfigDeliveryClient.servicePath;
                assert.strictEqual(servicePath, 'configdelivery.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = configdeliveryModule.v1.ConfigDeliveryClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'configdelivery.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'configdelivery.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'configdelivery.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new configdeliveryModule.v1.ConfigDeliveryClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'configdelivery.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new configdeliveryModule.v1.ConfigDeliveryClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'configdelivery.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new configdeliveryModule.v1.ConfigDeliveryClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = configdeliveryModule.v1.ConfigDeliveryClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.configDeliveryStub, undefined);
            await client.initialize();
            assert(client.configDeliveryStub);
        });

        it('has close method for the initialized client', done => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.configDeliveryStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.configDeliveryStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getResourceBundle', () => {
        it('invokes getResourceBundle without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResourceBundle()
            );
            client.innerApiCalls.getResourceBundle = stubSimpleCall(expectedResponse);
            const [response] = await client.getResourceBundle(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResourceBundle without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResourceBundle()
            );
            client.innerApiCalls.getResourceBundle = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getResourceBundle(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IResourceBundle|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResourceBundle with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getResourceBundle = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getResourceBundle(request), expectedError);
            const actualRequest = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResourceBundle with closed client', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getResourceBundle(request), expectedError);
        });
    });

    describe('getFleetPackage', () => {
        it('invokes getFleetPackage without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.FleetPackage()
            );
            client.innerApiCalls.getFleetPackage = stubSimpleCall(expectedResponse);
            const [response] = await client.getFleetPackage(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFleetPackage without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.FleetPackage()
            );
            client.innerApiCalls.getFleetPackage = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getFleetPackage(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IFleetPackage|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFleetPackage with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getFleetPackage = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getFleetPackage(request), expectedError);
            const actualRequest = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getFleetPackage with closed client', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getFleetPackage(request), expectedError);
        });
    });

    describe('getRelease', () => {
        it('invokes getRelease without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.getRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRelease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with closed client', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRelease(request), expectedError);
        });
    });

    describe('getVariant', () => {
        it('invokes getVariant without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Variant()
            );
            client.innerApiCalls.getVariant = stubSimpleCall(expectedResponse);
            const [response] = await client.getVariant(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getVariant without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Variant()
            );
            client.innerApiCalls.getVariant = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getVariant(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IVariant|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getVariant with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getVariant = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getVariant(request), expectedError);
            const actualRequest = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getVariant with closed client', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getVariant(request), expectedError);
        });
    });

    describe('getRollout', () => {
        it('invokes getRollout without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Rollout()
            );
            client.innerApiCalls.getRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.getRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.Rollout()
            );
            client.innerApiCalls.getRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout with closed client', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRollout(request), expectedError);
        });
    });

    describe('createResourceBundle', () => {
        it('invokes createResourceBundle without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateResourceBundleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createResourceBundle = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createResourceBundle(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResourceBundle without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateResourceBundleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createResourceBundle = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createResourceBundle(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IResourceBundle, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IResourceBundle, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResourceBundle with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateResourceBundleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createResourceBundle = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createResourceBundle(request), expectedError);
            const actualRequest = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResourceBundle with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateResourceBundleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createResourceBundle = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createResourceBundle(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateResourceBundleProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateResourceBundleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateResourceBundleProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateResourceBundleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateResourceBundle', () => {
        it('invokes updateResourceBundle without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateResourceBundleRequest()
            );
            request.resourceBundle ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateResourceBundleRequest', ['resourceBundle', 'name']);
            request.resourceBundle.name = defaultValue1;
            const expectedHeaderRequestParams = `resource_bundle.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateResourceBundle = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateResourceBundle(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateResourceBundle without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateResourceBundleRequest()
            );
            request.resourceBundle ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateResourceBundleRequest', ['resourceBundle', 'name']);
            request.resourceBundle.name = defaultValue1;
            const expectedHeaderRequestParams = `resource_bundle.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateResourceBundle = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateResourceBundle(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IResourceBundle, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IResourceBundle, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateResourceBundle with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateResourceBundleRequest()
            );
            request.resourceBundle ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateResourceBundleRequest', ['resourceBundle', 'name']);
            request.resourceBundle.name = defaultValue1;
            const expectedHeaderRequestParams = `resource_bundle.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateResourceBundle = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateResourceBundle(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateResourceBundle with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateResourceBundleRequest()
            );
            request.resourceBundle ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateResourceBundleRequest', ['resourceBundle', 'name']);
            request.resourceBundle.name = defaultValue1;
            const expectedHeaderRequestParams = `resource_bundle.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateResourceBundle = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateResourceBundle(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateResourceBundleProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateResourceBundleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateResourceBundleProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateResourceBundleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteResourceBundle', () => {
        it('invokes deleteResourceBundle without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteResourceBundle = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteResourceBundle(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResourceBundle without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteResourceBundle = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteResourceBundle(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResourceBundle with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteResourceBundle = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteResourceBundle(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResourceBundle with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteResourceBundleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteResourceBundleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteResourceBundle = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteResourceBundle(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResourceBundle as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteResourceBundleProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteResourceBundleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteResourceBundleProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteResourceBundleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createFleetPackage', () => {
        it('invokes createFleetPackage without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateFleetPackageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createFleetPackage = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createFleetPackage(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createFleetPackage without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateFleetPackageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createFleetPackage = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createFleetPackage(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IFleetPackage, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IFleetPackage, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createFleetPackage with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateFleetPackageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createFleetPackage = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createFleetPackage(request), expectedError);
            const actualRequest = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createFleetPackage with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateFleetPackageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createFleetPackage = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createFleetPackage(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateFleetPackageProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateFleetPackageProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateFleetPackageProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateFleetPackageProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateFleetPackage', () => {
        it('invokes updateFleetPackage without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateFleetPackageRequest()
            );
            request.fleetPackage ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateFleetPackageRequest', ['fleetPackage', 'name']);
            request.fleetPackage.name = defaultValue1;
            const expectedHeaderRequestParams = `fleet_package.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateFleetPackage = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateFleetPackage(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFleetPackage without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateFleetPackageRequest()
            );
            request.fleetPackage ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateFleetPackageRequest', ['fleetPackage', 'name']);
            request.fleetPackage.name = defaultValue1;
            const expectedHeaderRequestParams = `fleet_package.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateFleetPackage = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateFleetPackage(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IFleetPackage, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IFleetPackage, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFleetPackage with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateFleetPackageRequest()
            );
            request.fleetPackage ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateFleetPackageRequest', ['fleetPackage', 'name']);
            request.fleetPackage.name = defaultValue1;
            const expectedHeaderRequestParams = `fleet_package.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateFleetPackage = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateFleetPackage(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateFleetPackage with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateFleetPackageRequest()
            );
            request.fleetPackage ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateFleetPackageRequest', ['fleetPackage', 'name']);
            request.fleetPackage.name = defaultValue1;
            const expectedHeaderRequestParams = `fleet_package.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateFleetPackage = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateFleetPackage(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateFleetPackageProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateFleetPackageProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateFleetPackageProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateFleetPackageProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteFleetPackage', () => {
        it('invokes deleteFleetPackage without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteFleetPackage = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteFleetPackage(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteFleetPackage without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteFleetPackage = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteFleetPackage(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteFleetPackage with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteFleetPackage = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteFleetPackage(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteFleetPackage with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteFleetPackageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteFleetPackageRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteFleetPackage = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteFleetPackage(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteFleetPackage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteFleetPackageProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteFleetPackageProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteFleetPackageProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteFleetPackageProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createRelease', () => {
        it('invokes createRelease without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRelease = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createRelease(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRelease = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRelease(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IRelease, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IRelease, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createRelease(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateReleaseProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateReleaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateReleaseProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateReleaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateRelease', () => {
        it('invokes updateRelease without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateRelease = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateRelease(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateRelease = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRelease(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IRelease, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IRelease, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRelease = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRelease = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateRelease(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateReleaseProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateReleaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateReleaseProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateReleaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteRelease', () => {
        it('invokes deleteRelease without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteRelease = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteRelease(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteRelease = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRelease(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRelease = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRelease = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteRelease(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteReleaseProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteReleaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteReleaseProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteReleaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createVariant', () => {
        it('invokes createVariant without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateVariantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createVariant = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createVariant(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createVariant without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateVariantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createVariant = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createVariant(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IVariant, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IVariant, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createVariant with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateVariantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createVariant = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createVariant(request), expectedError);
            const actualRequest = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createVariant with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.CreateVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.CreateVariantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createVariant = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createVariant(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateVariantProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateVariantProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateVariantProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateVariantProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateVariant', () => {
        it('invokes updateVariant without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateVariantRequest()
            );
            request.variant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateVariantRequest', ['variant', 'name']);
            request.variant.name = defaultValue1;
            const expectedHeaderRequestParams = `variant.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateVariant = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateVariant(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateVariant without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateVariantRequest()
            );
            request.variant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateVariantRequest', ['variant', 'name']);
            request.variant.name = defaultValue1;
            const expectedHeaderRequestParams = `variant.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateVariant = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateVariant(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IVariant, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IVariant, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateVariant with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateVariantRequest()
            );
            request.variant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateVariantRequest', ['variant', 'name']);
            request.variant.name = defaultValue1;
            const expectedHeaderRequestParams = `variant.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateVariant = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateVariant(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateVariant with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.UpdateVariantRequest()
            );
            request.variant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.UpdateVariantRequest', ['variant', 'name']);
            request.variant.name = defaultValue1;
            const expectedHeaderRequestParams = `variant.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateVariant = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateVariant(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateVariantProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateVariantProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateVariantProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateVariantProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteVariant', () => {
        it('invokes deleteVariant without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteVariant = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteVariant(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteVariant without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteVariant = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteVariant(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteVariant with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteVariant = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteVariant(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteVariant with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.DeleteVariantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.DeleteVariantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteVariant = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteVariant(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteVariant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteVariantProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteVariantProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteVariantProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteVariantProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('suspendRollout', () => {
        it('invokes suspendRollout without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.SuspendRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.SuspendRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.suspendRollout = stubLongRunningCall(expectedResponse);
            const [operation] = await client.suspendRollout(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRollout without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.SuspendRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.SuspendRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.suspendRollout = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.suspendRollout(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRollout with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.SuspendRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.SuspendRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.suspendRollout = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.suspendRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRollout with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.SuspendRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.SuspendRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.suspendRollout = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.suspendRollout(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkSuspendRolloutProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSuspendRolloutProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSuspendRolloutProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSuspendRolloutProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('resumeRollout', () => {
        it('invokes resumeRollout without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResumeRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ResumeRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.resumeRollout = stubLongRunningCall(expectedResponse);
            const [operation] = await client.resumeRollout(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resumeRollout without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResumeRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ResumeRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.resumeRollout = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resumeRollout(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resumeRollout with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResumeRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ResumeRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.resumeRollout = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.resumeRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes resumeRollout with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ResumeRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ResumeRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.resumeRollout = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.resumeRollout(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.resumeRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkResumeRolloutProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkResumeRolloutProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkResumeRolloutProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkResumeRolloutProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('abortRollout', () => {
        it('invokes abortRollout without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.AbortRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.AbortRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.abortRollout = stubLongRunningCall(expectedResponse);
            const [operation] = await client.abortRollout(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes abortRollout without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.AbortRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.AbortRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.abortRollout = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.abortRollout(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.configdelivery.v1.IRollout, protos.google.cloud.configdelivery.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes abortRollout with call error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.AbortRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.AbortRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.abortRollout = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.abortRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes abortRollout with LRO error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.AbortRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.AbortRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.abortRollout = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.abortRollout(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.abortRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkAbortRolloutProgress without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAbortRolloutProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAbortRolloutProgress with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAbortRolloutProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listResourceBundles', () => {
        it('invokes listResourceBundles without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
            ];
            client.innerApiCalls.listResourceBundles = stubSimpleCall(expectedResponse);
            const [response] = await client.listResourceBundles(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listResourceBundles without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
            ];
            client.innerApiCalls.listResourceBundles = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listResourceBundles(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IResourceBundle[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listResourceBundles with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listResourceBundles = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listResourceBundles(request), expectedError);
            const actualRequest = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listResourceBundles as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listResourceBundlesStream without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
            ];
            client.descriptors.page.listResourceBundles.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listResourceBundlesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.ResourceBundle[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.ResourceBundle) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listResourceBundles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listResourceBundles, request));
            assert(
                (client.descriptors.page.listResourceBundles.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listResourceBundlesStream with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listResourceBundles.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listResourceBundlesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.ResourceBundle[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.ResourceBundle) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listResourceBundles.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listResourceBundles, request));
            assert(
                (client.descriptors.page.listResourceBundles.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listResourceBundles without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.ResourceBundle()),
            ];
            client.descriptors.page.listResourceBundles.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.configdelivery.v1.IResourceBundle[] = [];
            const iterable = client.listResourceBundlesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listResourceBundles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listResourceBundles.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listResourceBundles with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListResourceBundlesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListResourceBundlesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listResourceBundles.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listResourceBundlesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.configdelivery.v1.IResourceBundle[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listResourceBundles.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listResourceBundles.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listFleetPackages', () => {
        it('invokes listFleetPackages without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
            ];
            client.innerApiCalls.listFleetPackages = stubSimpleCall(expectedResponse);
            const [response] = await client.listFleetPackages(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFleetPackages without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
            ];
            client.innerApiCalls.listFleetPackages = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listFleetPackages(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IFleetPackage[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFleetPackages with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listFleetPackages = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listFleetPackages(request), expectedError);
            const actualRequest = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFleetPackages as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFleetPackagesStream without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
            ];
            client.descriptors.page.listFleetPackages.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listFleetPackagesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.FleetPackage[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.FleetPackage) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listFleetPackages.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFleetPackages, request));
            assert(
                (client.descriptors.page.listFleetPackages.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listFleetPackagesStream with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listFleetPackages.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listFleetPackagesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.FleetPackage[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.FleetPackage) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listFleetPackages.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFleetPackages, request));
            assert(
                (client.descriptors.page.listFleetPackages.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listFleetPackages without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.FleetPackage()),
            ];
            client.descriptors.page.listFleetPackages.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.configdelivery.v1.IFleetPackage[] = [];
            const iterable = client.listFleetPackagesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listFleetPackages.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listFleetPackages.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listFleetPackages with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListFleetPackagesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListFleetPackagesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listFleetPackages.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listFleetPackagesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.configdelivery.v1.IFleetPackage[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listFleetPackages.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listFleetPackages.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listReleases', () => {
        it('invokes listReleases without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCall(expectedResponse);
            const [response] = await client.listReleases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReleases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IRelease[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listReleases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReleases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleasesStream without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
            ];
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listReleasesStream with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listReleases without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Release()),
            ];
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.configdelivery.v1.IRelease[] = [];
            const iterable = client.listReleasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listReleases with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReleasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.configdelivery.v1.IRelease[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listVariants', () => {
        it('invokes listVariants without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
            ];
            client.innerApiCalls.listVariants = stubSimpleCall(expectedResponse);
            const [response] = await client.listVariants(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listVariants without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
            ];
            client.innerApiCalls.listVariants = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listVariants(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IVariant[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listVariants with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listVariants = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listVariants(request), expectedError);
            const actualRequest = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listVariants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listVariantsStream without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
            ];
            client.descriptors.page.listVariants.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listVariantsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Variant[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Variant) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listVariants.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVariants, request));
            assert(
                (client.descriptors.page.listVariants.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listVariantsStream with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listVariants.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listVariantsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Variant[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Variant) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listVariants.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVariants, request));
            assert(
                (client.descriptors.page.listVariants.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listVariants without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Variant()),
            ];
            client.descriptors.page.listVariants.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.configdelivery.v1.IVariant[] = [];
            const iterable = client.listVariantsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listVariants.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listVariants.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listVariants with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListVariantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListVariantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listVariants.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listVariantsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.configdelivery.v1.IVariant[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listVariants.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listVariants.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listRollouts', () => {
        it('invokes listRollouts without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCall(expectedResponse);
            const [response] = await client.listRollouts(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRollouts without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRollouts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.configdelivery.v1.IRollout[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRollouts with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRollouts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRollouts(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRolloutsStream without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
            ];
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRolloutsStream with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.configdelivery.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.configdelivery.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRollouts without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.configdelivery.v1.Rollout()),
            ];
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.configdelivery.v1.IRollout[] = [];
            const iterable = client.listRolloutsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRollouts with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.configdelivery.v1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.configdelivery.v1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRolloutsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.configdelivery.v1.IRollout[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('fleetPackage', async () => {
            const fakePath = "/rendered/path/fleetPackage";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                fleet_package: "fleetPackageValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.fleetPackagePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.fleetPackagePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('fleetPackagePath', () => {
                const result = client.fleetPackagePath("projectValue", "locationValue", "fleetPackageValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.fleetPackagePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFleetPackageName', () => {
                const result = client.matchProjectFromFleetPackageName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.fleetPackagePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFleetPackageName', () => {
                const result = client.matchLocationFromFleetPackageName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.fleetPackagePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFleetPackageFromFleetPackageName', () => {
                const result = client.matchFleetPackageFromFleetPackageName(fakePath);
                assert.strictEqual(result, "fleetPackageValue");
                assert((client.pathTemplates.fleetPackagePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('membership', async () => {
            const fakePath = "/rendered/path/membership";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                membership: "membershipValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.membershipPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.membershipPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('membershipPath', () => {
                const result = client.membershipPath("projectValue", "locationValue", "membershipValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.membershipPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMembershipName', () => {
                const result = client.matchProjectFromMembershipName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.membershipPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMembershipName', () => {
                const result = client.matchLocationFromMembershipName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.membershipPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMembershipFromMembershipName', () => {
                const result = client.matchMembershipFromMembershipName(fakePath);
                assert.strictEqual(result, "membershipValue");
                assert((client.pathTemplates.membershipPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('release', async () => {
            const fakePath = "/rendered/path/release";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                resource_bundle: "resourceBundleValue",
                release: "releaseValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.releasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.releasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('releasePath', () => {
                const result = client.releasePath("projectValue", "locationValue", "resourceBundleValue", "releaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.releasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReleaseName', () => {
                const result = client.matchProjectFromReleaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReleaseName', () => {
                const result = client.matchLocationFromReleaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchResourceBundleFromReleaseName', () => {
                const result = client.matchResourceBundleFromReleaseName(fakePath);
                assert.strictEqual(result, "resourceBundleValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromReleaseName', () => {
                const result = client.matchReleaseFromReleaseName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('resourceBundle', async () => {
            const fakePath = "/rendered/path/resourceBundle";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                resource_bundle: "resourceBundleValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.resourceBundlePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.resourceBundlePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('resourceBundlePath', () => {
                const result = client.resourceBundlePath("projectValue", "locationValue", "resourceBundleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.resourceBundlePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromResourceBundleName', () => {
                const result = client.matchProjectFromResourceBundleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.resourceBundlePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromResourceBundleName', () => {
                const result = client.matchLocationFromResourceBundleName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.resourceBundlePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchResourceBundleFromResourceBundleName', () => {
                const result = client.matchResourceBundleFromResourceBundleName(fakePath);
                assert.strictEqual(result, "resourceBundleValue");
                assert((client.pathTemplates.resourceBundlePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rollout', async () => {
            const fakePath = "/rendered/path/rollout";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                fleet_package: "fleetPackageValue",
                rollout: "rolloutValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolloutPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutPath', () => {
                const result = client.rolloutPath("projectValue", "locationValue", "fleetPackageValue", "rolloutValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutName', () => {
                const result = client.matchProjectFromRolloutName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutName', () => {
                const result = client.matchLocationFromRolloutName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFleetPackageFromRolloutName', () => {
                const result = client.matchFleetPackageFromRolloutName(fakePath);
                assert.strictEqual(result, "fleetPackageValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutFromRolloutName', () => {
                const result = client.matchRolloutFromRolloutName(fakePath);
                assert.strictEqual(result, "rolloutValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('variant', async () => {
            const fakePath = "/rendered/path/variant";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                resource_bundle: "resourceBundleValue",
                release: "releaseValue",
                variant: "variantValue",
            };
            const client = new configdeliveryModule.v1.ConfigDeliveryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.variantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.variantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('variantPath', () => {
                const result = client.variantPath("projectValue", "locationValue", "resourceBundleValue", "releaseValue", "variantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.variantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromVariantName', () => {
                const result = client.matchProjectFromVariantName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.variantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromVariantName', () => {
                const result = client.matchLocationFromVariantName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.variantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchResourceBundleFromVariantName', () => {
                const result = client.matchResourceBundleFromVariantName(fakePath);
                assert.strictEqual(result, "resourceBundleValue");
                assert((client.pathTemplates.variantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromVariantName', () => {
                const result = client.matchReleaseFromVariantName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.variantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVariantFromVariantName', () => {
                const result = client.matchVariantFromVariantName(fakePath);
                assert.strictEqual(result, "variantValue");
                assert((client.pathTemplates.variantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
