// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name) {
  // [START saasservicemgmt_v1beta1_generated_SaasRollouts_DeleteRollout_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the resource within a service.
   */
  // const name = 'abc123'
  /**
   *  The etag known to the client for the expected state of the rollout. This is
   *  used with state-changing methods to prevent accidental overwrites when
   *  multiple user agents might be acting in parallel on the same resource.
   *  An etag wildcard provide optimistic concurrency based on the expected
   *  existence of the rollout. The Any wildcard (`*`) requires that the resource
   *  must already exists, and the Not Any wildcard (`!*`) requires that it must
   *  not.
   */
  // const etag = 'abc123'
  /**
   *  If "validate_only" is set to true, the service will try to validate
   *  that this request would succeed, but will not actually make changes.
   */
  // const validateOnly = true
  /**
   *  An optional request ID to identify requests. Specify a unique request ID
   *  so that if you must retry your request, the server will know to ignore
   *  the request if it has already been completed. The server will guarantee
   *  that for at least 60 minutes since the first request.
   *  For example, consider a situation where you make an initial request and the
   *  request times out. If you make the request again with the same request
   *  ID, the server can check if original operation with the same request ID
   *  was received, and if so, will ignore the second request. This prevents
   *  clients from accidentally creating duplicate commitments.
   *  The request ID must be a valid UUID with the exception that zero UUID is
   *  not supported (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'

  // Imports the Saasservicemgmt library
  const {SaasRolloutsClient} = require('@google-cloud/saasservicemgmt').v1beta1;

  // Instantiates a client
  const saasservicemgmtClient = new SaasRolloutsClient();

  async function callDeleteRollout() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await saasservicemgmtClient.deleteRollout(request);
    console.log(response);
  }

  callDeleteRollout();
  // [END saasservicemgmt_v1beta1_generated_SaasRollouts_DeleteRollout_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
