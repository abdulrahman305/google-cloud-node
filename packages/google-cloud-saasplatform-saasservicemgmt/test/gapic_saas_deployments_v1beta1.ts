// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as saasdeploymentsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.SaasDeploymentsClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'saasservicemgmt.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = saasdeploymentsModule.v1beta1.SaasDeploymentsClient.servicePath;
                assert.strictEqual(servicePath, 'saasservicemgmt.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = saasdeploymentsModule.v1beta1.SaasDeploymentsClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'saasservicemgmt.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'saasservicemgmt.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = saasdeploymentsModule.v1beta1.SaasDeploymentsClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.saasDeploymentsStub, undefined);
            await client.initialize();
            assert(client.saasDeploymentsStub);
        });

        it('has close method for the initialized client', done => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.saasDeploymentsStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.saasDeploymentsStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getSaas', () => {
        it('invokes getSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.getSaas = stubSimpleCall(expectedResponse);
            const [response] = await client.getSaas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSaas without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.getSaas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSaas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSaas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSaas(request), expectedError);
            const actualRequest = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getSaas with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getSaas(request), expectedError);
        });
    });

    describe('createSaas', () => {
        it('invokes createSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.createSaas = stubSimpleCall(expectedResponse);
            const [response] = await client.createSaas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSaas without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.createSaas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSaas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSaas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSaas(request), expectedError);
            const actualRequest = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSaas with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createSaas(request), expectedError);
        });
    });

    describe('updateSaas', () => {
        it('invokes updateSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest()
            );
            request.saas ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest', ['saas', 'name']);
            request.saas.name = defaultValue1;
            const expectedHeaderRequestParams = `saas.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.updateSaas = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSaas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSaas without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest()
            );
            request.saas ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest', ['saas', 'name']);
            request.saas.name = defaultValue1;
            const expectedHeaderRequestParams = `saas.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()
            );
            client.innerApiCalls.updateSaas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSaas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest()
            );
            request.saas ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest', ['saas', 'name']);
            request.saas.name = defaultValue1;
            const expectedHeaderRequestParams = `saas.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSaas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSaas(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateSaas with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest()
            );
            request.saas ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateSaasRequest', ['saas', 'name']);
            request.saas.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateSaas(request), expectedError);
        });
    });

    describe('deleteSaas', () => {
        it('invokes deleteSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSaas = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSaas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSaas without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSaas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSaas(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSaas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSaas(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSaas with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteSaasRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteSaas(request), expectedError);
        });
    });

    describe('getTenant', () => {
        it('invokes getTenant without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.getTenant = stubSimpleCall(expectedResponse);
            const [response] = await client.getTenant(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTenant without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.getTenant = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTenant(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTenant with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getTenant = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTenant(request), expectedError);
            const actualRequest = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getTenant with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getTenant(request), expectedError);
        });
    });

    describe('createTenant', () => {
        it('invokes createTenant without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.createTenant = stubSimpleCall(expectedResponse);
            const [response] = await client.createTenant(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTenant without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.createTenant = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTenant(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTenant with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createTenant = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTenant(request), expectedError);
            const actualRequest = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createTenant with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateTenantRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createTenant(request), expectedError);
        });
    });

    describe('updateTenant', () => {
        it('invokes updateTenant without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest()
            );
            request.tenant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest', ['tenant', 'name']);
            request.tenant.name = defaultValue1;
            const expectedHeaderRequestParams = `tenant.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.updateTenant = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTenant(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTenant without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest()
            );
            request.tenant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest', ['tenant', 'name']);
            request.tenant.name = defaultValue1;
            const expectedHeaderRequestParams = `tenant.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()
            );
            client.innerApiCalls.updateTenant = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTenant(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTenant with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest()
            );
            request.tenant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest', ['tenant', 'name']);
            request.tenant.name = defaultValue1;
            const expectedHeaderRequestParams = `tenant.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTenant = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTenant(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateTenant with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest()
            );
            request.tenant ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateTenantRequest', ['tenant', 'name']);
            request.tenant.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateTenant(request), expectedError);
        });
    });

    describe('deleteTenant', () => {
        it('invokes deleteTenant without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteTenant = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTenant(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTenant without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteTenant = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTenant(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTenant with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTenant = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTenant(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteTenant as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteTenant with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteTenant(request), expectedError);
        });
    });

    describe('getUnitKind', () => {
        it('invokes getUnitKind without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.getUnitKind = stubSimpleCall(expectedResponse);
            const [response] = await client.getUnitKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitKind without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.getUnitKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUnitKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitKind with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUnitKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUnitKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitKind with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getUnitKind(request), expectedError);
        });
    });

    describe('createUnitKind', () => {
        it('invokes createUnitKind without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.createUnitKind = stubSimpleCall(expectedResponse);
            const [response] = await client.createUnitKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitKind without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.createUnitKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createUnitKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitKind with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createUnitKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createUnitKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitKind with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createUnitKind(request), expectedError);
        });
    });

    describe('updateUnitKind', () => {
        it('invokes updateUnitKind without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest()
            );
            request.unitKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest', ['unitKind', 'name']);
            request.unitKind.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_kind.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.updateUnitKind = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUnitKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitKind without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest()
            );
            request.unitKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest', ['unitKind', 'name']);
            request.unitKind.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_kind.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()
            );
            client.innerApiCalls.updateUnitKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUnitKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitKind with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest()
            );
            request.unitKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest', ['unitKind', 'name']);
            request.unitKind.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_kind.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUnitKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUnitKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitKind with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest()
            );
            request.unitKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitKindRequest', ['unitKind', 'name']);
            request.unitKind.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateUnitKind(request), expectedError);
        });
    });

    describe('deleteUnitKind', () => {
        it('invokes deleteUnitKind without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnitKind = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteUnitKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitKind without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnitKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteUnitKind(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitKind with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteUnitKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteUnitKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitKind with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteUnitKind(request), expectedError);
        });
    });

    describe('getUnit', () => {
        it('invokes getUnit without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.getUnit = stubSimpleCall(expectedResponse);
            const [response] = await client.getUnit(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnit without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.getUnit = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUnit(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnit with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUnit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUnit(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnit with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getUnit(request), expectedError);
        });
    });

    describe('createUnit', () => {
        it('invokes createUnit without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.createUnit = stubSimpleCall(expectedResponse);
            const [response] = await client.createUnit(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnit without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.createUnit = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createUnit(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnit with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createUnit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createUnit(request), expectedError);
            const actualRequest = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnit with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createUnit(request), expectedError);
        });
    });

    describe('updateUnit', () => {
        it('invokes updateUnit without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest()
            );
            request.unit ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest', ['unit', 'name']);
            request.unit.name = defaultValue1;
            const expectedHeaderRequestParams = `unit.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.updateUnit = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUnit(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnit without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest()
            );
            request.unit ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest', ['unit', 'name']);
            request.unit.name = defaultValue1;
            const expectedHeaderRequestParams = `unit.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()
            );
            client.innerApiCalls.updateUnit = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUnit(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnit with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest()
            );
            request.unit ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest', ['unit', 'name']);
            request.unit.name = defaultValue1;
            const expectedHeaderRequestParams = `unit.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUnit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUnit(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnit with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest()
            );
            request.unit ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitRequest', ['unit', 'name']);
            request.unit.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateUnit(request), expectedError);
        });
    });

    describe('deleteUnit', () => {
        it('invokes deleteUnit without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnit = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteUnit(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnit without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnit = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteUnit(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnit with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteUnit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteUnit(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnit as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnit with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteUnit(request), expectedError);
        });
    });

    describe('getUnitOperation', () => {
        it('invokes getUnitOperation without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.getUnitOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.getUnitOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitOperation without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.getUnitOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUnitOperation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitOperation with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUnitOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUnitOperation(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUnitOperation with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getUnitOperation(request), expectedError);
        });
    });

    describe('createUnitOperation', () => {
        it('invokes createUnitOperation without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.createUnitOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.createUnitOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitOperation without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.createUnitOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createUnitOperation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitOperation with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createUnitOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createUnitOperation(request), expectedError);
            const actualRequest = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createUnitOperation with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateUnitOperationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createUnitOperation(request), expectedError);
        });
    });

    describe('updateUnitOperation', () => {
        it('invokes updateUnitOperation without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest()
            );
            request.unitOperation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest', ['unitOperation', 'name']);
            request.unitOperation.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_operation.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.updateUnitOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUnitOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitOperation without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest()
            );
            request.unitOperation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest', ['unitOperation', 'name']);
            request.unitOperation.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_operation.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()
            );
            client.innerApiCalls.updateUnitOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUnitOperation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitOperation with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest()
            );
            request.unitOperation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest', ['unitOperation', 'name']);
            request.unitOperation.name = defaultValue1;
            const expectedHeaderRequestParams = `unit_operation.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUnitOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUnitOperation(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUnitOperation with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest()
            );
            request.unitOperation ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateUnitOperationRequest', ['unitOperation', 'name']);
            request.unitOperation.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateUnitOperation(request), expectedError);
        });
    });

    describe('deleteUnitOperation', () => {
        it('invokes deleteUnitOperation without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnitOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteUnitOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitOperation without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUnitOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteUnitOperation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitOperation with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteUnitOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteUnitOperation(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUnitOperation as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUnitOperation with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteUnitOperationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteUnitOperation(request), expectedError);
        });
    });

    describe('getRelease', () => {
        it('invokes getRelease without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.getRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRelease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRelease(request), expectedError);
        });
    });

    describe('createRelease', () => {
        it('invokes createRelease without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.createRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.createRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.createRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRelease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createRelease(request), expectedError);
        });
    });

    describe('updateRelease', () => {
        it('invokes updateRelease without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.updateRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()
            );
            client.innerApiCalls.updateRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRelease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateRelease(request), expectedError);
        });
    });

    describe('deleteRelease', () => {
        it('invokes deleteRelease without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRelease(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with closed client', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteRelease(request), expectedError);
        });
    });

    describe('listSaas', () => {
        it('invokes listSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
            ];
            client.innerApiCalls.listSaas = stubSimpleCall(expectedResponse);
            const [response] = await client.listSaas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSaas without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
            ];
            client.innerApiCalls.listSaas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSaas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listSaas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSaas(request), expectedError);
            const actualRequest = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listSaas as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listSaasStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
            ];
            client.descriptors.page.listSaas.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSaasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSaas.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSaas, request));
            assert(
                (client.descriptors.page.listSaas.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listSaasStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSaas.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSaasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSaas.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSaas, request));
            assert(
                (client.descriptors.page.listSaas.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listSaas without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Saas()),
            ];
            client.descriptors.page.listSaas.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas[] = [];
            const iterable = client.listSaasAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSaas.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSaas.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listSaas with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListSaasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSaas.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSaasAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ISaas[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSaas.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listSaas.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listTenants', () => {
        it('invokes listTenants without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
            ];
            client.innerApiCalls.listTenants = stubSimpleCall(expectedResponse);
            const [response] = await client.listTenants(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTenants without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
            ];
            client.innerApiCalls.listTenants = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTenants(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTenants with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listTenants = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTenants(request), expectedError);
            const actualRequest = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listTenants as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listTenantsStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
            ];
            client.descriptors.page.listTenants.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTenantsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTenants.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTenants, request));
            assert(
                (client.descriptors.page.listTenants.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listTenantsStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listTenants.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTenantsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTenants.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTenants, request));
            assert(
                (client.descriptors.page.listTenants.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listTenants without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Tenant()),
            ];
            client.descriptors.page.listTenants.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant[] = [];
            const iterable = client.listTenantsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTenants.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listTenants.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listTenants with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListTenantsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listTenants.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTenantsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ITenant[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTenants.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listTenants.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listUnitKinds', () => {
        it('invokes listUnitKinds without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
            ];
            client.innerApiCalls.listUnitKinds = stubSimpleCall(expectedResponse);
            const [response] = await client.listUnitKinds(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitKinds without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
            ];
            client.innerApiCalls.listUnitKinds = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUnitKinds(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitKinds with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listUnitKinds = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUnitKinds(request), expectedError);
            const actualRequest = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitKindsStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
            ];
            client.descriptors.page.listUnitKinds.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUnitKindsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUnitKinds.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnitKinds, request));
            assert(
                (client.descriptors.page.listUnitKinds.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listUnitKindsStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnitKinds.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUnitKindsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUnitKinds.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnitKinds, request));
            assert(
                (client.descriptors.page.listUnitKinds.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listUnitKinds without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitKind()),
            ];
            client.descriptors.page.listUnitKinds.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind[] = [];
            const iterable = client.listUnitKindsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUnitKinds.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnitKinds.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listUnitKinds with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnitKinds.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUnitKindsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitKind[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUnitKinds.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnitKinds.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listUnits', () => {
        it('invokes listUnits without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
            ];
            client.innerApiCalls.listUnits = stubSimpleCall(expectedResponse);
            const [response] = await client.listUnits(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnits without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
            ];
            client.innerApiCalls.listUnits = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUnits(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnits with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listUnits = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUnits(request), expectedError);
            const actualRequest = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnits as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitsStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
            ];
            client.descriptors.page.listUnits.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUnitsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUnits.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnits, request));
            assert(
                (client.descriptors.page.listUnits.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listUnitsStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnits.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUnitsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUnits.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnits, request));
            assert(
                (client.descriptors.page.listUnits.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listUnits without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Unit()),
            ];
            client.descriptors.page.listUnits.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit[] = [];
            const iterable = client.listUnitsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUnits.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnits.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listUnits with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnits.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUnitsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnit[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUnits.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnits.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listUnitOperations', () => {
        it('invokes listUnitOperations without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
            ];
            client.innerApiCalls.listUnitOperations = stubSimpleCall(expectedResponse);
            const [response] = await client.listUnitOperations(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitOperations without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
            ];
            client.innerApiCalls.listUnitOperations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUnitOperations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitOperations with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listUnitOperations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUnitOperations(request), expectedError);
            const actualRequest = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUnitOperations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUnitOperationsStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
            ];
            client.descriptors.page.listUnitOperations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUnitOperationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUnitOperations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnitOperations, request));
            assert(
                (client.descriptors.page.listUnitOperations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listUnitOperationsStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnitOperations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUnitOperationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUnitOperations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUnitOperations, request));
            assert(
                (client.descriptors.page.listUnitOperations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listUnitOperations without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UnitOperation()),
            ];
            client.descriptors.page.listUnitOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation[] = [];
            const iterable = client.listUnitOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUnitOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnitOperations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listUnitOperations with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListUnitOperationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUnitOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUnitOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IUnitOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUnitOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUnitOperations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listReleases', () => {
        it('invokes listReleases without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCall(expectedResponse);
            const [response] = await client.listReleases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReleases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listReleases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReleases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleasesStream without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
            ];
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listReleasesStream with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listReleases without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Release()),
            ];
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease[] = [];
            const iterable = client.listReleasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listReleases with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReleasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRelease[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('release', async () => {
            const fakePath = "/rendered/path/release";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                release: "releaseValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.releasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.releasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('releasePath', () => {
                const result = client.releasePath("projectValue", "locationValue", "releaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.releasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReleaseName', () => {
                const result = client.matchProjectFromReleaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReleaseName', () => {
                const result = client.matchLocationFromReleaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromReleaseName', () => {
                const result = client.matchReleaseFromReleaseName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rollout', async () => {
            const fakePath = "/rendered/path/rollout";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                rollout_id: "rolloutIdValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolloutPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutPath', () => {
                const result = client.rolloutPath("projectValue", "locationValue", "rolloutIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutName', () => {
                const result = client.matchProjectFromRolloutName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutName', () => {
                const result = client.matchLocationFromRolloutName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutIdFromRolloutName', () => {
                const result = client.matchRolloutIdFromRolloutName(fakePath);
                assert.strictEqual(result, "rolloutIdValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rolloutKind', async () => {
            const fakePath = "/rendered/path/rolloutKind";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                rollout_kind_id: "rolloutKindIdValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolloutKindPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutKindPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutKindPath', () => {
                const result = client.rolloutKindPath("projectValue", "locationValue", "rolloutKindIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutKindPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutKindName', () => {
                const result = client.matchProjectFromRolloutKindName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutKindName', () => {
                const result = client.matchLocationFromRolloutKindName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutKindIdFromRolloutKindName', () => {
                const result = client.matchRolloutKindIdFromRolloutKindName(fakePath);
                assert.strictEqual(result, "rolloutKindIdValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('saas', async () => {
            const fakePath = "/rendered/path/saas";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                saas: "saasValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.saasPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.saasPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('saasPath', () => {
                const result = client.saasPath("projectValue", "locationValue", "saasValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.saasPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSaasName', () => {
                const result = client.matchProjectFromSaasName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSaasName', () => {
                const result = client.matchLocationFromSaasName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSaasFromSaasName', () => {
                const result = client.matchSaasFromSaasName(fakePath);
                assert.strictEqual(result, "saasValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('tenant', async () => {
            const fakePath = "/rendered/path/tenant";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                tenant: "tenantValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.tenantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.tenantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('tenantPath', () => {
                const result = client.tenantPath("projectValue", "locationValue", "tenantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.tenantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTenantName', () => {
                const result = client.matchProjectFromTenantName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTenantName', () => {
                const result = client.matchLocationFromTenantName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTenantFromTenantName', () => {
                const result = client.matchTenantFromTenantName(fakePath);
                assert.strictEqual(result, "tenantValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unit', async () => {
            const fakePath = "/rendered/path/unit";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unit: "unitValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitPath', () => {
                const result = client.unitPath("projectValue", "locationValue", "unitValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitName', () => {
                const result = client.matchProjectFromUnitName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitName', () => {
                const result = client.matchLocationFromUnitName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitFromUnitName', () => {
                const result = client.matchUnitFromUnitName(fakePath);
                assert.strictEqual(result, "unitValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unitKind', async () => {
            const fakePath = "/rendered/path/unitKind";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unitKind: "unitKindValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitKindPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitKindPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitKindPath', () => {
                const result = client.unitKindPath("projectValue", "locationValue", "unitKindValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitKindPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitKindName', () => {
                const result = client.matchProjectFromUnitKindName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitKindName', () => {
                const result = client.matchLocationFromUnitKindName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitKindFromUnitKindName', () => {
                const result = client.matchUnitKindFromUnitKindName(fakePath);
                assert.strictEqual(result, "unitKindValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unitOperation', async () => {
            const fakePath = "/rendered/path/unitOperation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unitOperation: "unitOperationValue",
            };
            const client = new saasdeploymentsModule.v1beta1.SaasDeploymentsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitOperationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitOperationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitOperationPath', () => {
                const result = client.unitOperationPath("projectValue", "locationValue", "unitOperationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitOperationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitOperationName', () => {
                const result = client.matchProjectFromUnitOperationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitOperationName', () => {
                const result = client.matchLocationFromUnitOperationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitOperationFromUnitOperationName', () => {
                const result = client.matchUnitOperationFromUnitOperationName(fakePath);
                assert.strictEqual(result, "unitOperationValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
