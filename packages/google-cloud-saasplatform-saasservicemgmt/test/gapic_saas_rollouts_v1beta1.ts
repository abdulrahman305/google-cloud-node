// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as saasrolloutsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.SaasRolloutsClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'saasservicemgmt.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = saasrolloutsModule.v1beta1.SaasRolloutsClient.servicePath;
                assert.strictEqual(servicePath, 'saasservicemgmt.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = saasrolloutsModule.v1beta1.SaasRolloutsClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'saasservicemgmt.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'saasservicemgmt.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'saasservicemgmt.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new saasrolloutsModule.v1beta1.SaasRolloutsClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = saasrolloutsModule.v1beta1.SaasRolloutsClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.saasRolloutsStub, undefined);
            await client.initialize();
            assert(client.saasRolloutsStub);
        });

        it('has close method for the initialized client', done => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.saasRolloutsStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.saasRolloutsStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getRollout', () => {
        it('invokes getRollout without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.getRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.getRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.getRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRollout with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRollout(request), expectedError);
        });
    });

    describe('createRollout', () => {
        it('invokes createRollout without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.createRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.createRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRollout without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.createRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRollout with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRollout with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createRollout(request), expectedError);
        });
    });

    describe('updateRollout', () => {
        it('invokes updateRollout without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest()
            );
            request.rollout ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest', ['rollout', 'name']);
            request.rollout.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.updateRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRollout without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest()
            );
            request.rollout ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest', ['rollout', 'name']);
            request.rollout.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()
            );
            client.innerApiCalls.updateRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRollout with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest()
            );
            request.rollout ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest', ['rollout', 'name']);
            request.rollout.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRollout with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest()
            );
            request.rollout ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutRequest', ['rollout', 'name']);
            request.rollout.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateRollout(request), expectedError);
        });
    });

    describe('deleteRollout', () => {
        it('invokes deleteRollout without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRollout without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRollout(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRollout with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRollout(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRollout as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRollout with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteRollout(request), expectedError);
        });
    });

    describe('getRolloutKind', () => {
        it('invokes getRolloutKind without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.getRolloutKind = stubSimpleCall(expectedResponse);
            const [response] = await client.getRolloutKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRolloutKind without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.getRolloutKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRolloutKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRolloutKind with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRolloutKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRolloutKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRolloutKind with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.GetRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRolloutKind(request), expectedError);
        });
    });

    describe('createRolloutKind', () => {
        it('invokes createRolloutKind without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.createRolloutKind = stubSimpleCall(expectedResponse);
            const [response] = await client.createRolloutKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRolloutKind without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.createRolloutKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRolloutKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRolloutKind with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRolloutKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRolloutKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRolloutKind with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.CreateRolloutKindRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createRolloutKind(request), expectedError);
        });
    });

    describe('updateRolloutKind', () => {
        it('invokes updateRolloutKind without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest()
            );
            request.rolloutKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest', ['rolloutKind', 'name']);
            request.rolloutKind.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout_kind.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.updateRolloutKind = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRolloutKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRolloutKind without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest()
            );
            request.rolloutKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest', ['rolloutKind', 'name']);
            request.rolloutKind.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout_kind.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()
            );
            client.innerApiCalls.updateRolloutKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRolloutKind(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRolloutKind with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest()
            );
            request.rolloutKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest', ['rolloutKind', 'name']);
            request.rolloutKind.name = defaultValue1;
            const expectedHeaderRequestParams = `rollout_kind.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRolloutKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRolloutKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRolloutKind with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest()
            );
            request.rolloutKind ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.UpdateRolloutKindRequest', ['rolloutKind', 'name']);
            request.rolloutKind.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateRolloutKind(request), expectedError);
        });
    });

    describe('deleteRolloutKind', () => {
        it('invokes deleteRolloutKind without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRolloutKind = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRolloutKind(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRolloutKind without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRolloutKind = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRolloutKind(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRolloutKind with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRolloutKind = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRolloutKind(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRolloutKind as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRolloutKind with closed client', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteRolloutKindRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteRolloutKind(request), expectedError);
        });
    });

    describe('listRollouts', () => {
        it('invokes listRollouts without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCall(expectedResponse);
            const [response] = await client.listRollouts(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRollouts without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRollouts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRollouts with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRollouts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRollouts(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRolloutsStream without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
            ];
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRolloutsStream with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRollouts without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.Rollout()),
            ];
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout[] = [];
            const iterable = client.listRolloutsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRollouts with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRolloutsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRollout[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listRolloutKinds', () => {
        it('invokes listRolloutKinds without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
            ];
            client.innerApiCalls.listRolloutKinds = stubSimpleCall(expectedResponse);
            const [response] = await client.listRolloutKinds(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRolloutKinds without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
            ];
            client.innerApiCalls.listRolloutKinds = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRolloutKinds(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRolloutKinds with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRolloutKinds = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRolloutKinds(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRolloutKinds as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRolloutKindsStream without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
            ];
            client.descriptors.page.listRolloutKinds.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRolloutKindsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRolloutKinds.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRolloutKinds, request));
            assert(
                (client.descriptors.page.listRolloutKinds.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRolloutKindsStream with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRolloutKinds.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRolloutKindsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind[] = [];
                stream.on('data', (response: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRolloutKinds.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRolloutKinds, request));
            assert(
                (client.descriptors.page.listRolloutKinds.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRolloutKinds without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
              generateSampleMessage(new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.RolloutKind()),
            ];
            client.descriptors.page.listRolloutKinds.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind[] = [];
            const iterable = client.listRolloutKindsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRolloutKinds.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRolloutKinds.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRolloutKinds with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.saasplatform.saasservicemgmt.v1beta1.ListRolloutKindsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRolloutKinds.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRolloutKindsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.saasplatform.saasservicemgmt.v1beta1.IRolloutKind[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRolloutKinds.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRolloutKinds.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('release', async () => {
            const fakePath = "/rendered/path/release";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                release: "releaseValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.releasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.releasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('releasePath', () => {
                const result = client.releasePath("projectValue", "locationValue", "releaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.releasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReleaseName', () => {
                const result = client.matchProjectFromReleaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReleaseName', () => {
                const result = client.matchLocationFromReleaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromReleaseName', () => {
                const result = client.matchReleaseFromReleaseName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rollout', async () => {
            const fakePath = "/rendered/path/rollout";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                rollout_id: "rolloutIdValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolloutPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutPath', () => {
                const result = client.rolloutPath("projectValue", "locationValue", "rolloutIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutName', () => {
                const result = client.matchProjectFromRolloutName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutName', () => {
                const result = client.matchLocationFromRolloutName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutIdFromRolloutName', () => {
                const result = client.matchRolloutIdFromRolloutName(fakePath);
                assert.strictEqual(result, "rolloutIdValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rolloutKind', async () => {
            const fakePath = "/rendered/path/rolloutKind";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                rollout_kind_id: "rolloutKindIdValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolloutKindPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutKindPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutKindPath', () => {
                const result = client.rolloutKindPath("projectValue", "locationValue", "rolloutKindIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutKindPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutKindName', () => {
                const result = client.matchProjectFromRolloutKindName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutKindName', () => {
                const result = client.matchLocationFromRolloutKindName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutKindIdFromRolloutKindName', () => {
                const result = client.matchRolloutKindIdFromRolloutKindName(fakePath);
                assert.strictEqual(result, "rolloutKindIdValue");
                assert((client.pathTemplates.rolloutKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('saas', async () => {
            const fakePath = "/rendered/path/saas";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                saas: "saasValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.saasPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.saasPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('saasPath', () => {
                const result = client.saasPath("projectValue", "locationValue", "saasValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.saasPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSaasName', () => {
                const result = client.matchProjectFromSaasName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSaasName', () => {
                const result = client.matchLocationFromSaasName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSaasFromSaasName', () => {
                const result = client.matchSaasFromSaasName(fakePath);
                assert.strictEqual(result, "saasValue");
                assert((client.pathTemplates.saasPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('tenant', async () => {
            const fakePath = "/rendered/path/tenant";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                tenant: "tenantValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.tenantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.tenantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('tenantPath', () => {
                const result = client.tenantPath("projectValue", "locationValue", "tenantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.tenantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTenantName', () => {
                const result = client.matchProjectFromTenantName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTenantName', () => {
                const result = client.matchLocationFromTenantName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTenantFromTenantName', () => {
                const result = client.matchTenantFromTenantName(fakePath);
                assert.strictEqual(result, "tenantValue");
                assert((client.pathTemplates.tenantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unit', async () => {
            const fakePath = "/rendered/path/unit";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unit: "unitValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitPath', () => {
                const result = client.unitPath("projectValue", "locationValue", "unitValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitName', () => {
                const result = client.matchProjectFromUnitName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitName', () => {
                const result = client.matchLocationFromUnitName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitFromUnitName', () => {
                const result = client.matchUnitFromUnitName(fakePath);
                assert.strictEqual(result, "unitValue");
                assert((client.pathTemplates.unitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unitKind', async () => {
            const fakePath = "/rendered/path/unitKind";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unitKind: "unitKindValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitKindPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitKindPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitKindPath', () => {
                const result = client.unitKindPath("projectValue", "locationValue", "unitKindValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitKindPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitKindName', () => {
                const result = client.matchProjectFromUnitKindName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitKindName', () => {
                const result = client.matchLocationFromUnitKindName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitKindFromUnitKindName', () => {
                const result = client.matchUnitKindFromUnitKindName(fakePath);
                assert.strictEqual(result, "unitKindValue");
                assert((client.pathTemplates.unitKindPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('unitOperation', async () => {
            const fakePath = "/rendered/path/unitOperation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                unitOperation: "unitOperationValue",
            };
            const client = new saasrolloutsModule.v1beta1.SaasRolloutsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.unitOperationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.unitOperationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('unitOperationPath', () => {
                const result = client.unitOperationPath("projectValue", "locationValue", "unitOperationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.unitOperationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromUnitOperationName', () => {
                const result = client.matchProjectFromUnitOperationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromUnitOperationName', () => {
                const result = client.matchLocationFromUnitOperationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnitOperationFromUnitOperationName', () => {
                const result = client.matchUnitOperationFromUnitOperationName(fakePath);
                assert.strictEqual(result, "unitOperationValue");
                assert((client.pathTemplates.unitOperationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
